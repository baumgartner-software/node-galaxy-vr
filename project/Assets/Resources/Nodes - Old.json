{
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/BoundedLocalCacheTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/BoundedLocalCacheTest.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest"
        ],
        "label": "BoundedLocalCacheTest.java",
        "text": "BoundedLocalCacheTest.java",
        "color": "#636363",
        "additional": "BoundedLocalCacheTest.java",
        "position": {
            "x": -0.4279850720505862,
            "y": 2.2313233354227346,
            "z": 2.7689638194550126
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/EvictionTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/EvictionTest.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest"
        ],
        "label": "EvictionTest.java",
        "text": "EvictionTest.java",
        "color": "#636363",
        "additional": "EvictionTest.java",
        "position": {
            "x": 0.30751592066812794,
            "y": 2.8850339515170287,
            "z": 2.0587849888672594
        }
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/CacheWriter.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/CacheWriter.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CacheWriter"
        ],
        "label": "CacheWriter.java",
        "text": "CacheWriter.java",
        "color": "#636363",
        "additional": "CacheWriter.java",
        "position": {
            "x": 0.825500650623439,
            "y": 2.922570686598302,
            "z": 1.4422606614627589
        }
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/RemovalListener.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/RemovalListener.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.RemovalListener"
        ],
        "label": "RemovalListener.java",
        "text": "RemovalListener.java",
        "color": "#636363",
        "additional": "RemovalListener.java",
        "position": {
            "x": 0.9509773197021385,
            "y": 3.1227604986285087,
            "z": 1.3020057602455504
        }
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Caffeine.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Caffeine.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine"
        ],
        "label": "Caffeine.java",
        "text": "Caffeine.java",
        "color": "#636363",
        "additional": "Caffeine.java",
        "position": {
            "x": 0.33614242668790784,
            "y": 2.403807685229971,
            "z": 1.928508853125795
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/CaffeineSpecTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/CaffeineSpecTest.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest"
        ],
        "label": "CaffeineSpecTest.java",
        "text": "CaffeineSpecTest.java",
        "color": "#636363",
        "additional": "CaffeineSpecTest.java",
        "position": {
            "x": -0.6845880724203235,
            "y": 2.6816598776169736,
            "z": 3.3722541933678083
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/ExpireAfterAccessTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/ExpireAfterAccessTest.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest"
        ],
        "label": "ExpireAfterAccessTest.java",
        "text": "ExpireAfterAccessTest.java",
        "color": "#636363",
        "additional": "ExpireAfterAccessTest.java",
        "position": {
            "x": 1.4949225742925232,
            "y": 2.545577084296086,
            "z": 3.683216303990186
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/ExpireAfterVarTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/ExpireAfterVarTest.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest"
        ],
        "label": "ExpireAfterVarTest.java",
        "text": "ExpireAfterVarTest.java",
        "color": "#636363",
        "additional": "ExpireAfterVarTest.java",
        "position": {
            "x": -1.013399954778642,
            "y": 2.3758553973082233,
            "z": 2.3436701584161823
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/ExpireAfterWriteTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/ExpireAfterWriteTest.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest"
        ],
        "label": "ExpireAfterWriteTest.java",
        "text": "ExpireAfterWriteTest.java",
        "color": "#636363",
        "additional": "ExpireAfterWriteTest.java",
        "position": {
            "x": 1.660114708794917,
            "y": 2.338705350142674,
            "z": 2.9291172437735624
        }
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Expiry.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Expiry.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry"
        ],
        "label": "Expiry.java",
        "text": "Expiry.java",
        "color": "#636363",
        "additional": "Expiry.java",
        "position": {
            "x": -0.8884223014480686,
            "y": 2.606160812705262,
            "z": 4.5
        }
    },
    "caffeine/src/javaPoet/java/com/github/benmanes/caffeine/cache/LocalCacheFactoryGenerator.java": {
        "id": "caffeine/src/javaPoet/java/com/github/benmanes/caffeine/cache/LocalCacheFactoryGenerator.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator"
        ],
        "label": "LocalCacheFactoryGenerator.java",
        "text": "LocalCacheFactoryGenerator.java",
        "color": "#636363",
        "additional": "LocalCacheFactoryGenerator.java",
        "position": {
            "x": -0.8313385302696565,
            "y": 2.4274124208044223,
            "z": 0.6660940919384418
        }
    },
    "caffeine/src/javaPoet/java/com/github/benmanes/caffeine/cache/NodeFactoryGenerator.java": {
        "id": "caffeine/src/javaPoet/java/com/github/benmanes/caffeine/cache/NodeFactoryGenerator.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator"
        ],
        "label": "NodeFactoryGenerator.java",
        "text": "NodeFactoryGenerator.java",
        "color": "#636363",
        "additional": "NodeFactoryGenerator.java",
        "position": {
            "x": -0.8114596934946912,
            "y": 2.021252031026936,
            "z": 0.7993797410940763
        }
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Pacer.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Pacer.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Pacer"
        ],
        "label": "Pacer.java",
        "text": "Pacer.java",
        "color": "#636363",
        "additional": "Pacer.java",
        "position": {
            "x": -0.19480242059246344,
            "y": 4.127827977940552,
            "z": 1.3967093302041738
        }
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Scheduler.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Scheduler.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Scheduler"
        ],
        "label": "Scheduler.java",
        "text": "Scheduler.java",
        "color": "#636363",
        "additional": "Scheduler.java",
        "position": {
            "x": 0.058750413116851696,
            "y": 4.5,
            "z": 1.6687129605793423
        }
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Policy.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Policy.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration"
        ],
        "label": "Policy.java",
        "text": "Policy.java",
        "color": "#636363",
        "additional": "Policy.java",
        "position": {
            "x": -0.7157893341921362,
            "y": 3.492551476055954,
            "z": 3.4489600431087437
        }
    },
    "guava/src/test/java/com/github/benmanes/caffeine/cache/QueueSanityTest.java": {
        "id": "guava/src/test/java/com/github/benmanes/caffeine/cache/QueueSanityTest.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest"
        ],
        "label": "QueueSanityTest.java",
        "text": "QueueSanityTest.java",
        "color": "#636363",
        "additional": "QueueSanityTest.java",
        "position": {
            "x": 0.9352991755625446,
            "y": 2.294707321264186,
            "z": 0.5
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/RefreshAfterWriteTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/RefreshAfterWriteTest.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest"
        ],
        "label": "RefreshAfterWriteTest.java",
        "text": "RefreshAfterWriteTest.java",
        "color": "#636363",
        "additional": "RefreshAfterWriteTest.java",
        "position": {
            "x": 0.6032151762351519,
            "y": 0.5430527414760573,
            "z": 2.5644591314204415
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/TimerWheelTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/TimerWheelTest.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest"
        ],
        "label": "TimerWheelTest.java",
        "text": "TimerWheelTest.java",
        "color": "#636363",
        "additional": "TimerWheelTest.java",
        "position": {
            "x": -0.17931696206569603,
            "y": 3.0654315681358284,
            "z": 2.378552004111601
        }
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/MpscGrowableArrayQueue.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/MpscGrowableArrayQueue.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess"
        ],
        "label": "MpscGrowableArrayQueue.java",
        "text": "MpscGrowableArrayQueue.java",
        "color": "#636363",
        "additional": "MpscGrowableArrayQueue.java",
        "position": {
            "x": 0.4232836833782514,
            "y": 3.776641713176868,
            "z": 0.9334276905282147
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/issues/Issue30Test.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/issues/Issue30Test.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test"
        ],
        "label": "Issue30Test.java",
        "text": "Issue30Test.java",
        "color": "#636363",
        "additional": "Issue30Test.java",
        "position": {
            "x": 1.8670811027071825,
            "y": 1.259581147509281,
            "z": 2.75982414629619
        }
    },
    "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/Synthetic.java": {
        "id": "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/Synthetic.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic"
        ],
        "label": "Synthetic.java",
        "text": "Synthetic.java",
        "color": "#636363",
        "additional": "Synthetic.java",
        "position": {
            "x": -0.2776166993881688,
            "y": 3.8409255450745174,
            "z": 4.153739601757021
        }
    },
    "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/admission/tinycache/TinyCache.java": {
        "id": "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/admission/tinycache/TinyCache.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache"
        ],
        "label": "TinyCache.java",
        "text": "TinyCache.java",
        "color": "#636363",
        "additional": "TinyCache.java",
        "position": {
            "x": 0.1711331707954833,
            "y": 1.6660634601773312,
            "z": 2.872133882393134
        }
    },
    "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/admission/tinycache/TinyCacheSketch.java": {
        "id": "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/admission/tinycache/TinyCacheSketch.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch"
        ],
        "label": "TinyCacheSketch.java",
        "text": "TinyCacheSketch.java",
        "color": "#636363",
        "additional": "TinyCacheSketch.java",
        "position": {
            "x": 0.07749276633283797,
            "y": 1.564328476297139,
            "z": 2.721673205070344
        }
    },
    "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/admission/tinycache/TinyCacheWithGhostCache.java": {
        "id": "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/admission/tinycache/TinyCacheWithGhostCache.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache"
        ],
        "label": "TinyCacheWithGhostCache.java",
        "text": "TinyCacheWithGhostCache.java",
        "color": "#636363",
        "additional": "TinyCacheWithGhostCache.java",
        "position": {
            "x": -0.04934944919607709,
            "y": 1.5165704919677627,
            "z": 2.978829531146639
        }
    },
    "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/admission/tinycache/TinySetIndexing.java": {
        "id": "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/admission/tinycache/TinySetIndexing.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing"
        ],
        "label": "TinySetIndexing.java",
        "text": "TinySetIndexing.java",
        "color": "#636363",
        "additional": "TinySetIndexing.java",
        "position": {
            "x": -1.7734673622729367,
            "y": 2.482969463833113,
            "z": 1.3436407256558414
        }
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/stats/CacheStats.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/stats/CacheStats.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats"
        ],
        "label": "CacheStats.java",
        "text": "CacheStats.java",
        "color": "#636363",
        "additional": "CacheStats.java",
        "position": {
            "x": 0.23217272354546648,
            "y": 1.5513319468846354,
            "z": 1.2384798925385905
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/stats/CacheStatsTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/stats/CacheStatsTest.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest"
        ],
        "label": "CacheStatsTest.java",
        "text": "CacheStatsTest.java",
        "color": "#636363",
        "additional": "CacheStatsTest.java",
        "position": {
            "x": 0.3322236927986344,
            "y": 1.7264683368745388,
            "z": 1.1807054800215506
        }
    },
    "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/policy/PolicyStats.java": {
        "id": "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/policy/PolicyStats.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats"
        ],
        "label": "PolicyStats.java",
        "text": "PolicyStats.java",
        "color": "#636363",
        "additional": "PolicyStats.java",
        "position": {
            "x": -0.03758371604444166,
            "y": 1.811794666057997,
            "z": 1.3774715078023636
        }
    },
    "jcache/src/main/java/com/github/benmanes/caffeine/jcache/event/EventDispatcher.java": {
        "id": "jcache/src/main/java/com/github/benmanes/caffeine/jcache/event/EventDispatcher.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher"
        ],
        "label": "EventDispatcher.java",
        "text": "EventDispatcher.java",
        "color": "#636363",
        "additional": "EventDispatcher.java",
        "position": {
            "x": 0.9251381927868536,
            "y": 3.2407511554391837,
            "z": 2.200271243211291
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/testing/DescriptionBuilder.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/testing/DescriptionBuilder.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder"
        ],
        "label": "DescriptionBuilder.java",
        "text": "DescriptionBuilder.java",
        "color": "#636363",
        "additional": "DescriptionBuilder.java",
        "position": {
            "x": 1.380821804129444,
            "y": 3.1017784739930176,
            "z": 1.1409856085164902
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/SingleConsumerQueueTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/SingleConsumerQueueTest.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.SingleConsumerQueueTest"
        ],
        "label": "SingleConsumerQueueTest.java",
        "text": "SingleConsumerQueueTest.java",
        "color": "#636363",
        "additional": "SingleConsumerQueueTest.java",
        "position": {
            "x": 1.7670403795110339,
            "y": 3.5908329148554348,
            "z": 1.6813264178168583
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/MpscGrowableArrayQueueTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/MpscGrowableArrayQueueTest.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest"
        ],
        "label": "MpscGrowableArrayQueueTest.java",
        "text": "MpscGrowableArrayQueueTest.java",
        "color": "#636363",
        "additional": "MpscGrowableArrayQueueTest.java",
        "position": {
            "x": 1.5605020240466208,
            "y": 3.954516879429826,
            "z": 1.8454914311299104
        }
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/base/UnsafeAccess.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/base/UnsafeAccess.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccess"
        ],
        "label": "UnsafeAccess.java",
        "text": "UnsafeAccess.java",
        "color": "#636363",
        "additional": "UnsafeAccess.java",
        "position": {
            "x": 0.8191547831942705,
            "y": 2.492961350178542,
            "z": 4.215768645546573
        }
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/UnsafeAccess.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/UnsafeAccess.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccess"
        ],
        "label": "UnsafeAccess.java",
        "text": "UnsafeAccess.java",
        "color": "#636363",
        "additional": "UnsafeAccess.java",
        "position": {
            "x": 0.8804292775958746,
            "y": 2.1124335562507763,
            "z": 4.344698510604829
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/base/UnsafeAccessTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/base/UnsafeAccessTest.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields"
        ],
        "label": "UnsafeAccessTest.java",
        "text": "UnsafeAccessTest.java",
        "color": "#636363",
        "additional": "UnsafeAccessTest.java",
        "position": {
            "x": -1.3942472964798156,
            "y": 1.5634953968347516,
            "z": 3.510677992188707
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/UnsafeAccessTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/UnsafeAccessTest.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields"
        ],
        "label": "UnsafeAccessTest.java",
        "text": "UnsafeAccessTest.java",
        "color": "#636363",
        "additional": "UnsafeAccessTest.java",
        "position": {
            "x": -1.345773736619822,
            "y": 1.2312896406275486,
            "z": 3.2621201443136463
        }
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/CaffeineSpec.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/CaffeineSpec.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpec"
        ],
        "label": "CaffeineSpec.java",
        "text": "CaffeineSpec.java",
        "color": "#636363",
        "additional": "CaffeineSpec.java",
        "position": {
            "x": -0.18474020437942418,
            "y": 2.294021434908551,
            "z": 1.6755423489130845
        }
    },
    "caffeine/src/jmh/java/com/github/benmanes/caffeine/cache/ComputeBenchmark.java": {
        "id": "caffeine/src/jmh/java/com/github/benmanes/caffeine/cache/ComputeBenchmark.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ComputeBenchmark"
        ],
        "label": "ComputeBenchmark.java",
        "text": "ComputeBenchmark.java",
        "color": "#636363",
        "additional": "ComputeBenchmark.java",
        "position": {
            "x": 1.331323604669576,
            "y": 3.007593657812036,
            "z": 2.902166947223641
        }
    },
    "caffeine/src/jmh/java/com/github/benmanes/caffeine/profiler/CacheProfiler.java": {
        "id": "caffeine/src/jmh/java/com/github/benmanes/caffeine/profiler/CacheProfiler.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.profiler.CacheProfiler"
        ],
        "label": "CacheProfiler.java",
        "text": "CacheProfiler.java",
        "color": "#636363",
        "additional": "CacheProfiler.java",
        "position": {
            "x": 1.3295731417628982,
            "y": 3.401141913138019,
            "z": 3.057352104126027
        }
    },
    "caffeine/src/jmh/java/com/github/benmanes/caffeine/cache/FrequencySketchBenchmark.java": {
        "id": "caffeine/src/jmh/java/com/github/benmanes/caffeine/cache/FrequencySketchBenchmark.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark"
        ],
        "label": "FrequencySketchBenchmark.java",
        "text": "FrequencySketchBenchmark.java",
        "color": "#636363",
        "additional": "FrequencySketchBenchmark.java",
        "position": {
            "x": -0.4520911783122057,
            "y": 2.142922168555002,
            "z": 3.919133675844524
        }
    },
    "caffeine/src/jmh/java/com/github/benmanes/caffeine/cache/GetPutBenchmark.java": {
        "id": "caffeine/src/jmh/java/com/github/benmanes/caffeine/cache/GetPutBenchmark.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.GetPutBenchmark"
        ],
        "label": "GetPutBenchmark.java",
        "text": "GetPutBenchmark.java",
        "color": "#636363",
        "additional": "GetPutBenchmark.java",
        "position": {
            "x": -0.7803182762764622,
            "y": 1.959561781304028,
            "z": 3.9029907436342928
        }
    },
    "caffeine/src/jmh/java/com/github/benmanes/caffeine/cache/PutRemoveBenchmark.java": {
        "id": "caffeine/src/jmh/java/com/github/benmanes/caffeine/cache/PutRemoveBenchmark.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark"
        ],
        "label": "PutRemoveBenchmark.java",
        "text": "PutRemoveBenchmark.java",
        "color": "#636363",
        "additional": "PutRemoveBenchmark.java",
        "position": {
            "x": -0.7831288337931273,
            "y": 2.298476084885925,
            "z": 3.8151329023346423
        }
    },
    "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/policy/irr/FrdPolicy.java": {
        "id": "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/policy/irr/FrdPolicy.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node"
        ],
        "label": "FrdPolicy.java",
        "text": "FrdPolicy.java",
        "color": "#636363",
        "additional": "FrdPolicy.java",
        "position": {
            "x": -1.582924468982913,
            "y": 2.9312513564638976,
            "z": 1.6066769855977983
        }
    },
    "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/policy/irr/HillClimberFrdPolicy.java": {
        "id": "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/policy/irr/HillClimberFrdPolicy.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node"
        ],
        "label": "HillClimberFrdPolicy.java",
        "text": "HillClimberFrdPolicy.java",
        "color": "#636363",
        "additional": "HillClimberFrdPolicy.java",
        "position": {
            "x": -1.494641905382261,
            "y": 2.73834867894878,
            "z": 1.5867750066295179
        }
    },
    "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/policy/irr/IndicatorFrdPolicy.java": {
        "id": "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/policy/irr/IndicatorFrdPolicy.java",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node"
        ],
        "label": "IndicatorFrdPolicy.java",
        "text": "IndicatorFrdPolicy.java",
        "color": "#636363",
        "additional": "IndicatorFrdPolicy.java",
        "position": {
            "x": -1.3452798530800236,
            "y": 2.8395492278449597,
            "z": 1.3998299470906344
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)"
        ],
        "label": "BoundedLocalCacheTest",
        "text": "BoundedLocalCacheTest",
        "color": "#6D6921",
        "additional": "BoundedLocalCacheTest",
        "position": {
            "x": -0.3975334147106342,
            "y": 2.2534188788487954,
            "z": 2.691319895535211
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)"
        ],
        "label": "EvictionTest",
        "text": "EvictionTest",
        "color": "#6D6921",
        "additional": "EvictionTest",
        "position": {
            "x": 0.2831781737646808,
            "y": 2.856472831777825,
            "z": 2.1320662522650666
        }
    },
    "com.github.benmanes.caffeine.cache.CacheWriter": {
        "id": "com.github.benmanes.caffeine.cache.CacheWriter",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)"
        ],
        "label": "CacheWriter",
        "text": "CacheWriter",
        "color": "#6D6921",
        "additional": "CacheWriter",
        "position": {
            "x": 0.7905460697563562,
            "y": 2.9073566531126263,
            "z": 1.360631513874954
        }
    },
    "com.github.benmanes.caffeine.cache.RemovalListener": {
        "id": "com.github.benmanes.caffeine.cache.RemovalListener",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)"
        ],
        "label": "RemovalListener",
        "text": "RemovalListener",
        "color": "#6D6921",
        "additional": "RemovalListener",
        "position": {
            "x": 0.8986279960947496,
            "y": 3.0522067912497715,
            "z": 1.2488480576028307
        }
    },
    "com.github.benmanes.caffeine.cache.Caffeine": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/memberField/initialCapacity",
            "com.github.benmanes.caffeine.cache.Caffeine/memberField/maximumSize",
            "com.github.benmanes.caffeine.cache.Caffeine/memberField/maximumWeight",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)"
        ],
        "label": "Caffeine",
        "text": "Caffeine",
        "color": "#6D6921",
        "additional": "Caffeine",
        "position": {
            "x": 0.3993369635077033,
            "y": 2.4696300447701276,
            "z": 1.9523462954418165
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)"
        ],
        "label": "CaffeineSpecTest",
        "text": "CaffeineSpecTest",
        "color": "#6D6921",
        "additional": "CaffeineSpecTest",
        "position": {
            "x": -0.6840034617868118,
            "y": 2.8012747474680335,
            "z": 3.370536147601104
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)"
        ],
        "label": "ExpireAfterAccessTest",
        "text": "ExpireAfterAccessTest",
        "color": "#6D6921",
        "additional": "ExpireAfterAccessTest",
        "position": {
            "x": 1.5482048686506986,
            "y": 2.625410063342181,
            "z": 3.638846495628189
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)"
        ],
        "label": "ExpireAfterVarTest",
        "text": "ExpireAfterVarTest",
        "color": "#6D6921",
        "additional": "ExpireAfterVarTest",
        "position": {
            "x": -0.9349554948696936,
            "y": 2.4319104397611877,
            "z": 2.397075175614333
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)"
        ],
        "label": "ExpireAfterWriteTest",
        "text": "ExpireAfterWriteTest",
        "color": "#6D6921",
        "additional": "ExpireAfterWriteTest",
        "position": {
            "x": 1.6968207555815158,
            "y": 2.342836561650804,
            "z": 2.844805769382562
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry": {
        "id": "com.github.benmanes.caffeine.cache.Expiry",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)"
        ],
        "label": "Expiry",
        "text": "Expiry",
        "color": "#6D6921",
        "additional": "Expiry",
        "position": {
            "x": -0.9670747104234352,
            "y": 2.589516503744001,
            "z": 4.4527573096057305
        }
    },
    "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator": {
        "id": "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/timeZone",
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/directory",
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/featureByIndex",
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)"
        ],
        "label": "LocalCacheFactoryGenerator",
        "text": "LocalCacheFactoryGenerator",
        "color": "#6D6921",
        "additional": "LocalCacheFactoryGenerator",
        "position": {
            "x": -0.8173939043324752,
            "y": 2.3106355585256986,
            "z": 0.6741220066582269
        }
    },
    "com.github.benmanes.caffeine.cache.NodeFactoryGenerator": {
        "id": "com.github.benmanes.caffeine.cache.NodeFactoryGenerator",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/timeZone",
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/directory",
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/featureByIndex",
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)"
        ],
        "label": "NodeFactoryGenerator",
        "text": "NodeFactoryGenerator",
        "color": "#6D6921",
        "additional": "NodeFactoryGenerator",
        "position": {
            "x": -0.8027369611677158,
            "y": 2.1197140852225624,
            "z": 0.7538591089171327
        }
    },
    "com.github.benmanes.caffeine.cache.Pacer": {
        "id": "com.github.benmanes.caffeine.cache.Pacer",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)"
        ],
        "label": "Pacer",
        "text": "Pacer",
        "color": "#6D6921",
        "additional": "Pacer",
        "position": {
            "x": -0.12085917532773349,
            "y": 4.174807251467843,
            "z": 1.4348873373631514
        }
    },
    "com.github.benmanes.caffeine.cache.Scheduler": {
        "id": "com.github.benmanes.caffeine.cache.Scheduler",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)"
        ],
        "label": "Scheduler",
        "text": "Scheduler",
        "color": "#6D6921",
        "additional": "Scheduler",
        "position": {
            "x": 0.0479330387577237,
            "y": 4.441262208224494,
            "z": 1.591476599370085
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)"
        ],
        "label": "VarExpiration",
        "text": "VarExpiration",
        "color": "#6D6921",
        "additional": "VarExpiration",
        "position": {
            "x": -0.646163239500489,
            "y": 3.3985826270513284,
            "z": 3.461444457805142
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)"
        ],
        "label": "QueueSanityTest",
        "text": "QueueSanityTest",
        "color": "#6D6921",
        "additional": "QueueSanityTest",
        "position": {
            "x": 0.9848520319598033,
            "y": 2.2167946518749844,
            "z": 0.5485220552417177
        }
    },
    "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest": {
        "id": "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)"
        ],
        "label": "RefreshAfterWriteTest",
        "text": "RefreshAfterWriteTest",
        "color": "#6D6921",
        "additional": "RefreshAfterWriteTest",
        "position": {
            "x": 0.6825581123825954,
            "y": 0.5696617641015436,
            "z": 2.5989645318216157
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)"
        ],
        "label": "TimerWheelTest",
        "text": "TimerWheelTest",
        "color": "#6D6921",
        "additional": "TimerWheelTest",
        "position": {
            "x": -0.20805350453352878,
            "y": 2.9978122278366097,
            "z": 2.321883525155234
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)"
        ],
        "label": "UnsafeRefArrayAccess",
        "text": "UnsafeRefArrayAccess",
        "color": "#6D6921",
        "additional": "UnsafeRefArrayAccess",
        "position": {
            "x": 0.4290733490800984,
            "y": 3.6862809266606997,
            "z": 0.8805908758450145
        }
    },
    "com.github.benmanes.caffeine.cache.issues.Issue30Test": {
        "id": "com.github.benmanes.caffeine.cache.issues.Issue30Test",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)"
        ],
        "label": "Issue30Test",
        "text": "Issue30Test",
        "color": "#6D6921",
        "additional": "Issue30Test",
        "position": {
            "x": 1.9026737505420321,
            "y": 1.330162289790706,
            "z": 2.8190044562363363
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)"
        ],
        "label": "Synthetic",
        "text": "Synthetic",
        "color": "#6D6921",
        "additional": "Synthetic",
        "position": {
            "x": -0.29067685109605623,
            "y": 3.7364423856937887,
            "z": 4.1482797651028545
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/itemsPerSet",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/hashFunc",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/rnd",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/lastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/cache",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)"
        ],
        "label": "TinyCache",
        "text": "TinyCache",
        "color": "#6D6921",
        "additional": "TinyCache",
        "position": {
            "x": 0.08680184784150313,
            "y": 1.623108693867587,
            "z": 2.8805228682046256
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/itemsPerSet",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/hashFunc",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/rnd",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/lastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)"
        ],
        "label": "TinyCacheSketch",
        "text": "TinyCacheSketch",
        "color": "#6D6921",
        "additional": "TinyCacheSketch",
        "position": {
            "x": 0.029623723310934658,
            "y": 1.5825687168788085,
            "z": 2.7927998202461395
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/itemsPerSet",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/cache",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/hashFunc",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/rnd",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/lastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)"
        ],
        "label": "TinyCacheWithGhostCache",
        "text": "TinyCacheWithGhostCache",
        "color": "#6D6921",
        "additional": "TinyCacheWithGhostCache",
        "position": {
            "x": -0.011027875709140655,
            "y": 1.5703428131706312,
            "z": 2.910803527261407
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)"
        ],
        "label": "TinySetIndexing",
        "text": "TinySetIndexing",
        "color": "#6D6921",
        "additional": "TinySetIndexing",
        "position": {
            "x": -1.8368316096830613,
            "y": 2.5355555161956533,
            "z": 1.3950643891600083
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/hitCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/missCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/loadSuccessCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/loadFailureCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/totalLoadTime",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/evictionCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/evictionWeight",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)"
        ],
        "label": "CacheStats",
        "text": "CacheStats",
        "color": "#6D6921",
        "additional": "CacheStats",
        "position": {
            "x": 0.27228945442805585,
            "y": 1.6062922202706775,
            "z": 1.3120182035009953
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStatsTest": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStatsTest",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)"
        ],
        "label": "CacheStatsTest",
        "text": "CacheStatsTest",
        "color": "#6D6921",
        "additional": "CacheStatsTest",
        "position": {
            "x": 0.3259636349277968,
            "y": 1.707546776677593,
            "z": 1.2770541148707706
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/hitCount",
            "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/missCount",
            "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/evictionCount"
        ],
        "label": "PolicyStats",
        "text": "PolicyStats",
        "color": "#6D6921",
        "additional": "PolicyStats",
        "position": {
            "x": 0.05264024819470681,
            "y": 1.7784427658072894,
            "z": 1.398391401703222
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)"
        ],
        "label": "EventDispatcher",
        "text": "EventDispatcher",
        "color": "#6D6921",
        "additional": "EventDispatcher",
        "position": {
            "x": 0.9680511361854203,
            "y": 3.15069726922216,
            "z": 2.1722284549764934
        }
    },
    "com.github.benmanes.caffeine.testing.DescriptionBuilder": {
        "id": "com.github.benmanes.caffeine.testing.DescriptionBuilder",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)"
        ],
        "label": "DescriptionBuilder",
        "text": "DescriptionBuilder",
        "color": "#6D6921",
        "additional": "DescriptionBuilder",
        "position": {
            "x": 1.3274464351444744,
            "y": 3.0633121480353838,
            "z": 1.078058607177895
        }
    },
    "com.github.benmanes.caffeine.SingleConsumerQueueTest": {
        "id": "com.github.benmanes.caffeine.SingleConsumerQueueTest",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/NUM_PRODUCERS",
            "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/POPULATED_SIZE",
            "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/PRODUCE"
        ],
        "label": "SingleConsumerQueueTest",
        "text": "SingleConsumerQueueTest",
        "color": "#6D6921",
        "additional": "SingleConsumerQueueTest",
        "position": {
            "x": 1.729961853161499,
            "y": 3.6802476437421654,
            "z": 1.721152565370816
        }
    },
    "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest": {
        "id": "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/NUM_PRODUCERS",
            "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/POPULATED_SIZE",
            "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/PRODUCE"
        ],
        "label": "SingleConsumerQueueTest",
        "text": "SingleConsumerQueueTest",
        "color": "#6D6921",
        "additional": "SingleConsumerQueueTest",
        "position": {
            "x": 1.614087322875414,
            "y": 3.875888770601075,
            "z": 1.8118019041165703
        }
    },
    "com.github.benmanes.caffeine.base.UnsafeAccess": {
        "id": "com.github.benmanes.caffeine.base.UnsafeAccess",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/UNSAFE",
            "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/ANDROID",
            "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/OPEN_JDK"
        ],
        "label": "UnsafeAccess",
        "text": "UnsafeAccess",
        "color": "#6D6921",
        "additional": "UnsafeAccess",
        "position": {
            "x": 0.8791510399031965,
            "y": 2.413712300139873,
            "z": 4.218956149963442
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeAccess": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeAccess",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/UNSAFE",
            "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/ANDROID",
            "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/OPEN_JDK"
        ],
        "label": "UnsafeAccess",
        "text": "UnsafeAccess",
        "color": "#6D6921",
        "additional": "UnsafeAccess",
        "position": {
            "x": 0.8905299242259086,
            "y": 2.2111606910121004,
            "z": 4.305509363347811
        }
    },
    "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields": {
        "id": "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/lvalue",
            "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/LVALUE_OFFSET",
            "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/IVALUE_OFFSET",
            "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/ivalue"
        ],
        "label": "RelaxedFields",
        "text": "RelaxedFields",
        "color": "#6D6921",
        "additional": "RelaxedFields",
        "position": {
            "x": -1.3748503427072687,
            "y": 1.4718176364027036,
            "z": 3.4626184714808828
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/lvalue",
            "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/LVALUE_OFFSET",
            "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/IVALUE_OFFSET",
            "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/ivalue"
        ],
        "label": "RelaxedFields",
        "text": "RelaxedFields",
        "color": "#6D6921",
        "additional": "RelaxedFields",
        "position": {
            "x": -1.3569529370975928,
            "y": 1.2979779995312644,
            "z": 3.330993288948857
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpec": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpec",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/initialCapacity",
            "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/maximumSize",
            "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/maximumWeight"
        ],
        "label": "Caffeine",
        "text": "Caffeine",
        "color": "#6D6921",
        "additional": "Caffeine",
        "position": {
            "x": -0.09387824069405304,
            "y": 2.3189099591717017,
            "z": 1.7256342916250609
        }
    },
    "com.github.benmanes.caffeine.cache.ComputeBenchmark": {
        "id": "com.github.benmanes.caffeine.cache.ComputeBenchmark",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/MASK",
            "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/SIZE",
            "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/ITEMS"
        ],
        "label": "ComputeBenchmark",
        "text": "ComputeBenchmark",
        "color": "#6D6921",
        "additional": "ComputeBenchmark",
        "position": {
            "x": 1.3450572198942,
            "y": 3.117033410048311,
            "z": 2.91894913214073
        }
    },
    "com.github.benmanes.caffeine.profiler.CacheProfiler": {
        "id": "com.github.benmanes.caffeine.profiler.CacheProfiler",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/MASK",
            "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/SIZE",
            "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/ITEMS"
        ],
        "label": "ComputeBenchmark",
        "text": "ComputeBenchmark",
        "color": "#6D6921",
        "additional": "ComputeBenchmark",
        "position": {
            "x": 1.3446252137103047,
            "y": 3.3134279886465956,
            "z": 3.007084084798117
        }
    },
    "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark": {
        "id": "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ITEMS",
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ints",
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/MASK",
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/SIZE"
        ],
        "label": "FrequencySketchBenchmark",
        "text": "FrequencySketchBenchmark",
        "color": "#6D6921",
        "additional": "FrequencySketchBenchmark",
        "position": {
            "x": -0.5406603889198527,
            "y": 2.1207693654099433,
            "z": 3.907226296554926
        }
    },
    "com.github.benmanes.caffeine.cache.GetPutBenchmark": {
        "id": "com.github.benmanes.caffeine.cache.GetPutBenchmark",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ITEMS",
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ints",
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/MASK",
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/SIZE",
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/cacheType",
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/cache"
        ],
        "label": "FrequencySketchBenchmark",
        "text": "FrequencySketchBenchmark",
        "color": "#6D6921",
        "additional": "FrequencySketchBenchmark",
        "position": {
            "x": -0.7271030847128768,
            "y": 2.0485435411662536,
            "z": 3.879891108271391
        }
    },
    "com.github.benmanes.caffeine.cache.PutRemoveBenchmark": {
        "id": "com.github.benmanes.caffeine.cache.PutRemoveBenchmark",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ITEMS",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ints",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/MASK",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/SIZE",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/cacheType",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/cache"
        ],
        "label": "FrequencySketchBenchmark",
        "text": "FrequencySketchBenchmark",
        "color": "#6D6921",
        "additional": "FrequencySketchBenchmark",
        "position": {
            "x": -0.7332870069948176,
            "y": 2.203211200214684,
            "z": 3.833560898500344
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInFilter",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInMain",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/key"
        ],
        "label": "Node",
        "text": "Node",
        "color": "#6D6921",
        "additional": "Node",
        "position": {
            "x": -1.5404721234491767,
            "y": 2.908230828433022,
            "z": 1.5310349447739002
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInFilter",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInMain",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/key"
        ],
        "label": "Node",
        "text": "Node",
        "color": "#6D6921",
        "additional": "Node",
        "position": {
            "x": -1.4904305507238427,
            "y": 2.7809630030303794,
            "z": 1.5070805245252166
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInFilter",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInMain",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/key"
        ],
        "label": "Node",
        "text": "Node",
        "color": "#6D6921",
        "additional": "Node",
        "position": {
            "x": -1.41615665991654,
            "y": 2.869743316458843,
            "z": 1.4462484007423153
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "drain_blocksOrderedMap",
        "text": "drain_blocksOrderedMap",
        "color": "#CBCBAE",
        "additional": "drain_blocksOrderedMap",
        "position": {
            "x": 0.5618749014323634,
            "y": 2.0407314800731786,
            "z": 2.3950345267852065
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "maximumSize_increase_max",
        "text": "maximumSize_increase_max",
        "color": "#CBCBAE",
        "additional": "maximumSize_increase_max",
        "position": {
            "x": 0.6006048481618036,
            "y": 2.077016536552964,
            "z": 2.3255778499875257
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "evict",
        "text": "evict",
        "color": "#CBCBAE",
        "additional": "evict",
        "position": {
            "x": 0.639970507643274,
            "y": 2.0729708552894315,
            "z": 2.391388434580791
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "maximumSize_decrease_min",
        "text": "maximumSize_decrease_min",
        "color": "#CBCBAE",
        "additional": "maximumSize_decrease_min",
        "position": {
            "x": 0.6354983738837046,
            "y": 2.034440643470319,
            "z": 2.3588476955892217
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "weightOf_absent",
        "text": "weightOf_absent",
        "color": "#CBCBAE",
        "additional": "weightOf_absent",
        "position": {
            "x": 0.6948002339924577,
            "y": 2.0953180507555187,
            "z": 2.365777352950979
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "maximumSize_decrease",
        "text": "maximumSize_decrease",
        "color": "#CBCBAE",
        "additional": "maximumSize_decrease",
        "position": {
            "x": 0.6856901803425091,
            "y": 2.1009315990735313,
            "z": 2.3143582229279143
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "maximumSize_increase",
        "text": "maximumSize_increase",
        "color": "#CBCBAE",
        "additional": "maximumSize_increase",
        "position": {
            "x": 0.6327751324312025,
            "y": 2.0415784250878657,
            "z": 2.3169405619490204
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "weightedSize",
        "text": "weightedSize",
        "color": "#CBCBAE",
        "additional": "weightedSize",
        "position": {
            "x": 0.6370375677632771,
            "y": 2.107005014298248,
            "z": 2.3360381171987554
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "coldest_snapshot",
        "text": "coldest_snapshot",
        "color": "#CBCBAE",
        "additional": "coldest_snapshot",
        "position": {
            "x": 0.7507157684920052,
            "y": 2.0581239883711464,
            "z": 2.38675096954299
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "hottest_snapshot",
        "text": "hottest_snapshot",
        "color": "#CBCBAE",
        "additional": "hottest_snapshot",
        "position": {
            "x": 0.6974879974520145,
            "y": 2.059578983885262,
            "z": 2.405834855547276
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "weightOf",
        "text": "weightOf",
        "color": "#CBCBAE",
        "additional": "weightOf",
        "position": {
            "x": 0.7484223775902681,
            "y": 2.0876050838257214,
            "z": 2.347650432620102
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "maximumSize_decrease_negative",
        "text": "maximumSize_decrease_negative",
        "color": "#CBCBAE",
        "additional": "maximumSize_decrease_negative",
        "position": {
            "x": 0.7032962050953864,
            "y": 2.034982802141985,
            "z": 2.351162889587097
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect"
        ],
        "label": "checkReorder",
        "text": "checkReorder",
        "color": "#CBCBAE",
        "additional": "checkReorder",
        "position": {
            "x": -1.086878879128072,
            "y": 2.436988198649992,
            "z": 2.90076464065489
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect"
        ],
        "label": "checkEvict",
        "text": "checkEvict",
        "color": "#CBCBAE",
        "additional": "checkEvict",
        "position": {
            "x": -1.0954383311472118,
            "y": 2.394338977681681,
            "z": 2.894140719218787
        }
    },
    "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)": {
        "id": "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key",
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key",
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value",
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value",
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause",
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause"
        ],
        "label": "delete",
        "text": "delete",
        "color": "#CBCBAE",
        "additional": "delete",
        "position": {
            "x": 0.7755828574576711,
            "y": 2.9063621344682216,
            "z": 1.2554144140911099
        }
    },
    "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)": {
        "id": "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key",
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key",
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value",
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value",
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause",
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause"
        ],
        "label": "onRemoval",
        "text": "onRemoval",
        "color": "#CBCBAE",
        "additional": "onRemoval",
        "position": {
            "x": 0.8247841330908785,
            "y": 2.9590284939213087,
            "z": 1.2057255607202597
        }
    },
    "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args"
        ],
        "label": "requireArgument",
        "text": "requireArgument",
        "color": "#CBCBAE",
        "additional": "requireArgument",
        "position": {
            "x": 0.790228976346659,
            "y": 2.5836593008539968,
            "z": 2.112608640275033
        }
    },
    "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args"
        ],
        "label": "requireState",
        "text": "requireState",
        "color": "#CBCBAE",
        "additional": "requireState",
        "position": {
            "x": 0.7742679310104346,
            "y": 2.62418178218732,
            "z": 2.1298923367524702
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "checkInitialCapacity",
        "text": "checkInitialCapacity",
        "color": "#CBCBAE",
        "additional": "checkInitialCapacity",
        "position": {
            "x": -0.713487040305901,
            "y": 3.124439812481601,
            "z": 3.4029866342732737
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "checkExpireAfterAccess",
        "text": "checkExpireAfterAccess",
        "color": "#CBCBAE",
        "additional": "checkExpireAfterAccess",
        "position": {
            "x": -0.6720308860000146,
            "y": 3.0760224075747638,
            "z": 3.4481296369574315
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "checkExpireAfterWrite",
        "text": "checkExpireAfterWrite",
        "color": "#CBCBAE",
        "additional": "checkExpireAfterWrite",
        "position": {
            "x": -0.6456574980095486,
            "y": 3.1062977256985826,
            "z": 3.4220307076709022
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "checkMaximumWeight",
        "text": "checkMaximumWeight",
        "color": "#CBCBAE",
        "additional": "checkMaximumWeight",
        "position": {
            "x": -0.6881519139624097,
            "y": 3.0832893829500096,
            "z": 3.365614299416767
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "checkMaximumSize",
        "text": "checkMaximumSize",
        "color": "#CBCBAE",
        "additional": "checkMaximumSize",
        "position": {
            "x": -0.6977274074704174,
            "y": 3.1406042634794926,
            "z": 3.346322500963155
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "checkWeakKeys",
        "text": "checkWeakKeys",
        "color": "#CBCBAE",
        "additional": "checkWeakKeys",
        "position": {
            "x": -0.6899824238417851,
            "y": 3.180221125554374,
            "z": 3.39090939257928
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "checkRefreshAfterWrite",
        "text": "checkRefreshAfterWrite",
        "color": "#CBCBAE",
        "additional": "checkRefreshAfterWrite",
        "position": {
            "x": -0.6712711185051308,
            "y": 3.0427058275641943,
            "z": 3.4142617792813073
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder"
        ],
        "label": "checkValueStrength",
        "text": "checkValueStrength",
        "color": "#CBCBAE",
        "additional": "checkValueStrength",
        "position": {
            "x": -0.7116296774649542,
            "y": 3.200896526989775,
            "z": 3.3525893093700643
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString"
        ],
        "label": "runTest",
        "text": "runTest",
        "color": "#CBCBAE",
        "additional": "runTest",
        "position": {
            "x": -0.6757114847440413,
            "y": 1.886719477272002,
            "z": 3.2839444693844406
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString"
        ],
        "label": "toSpec",
        "text": "toSpec",
        "color": "#CBCBAE",
        "additional": "toSpec",
        "position": {
            "x": -0.6872058095982614,
            "y": 1.88349369902522,
            "z": 3.3149208010938134
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "replaceConditionally_changeWeight",
        "text": "replaceConditionally_changeWeight",
        "color": "#CBCBAE",
        "additional": "replaceConditionally_changeWeight",
        "position": {
            "x": -0.12318421514291478,
            "y": 3.6207457736631783,
            "z": 2.0360748584801245
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "removeConditionally",
        "text": "removeConditionally",
        "color": "#CBCBAE",
        "additional": "removeConditionally",
        "position": {
            "x": -0.08798142081031757,
            "y": 3.5537578117015305,
            "z": 2.0180277190970655
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "put_sameWeight",
        "text": "put_sameWeight",
        "color": "#CBCBAE",
        "additional": "put_sameWeight",
        "position": {
            "x": -0.09133736956483096,
            "y": 3.628587271549239,
            "z": 1.9671066111679547
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "replace_changeWeight",
        "text": "replace_changeWeight",
        "color": "#CBCBAE",
        "additional": "replace_changeWeight",
        "position": {
            "x": -0.12762209267342417,
            "y": 3.593061766740017,
            "z": 1.9864903853190214
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "replaceConditionally_fails",
        "text": "replaceConditionally_fails",
        "color": "#CBCBAE",
        "additional": "replaceConditionally_fails",
        "position": {
            "x": -0.15621633198940055,
            "y": 3.567821150066433,
            "z": 2.021399978246751
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "invalidateAll",
        "text": "invalidateAll",
        "color": "#CBCBAE",
        "additional": "invalidateAll",
        "position": {
            "x": -0.0798227945728589,
            "y": 3.6583867382823487,
            "z": 2.0102065156310105
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "replace_sameWeight",
        "text": "replace_sameWeight",
        "color": "#CBCBAE",
        "additional": "replace_sameWeight",
        "position": {
            "x": -0.08573793512722183,
            "y": 3.564437909607492,
            "z": 2.0564454154094918
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "remove",
        "text": "remove",
        "color": "#CBCBAE",
        "additional": "remove",
        "position": {
            "x": -0.03404538390128797,
            "y": 3.6117803325889017,
            "z": 1.9868752261652216
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "replaceConditionally_sameWeight",
        "text": "replaceConditionally_sameWeight",
        "color": "#CBCBAE",
        "additional": "replaceConditionally_sameWeight",
        "position": {
            "x": -0.05338125815579753,
            "y": 3.66996752287166,
            "z": 1.9569946382483092
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "put_changeWeight",
        "text": "put_changeWeight",
        "color": "#CBCBAE",
        "additional": "put_changeWeight",
        "position": {
            "x": -0.13787285956547546,
            "y": 3.5493071257224345,
            "z": 2.0552251578040996
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "removeConditionally_fails",
        "text": "removeConditionally_fails",
        "color": "#CBCBAE",
        "additional": "removeConditionally_fails",
        "position": {
            "x": -0.02449654647307753,
            "y": 3.6654241664727274,
            "z": 1.991646576861379
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "put",
        "text": "put",
        "color": "#CBCBAE",
        "additional": "put",
        "position": {
            "x": -0.03661537188042052,
            "y": 3.5854675752652425,
            "z": 2.0277623783210297
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "put_asyncWeight",
        "text": "put_asyncWeight",
        "color": "#CBCBAE",
        "additional": "put_asyncWeight",
        "position": {
            "x": 0.3477281000235055,
            "y": 2.6832456068260346,
            "z": 1.717499233160885
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "evict_zero_async",
        "text": "evict_zero_async",
        "color": "#CBCBAE",
        "additional": "evict_zero_async",
        "position": {
            "x": 0.3256621719374597,
            "y": 2.7154386057651285,
            "z": 1.7079616933952082
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess"
        ],
        "label": "setExpiresAfter_duration",
        "text": "setExpiresAfter_duration",
        "color": "#CBCBAE",
        "additional": "setExpiresAfter_duration",
        "position": {
            "x": 1.634759242956659,
            "y": 2.699674293142042,
            "z": 3.6374405473469755
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess"
        ],
        "label": "oldest_snapshot",
        "text": "oldest_snapshot",
        "color": "#CBCBAE",
        "additional": "oldest_snapshot",
        "position": {
            "x": 1.5750325223733301,
            "y": 2.7105326774125804,
            "z": 3.586532881264919
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess"
        ],
        "label": "setExpiresAfter",
        "text": "setExpiresAfter",
        "color": "#CBCBAE",
        "additional": "setExpiresAfter",
        "position": {
            "x": 1.5865146023399062,
            "y": 2.7079685872833092,
            "z": 3.5491064327597934
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess"
        ],
        "label": "youngest_snapshot",
        "text": "youngest_snapshot",
        "color": "#CBCBAE",
        "additional": "youngest_snapshot",
        "position": {
            "x": 1.628840178848042,
            "y": 2.7005771787175665,
            "z": 3.5954626375777834
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "putIfAbsent_nullKey",
        "text": "putIfAbsent_nullKey",
        "color": "#CBCBAE",
        "additional": "putIfAbsent_nullKey",
        "position": {
            "x": -0.8602704612260967,
            "y": 2.5647193516367173,
            "z": 2.528265284274725
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "getExpiresAfter",
        "text": "getExpiresAfter",
        "color": "#CBCBAE",
        "additional": "getExpiresAfter",
        "position": {
            "x": -0.8898554497141846,
            "y": 2.524671023889648,
            "z": 2.5551183375855313
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "putIfAbsent_nullValue",
        "text": "putIfAbsent_nullValue",
        "color": "#CBCBAE",
        "additional": "putIfAbsent_nullValue",
        "position": {
            "x": -0.8352388240228035,
            "y": 2.523991473703033,
            "z": 2.5674102081185457
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "put_replace",
        "text": "put_replace",
        "color": "#CBCBAE",
        "additional": "put_replace",
        "position": {
            "x": -0.8057775305747206,
            "y": 2.5723695865474405,
            "z": 2.5630578517630997
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "setExpiresAfter",
        "text": "setExpiresAfter",
        "color": "#CBCBAE",
        "additional": "setExpiresAfter",
        "position": {
            "x": -0.860318535811339,
            "y": 2.4916827502021763,
            "z": 2.508053565374964
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "getExpiresAfter_duration",
        "text": "getExpiresAfter_duration",
        "color": "#CBCBAE",
        "additional": "getExpiresAfter_duration",
        "position": {
            "x": -0.9054816916920929,
            "y": 2.576320706943965,
            "z": 2.492204990964232
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "put_negativeDuration",
        "text": "put_negativeDuration",
        "color": "#CBCBAE",
        "additional": "put_negativeDuration",
        "position": {
            "x": -0.9561274896314271,
            "y": 2.530326390732885,
            "z": 2.501232187153925
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "putIfAbsent_negativeDuration",
        "text": "putIfAbsent_negativeDuration",
        "color": "#CBCBAE",
        "additional": "putIfAbsent_negativeDuration",
        "position": {
            "x": -0.9215682713060491,
            "y": 2.5049234740670303,
            "z": 2.5295764311644393
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "oldest_snapshot",
        "text": "oldest_snapshot",
        "color": "#CBCBAE",
        "additional": "oldest_snapshot",
        "position": {
            "x": -0.816061793515577,
            "y": 2.602255578706524,
            "z": 2.5062890293342366
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "putIfAbsent_nullTimeUnit",
        "text": "putIfAbsent_nullTimeUnit",
        "color": "#CBCBAE",
        "additional": "putIfAbsent_nullTimeUnit",
        "position": {
            "x": -0.8451247288726369,
            "y": 2.4767089775270295,
            "z": 2.4609338294141674
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "put_nullDuration",
        "text": "put_nullDuration",
        "color": "#CBCBAE",
        "additional": "put_nullDuration",
        "position": {
            "x": -0.8857436655415432,
            "y": 2.560821010374187,
            "z": 2.454040317078926
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "putIfAbsent_insert",
        "text": "putIfAbsent_insert",
        "color": "#CBCBAE",
        "additional": "putIfAbsent_insert",
        "position": {
            "x": -0.9415695752692279,
            "y": 2.556884515893888,
            "z": 2.448495780838824
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "putIfAbsent_present",
        "text": "putIfAbsent_present",
        "color": "#CBCBAE",
        "additional": "putIfAbsent_present",
        "position": {
            "x": -0.9321430665689114,
            "y": 2.4836496091509934,
            "z": 2.4749615103904823
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "youngest_snapshot",
        "text": "youngest_snapshot",
        "color": "#CBCBAE",
        "additional": "youngest_snapshot",
        "position": {
            "x": -0.770975242227723,
            "y": 2.5984920552012465,
            "z": 2.515082728569423
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "put_nullValue",
        "text": "put_nullValue",
        "color": "#CBCBAE",
        "additional": "put_nullValue",
        "position": {
            "x": -0.803772255096022,
            "y": 2.514878901025844,
            "z": 2.4732368666591382
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "put_insert",
        "text": "put_insert",
        "color": "#CBCBAE",
        "additional": "put_insert",
        "position": {
            "x": -0.8938959457932809,
            "y": 2.4888744704119636,
            "z": 2.446584872535322
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "setExpiresAfter_duration",
        "text": "setExpiresAfter_duration",
        "color": "#CBCBAE",
        "additional": "setExpiresAfter_duration",
        "position": {
            "x": -0.8483870627014869,
            "y": 2.595546907236362,
            "z": 2.476375765880408
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "put_nullTimeUnit",
        "text": "put_nullTimeUnit",
        "color": "#CBCBAE",
        "additional": "put_nullTimeUnit",
        "position": {
            "x": -0.8021841942086589,
            "y": 2.491201557730561,
            "z": 2.5121456600147867
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "putIfAbsent_nullDuration",
        "text": "putIfAbsent_nullDuration",
        "color": "#CBCBAE",
        "additional": "putIfAbsent_nullDuration",
        "position": {
            "x": -0.7670190950539244,
            "y": 2.5396027265565,
            "z": 2.5471574596661624
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "put_nullKey",
        "text": "put_nullKey",
        "color": "#CBCBAE",
        "additional": "put_nullKey",
        "position": {
            "x": -0.7550155499058484,
            "y": 2.529096550343961,
            "z": 2.502785818077869
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably"
        ],
        "label": "put_insert_replaceExpired_expiryFails",
        "text": "put_insert_replaceExpired_expiryFails",
        "color": "#CBCBAE",
        "additional": "put_insert_replaceExpired_expiryFails",
        "position": {
            "x": -1.1077904600292525,
            "y": 2.1886220432765056,
            "z": 2.1005946822999926
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably"
        ],
        "label": "put_update_expiryFails",
        "text": "put_update_expiryFails",
        "color": "#CBCBAE",
        "additional": "put_update_expiryFails",
        "position": {
            "x": -1.135693558388261,
            "y": 2.2211383166369325,
            "z": 2.1043991776404454
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite"
        ],
        "label": "youngest_snapshot",
        "text": "youngest_snapshot",
        "color": "#CBCBAE",
        "additional": "youngest_snapshot",
        "position": {
            "x": 1.7207549092599215,
            "y": 2.3223872585366596,
            "z": 2.763701951640895
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite"
        ],
        "label": "oldest_snapshot",
        "text": "oldest_snapshot",
        "color": "#CBCBAE",
        "additional": "oldest_snapshot",
        "position": {
            "x": 1.7791811039623595,
            "y": 2.317865330292736,
            "z": 2.7945309820679882
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite"
        ],
        "label": "setExpiresAfter_duration",
        "text": "setExpiresAfter_duration",
        "color": "#CBCBAE",
        "additional": "setExpiresAfter_duration",
        "position": {
            "x": 1.758503886835852,
            "y": 2.3452376994720865,
            "z": 2.7540962711716546
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite"
        ],
        "label": "setExpiresAfter",
        "text": "setExpiresAfter",
        "color": "#CBCBAE",
        "additional": "setExpiresAfter",
        "position": {
            "x": 1.7038181198068436,
            "y": 2.342119513082158,
            "z": 2.7231177426024633
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration"
        ],
        "label": "expireAfterUpdate",
        "text": "expireAfterUpdate",
        "color": "#CBCBAE",
        "additional": "expireAfterUpdate",
        "position": {
            "x": -1.054512288088559,
            "y": 2.601447139597853,
            "z": 4.445117323871488
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentTime"
        ],
        "label": "expireAfterCreate",
        "text": "expireAfterCreate",
        "color": "#CBCBAE",
        "additional": "expireAfterCreate",
        "position": {
            "x": -1.0444916790152523,
            "y": 2.537505647201679,
            "z": 4.37507783247392
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/currentTime"
        ],
        "label": "expireAfterRead",
        "text": "expireAfterRead",
        "color": "#CBCBAE",
        "additional": "expireAfterRead",
        "position": {
            "x": -1.0697625797309616,
            "y": 2.5822955116974824,
            "z": 4.408101101334408
        }
    },
    "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)": {
        "id": "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className",
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className",
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal",
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal",
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features",
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features"
        ],
        "label": "makeLocalCacheSpec",
        "text": "makeLocalCacheSpec",
        "color": "#CBCBAE",
        "additional": "makeLocalCacheSpec",
        "position": {
            "x": -0.7223609966824451,
            "y": 2.156898642598985,
            "z": 0.568171533503555
        }
    },
    "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)": {
        "id": "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className",
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className",
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal",
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal",
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features",
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features"
        ],
        "label": "makeNodeSpec",
        "text": "makeNodeSpec",
        "color": "#CBCBAE",
        "additional": "makeNodeSpec",
        "position": {
            "x": -0.7038141418939385,
            "y": 2.078145527123044,
            "z": 0.620497780324368
        }
    },
    "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)": {
        "id": "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/executor",
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/executor",
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/command",
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/command",
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/delay",
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/delay"
        ],
        "label": "schedule",
        "text": "schedule",
        "color": "#CBCBAE",
        "additional": "schedule",
        "position": {
            "x": -0.036812380818239454,
            "y": 4.24373318172994,
            "z": 1.4794309042847391
        }
    },
    "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)": {
        "id": "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/executor",
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/executor",
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/command",
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/command",
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/delay",
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/delay"
        ],
        "label": "schedule",
        "text": "schedule",
        "color": "#CBCBAE",
        "additional": "schedule",
        "position": {
            "x": 0.022017306923296953,
            "y": 4.352810939159456,
            "z": 1.5102516107620165
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit"
        ],
        "label": "setExpiresAfter",
        "text": "setExpiresAfter",
        "color": "#CBCBAE",
        "additional": "setExpiresAfter",
        "position": {
            "x": -0.21812102710306824,
            "y": 3.3603059688469883,
            "z": 3.650480419391231
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit"
        ],
        "label": "putIfAbsent",
        "text": "putIfAbsent",
        "color": "#CBCBAE",
        "additional": "putIfAbsent",
        "position": {
            "x": -0.2392198918644144,
            "y": 3.358121291954595,
            "z": 3.700932710899953
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit"
        ],
        "label": "put",
        "text": "put",
        "color": "#CBCBAE",
        "additional": "put",
        "position": {
            "x": -0.22715986243266184,
            "y": 3.310578220789124,
            "z": 3.677969995099555
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/duration"
        ],
        "label": "put",
        "text": "put",
        "color": "#CBCBAE",
        "additional": "put",
        "position": {
            "x": -1.3128887120912318,
            "y": 3.306662119385748,
            "z": 3.091358016188565
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/duration"
        ],
        "label": "putIfAbsent",
        "text": "putIfAbsent",
        "color": "#CBCBAE",
        "additional": "putIfAbsent",
        "position": {
            "x": -1.3216516038977921,
            "y": 3.3480581379881014,
            "z": 3.102594008998978
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q"
        ],
        "label": "makeAtomic",
        "text": "makeAtomic",
        "color": "#CBCBAE",
        "additional": "makeAtomic",
        "position": {
            "x": 1.0481007192469352,
            "y": 2.113690800877449,
            "z": 0.5985110369022715
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q"
        ],
        "label": "makeQueue",
        "text": "makeQueue",
        "color": "#CBCBAE",
        "additional": "makeQueue",
        "position": {
            "x": 1.0238443914967421,
            "y": 2.1446808776656665,
            "z": 0.6174465833910484
        }
    },
    "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)": {
        "id": "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite"
        ],
        "label": "youngest_snapshot",
        "text": "youngest_snapshot",
        "color": "#CBCBAE",
        "additional": "youngest_snapshot",
        "position": {
            "x": 0.7816641075820718,
            "y": 0.6083734816839046,
            "z": 2.621133193867407
        }
    },
    "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)": {
        "id": "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite"
        ],
        "label": "oldest_snapshot",
        "text": "oldest_snapshot",
        "color": "#CBCBAE",
        "additional": "oldest_snapshot",
        "position": {
            "x": 0.77182188895326,
            "y": 0.5413516233354436,
            "z": 2.631787208042035
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/clock",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/clock",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/duration",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/duration",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/times",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/times"
        ],
        "label": "getExpirationDelay_fuzzy",
        "text": "getExpirationDelay_fuzzy",
        "color": "#CBCBAE",
        "additional": "getExpirationDelay_fuzzy",
        "position": {
            "x": 0.0183521894782408,
            "y": 2.7616032701117477,
            "z": 2.8740849925012593
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/clock",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/clock",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/duration",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/duration",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/times",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/times"
        ],
        "label": "schedule_fuzzy",
        "text": "schedule_fuzzy",
        "color": "#CBCBAE",
        "additional": "schedule_fuzzy",
        "position": {
            "x": 0.017437496434536737,
            "y": 2.7183097423660456,
            "z": 2.8618897538887422
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer"
        ],
        "label": "snapshot",
        "text": "snapshot",
        "color": "#CBCBAE",
        "additional": "snapshot",
        "position": {
            "x": -0.4553830474879035,
            "y": 3.254072728082155,
            "z": 1.7691464391932843
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer"
        ],
        "label": "snapshot",
        "text": "snapshot",
        "color": "#CBCBAE",
        "additional": "snapshot",
        "position": {
            "x": -0.4291740414475045,
            "y": 3.283602755871976,
            "z": 1.7668645126218634
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/buffer",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/buffer",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/offset",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/offset",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/e",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/e"
        ],
        "label": "soElement",
        "text": "soElement",
        "color": "#CBCBAE",
        "additional": "soElement",
        "position": {
            "x": 0.46796053731779086,
            "y": 3.5874526762244274,
            "z": 0.8081399797781044
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/buffer",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/buffer",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/offset",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/offset",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/e",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/e"
        ],
        "label": "spElement",
        "text": "spElement",
        "color": "#CBCBAE",
        "additional": "spElement",
        "position": {
            "x": 0.4458592796538139,
            "y": 3.6372150887044206,
            "z": 0.8055779056684899
        }
    },
    "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)": {
        "id": "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad"
        ],
        "label": "expiration",
        "text": "expiration",
        "color": "#CBCBAE",
        "additional": "expiration",
        "position": {
            "x": 1.9643522810798855,
            "y": 1.398716372977855,
            "z": 2.8851838780162384
        }
    },
    "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)": {
        "id": "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad"
        ],
        "label": "initialValues",
        "text": "initialValues",
        "color": "#CBCBAE",
        "additional": "initialValues",
        "position": {
            "x": 1.907798640220701,
            "y": 1.4368036719706319,
            "z": 2.869653494581193
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/lowerBound",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/lowerBound",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/upperBound",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/upperBound",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/events",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/events"
        ],
        "label": "hotspot",
        "text": "hotspot",
        "color": "#CBCBAE",
        "additional": "hotspot",
        "position": {
            "x": -0.045931211889119083,
            "y": 3.6066359530873564,
            "z": 4.236393906676886
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/lowerBound",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/lowerBound",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/upperBound",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/upperBound",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/events",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/events"
        ],
        "label": "uniform",
        "text": "uniform",
        "color": "#CBCBAE",
        "additional": "uniform",
        "position": {
            "x": -0.051266650414721004,
            "y": 3.5678028882399975,
            "z": 4.212513292366912
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/items",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/items",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/constant",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/constant",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/events",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/events"
        ],
        "label": "zipfian",
        "text": "zipfian",
        "color": "#CBCBAE",
        "additional": "zipfian",
        "position": {
            "x": -0.5395660704983762,
            "y": 3.8656729340765312,
            "z": 4.07141257468314
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/items",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/items",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/constant",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/constant",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/events",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/events"
        ],
        "label": "scrambledZipfian",
        "text": "scrambledZipfian",
        "color": "#CBCBAE",
        "additional": "scrambledZipfian",
        "position": {
            "x": -0.5197823237581525,
            "y": 3.9135136160449058,
            "z": 4.064798238934707
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset"
        ],
        "label": "replace",
        "text": "replace",
        "color": "#CBCBAE",
        "additional": "replace",
        "position": {
            "x": -0.14260721988470593,
            "y": 1.2053819380151831,
            "z": 1.906828746742717
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset"
        ],
        "label": "replace",
        "text": "replace",
        "color": "#CBCBAE",
        "additional": "replace",
        "position": {
            "x": -0.1771708179284881,
            "y": 1.233315206622605,
            "z": 1.8958417999074104
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset"
        ],
        "label": "replace",
        "text": "replace",
        "color": "#CBCBAE",
        "additional": "replace",
        "position": {
            "x": -0.18880642628472155,
            "y": 1.1867047083214826,
            "z": 1.92019088301473
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/delta",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta"
        ],
        "label": "replaceItems",
        "text": "replaceItems",
        "color": "#CBCBAE",
        "additional": "replaceItems",
        "position": {
            "x": 0.031849695378813436,
            "y": 1.7969788399210957,
            "z": 3.685752356186865
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/delta",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta"
        ],
        "label": "replaceItems",
        "text": "replaceItems",
        "color": "#CBCBAE",
        "additional": "replaceItems",
        "position": {
            "x": 0.010126116581639089,
            "y": 1.7864831020075562,
            "z": 3.638701512854797
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/delta"
        ],
        "label": "replaceItems",
        "text": "replaceItems",
        "color": "#CBCBAE",
        "additional": "replaceItems",
        "position": {
            "x": -0.003762529959091987,
            "y": 1.752173126945501,
            "z": 3.687998292245642
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex"
        ],
        "label": "getChainAtOffset",
        "text": "getChainAtOffset",
        "color": "#CBCBAE",
        "additional": "getChainAtOffset",
        "position": {
            "x": -1.87768360948578,
            "y": 2.608696171685144,
            "z": 1.4276796968208016
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex"
        ],
        "label": "getChainStart",
        "text": "getChainStart",
        "color": "#CBCBAE",
        "additional": "getChainStart",
        "position": {
            "x": -1.9149609882840453,
            "y": 2.5770982915522906,
            "z": 1.4106402712476434
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex"
        ],
        "label": "removeItem",
        "text": "removeItem",
        "color": "#CBCBAE",
        "additional": "removeItem",
        "position": {
            "x": -1.9574579707371491,
            "y": 2.6021524338124364,
            "z": 1.4382487471399066
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex"
        ],
        "label": "getChain",
        "text": "getChain",
        "color": "#CBCBAE",
        "additional": "getChain",
        "position": {
            "x": -1.9184407135597885,
            "y": 2.610187877442767,
            "z": 1.4614807249290693
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/hitCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/hitCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/missCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/missCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadSuccessCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadSuccessCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadFailureCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadFailureCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/totalLoadTime",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/totalLoadTime",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionWeight",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionWeight"
        ],
        "label": "of",
        "text": "of",
        "color": "#CBCBAE",
        "additional": "of",
        "position": {
            "x": 0.2968534489009125,
            "y": 1.6743575361737804,
            "z": 1.4295903169560193
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/hitCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/hitCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/missCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/missCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadSuccessCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadSuccessCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadFailureCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadFailureCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/totalLoadTime",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/totalLoadTime",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionWeight",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionWeight"
        ],
        "label": "checkStats",
        "text": "checkStats",
        "color": "#CBCBAE",
        "additional": "checkStats",
        "position": {
            "x": 0.29941777241337153,
            "y": 1.6781152694473143,
            "z": 1.393922743470347
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "publishCreated",
        "text": "publishCreated",
        "color": "#CBCBAE",
        "additional": "publishCreated",
        "position": {
            "x": 1.3974110138010198,
            "y": 3.0411852317560286,
            "z": 2.089333787018746
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "publishRemovedQuietly",
        "text": "publishRemovedQuietly",
        "color": "#CBCBAE",
        "additional": "publishRemovedQuietly",
        "position": {
            "x": 1.3979433731120934,
            "y": 2.9827701910296254,
            "z": 2.1096648075819386
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "publishExpiredQuietly",
        "text": "publishExpiredQuietly",
        "color": "#CBCBAE",
        "additional": "publishExpiredQuietly",
        "position": {
            "x": 1.4442784950699257,
            "y": 3.052383389102913,
            "z": 2.083138479782047
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "publishExpired",
        "text": "publishExpired",
        "color": "#CBCBAE",
        "additional": "publishExpired",
        "position": {
            "x": 1.4430307105536575,
            "y": 2.996417919521139,
            "z": 2.1173655187407254
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "publishRemoved",
        "text": "publishRemoved",
        "color": "#CBCBAE",
        "additional": "publishRemoved",
        "position": {
            "x": 1.4232445042231663,
            "y": 2.9849942964524794,
            "z": 2.070776247272005
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/oldValue",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/oldValue",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/newValue",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/newValue"
        ],
        "label": "publishUpdated",
        "text": "publishUpdated",
        "color": "#CBCBAE",
        "additional": "publishUpdated",
        "position": {
            "x": -0.2684213386020009,
            "y": 3.5171614059071716,
            "z": 2.394468106864884
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/oldValue",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/oldValue",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/newValue",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/newValue"
        ],
        "label": "publish",
        "text": "publish",
        "color": "#CBCBAE",
        "additional": "publish",
        "position": {
            "x": -0.2763215202147915,
            "y": 3.4817377182759826,
            "z": 2.377241237864082
        }
    },
    "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)": {
        "id": "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher"
        ],
        "label": "addError",
        "text": "addError",
        "color": "#CBCBAE",
        "additional": "addError",
        "position": {
            "x": 1.2534035896251576,
            "y": 2.999210756639802,
            "z": 1.041932240259447
        }
    },
    "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)": {
        "id": "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher"
        ],
        "label": "expectThat",
        "text": "expectThat",
        "color": "#CBCBAE",
        "additional": "expectThat",
        "position": {
            "x": 1.2880113185782451,
            "y": 3.016889125042866,
            "z": 0.9898136910270665
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.7235114693766658,
            "y": 2.2495129598686807,
            "z": 2.3632642781076934
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.6513311969950029,
            "y": 2.302136506976332,
            "z": 2.4380878771191377
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.6854596723186606,
            "y": 1.8327423519277974,
            "z": 2.470468864111615
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.6648545284665,
            "y": 1.9277667934008538,
            "z": 2.4937777427529273
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.7986780489936671,
            "y": 2.031670196693299,
            "z": 2.2547406328773856
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.6934460169511687,
            "y": 1.8915147808631867,
            "z": 2.2436218304243547
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.5904276912594062,
            "y": 2.240873603388997,
            "z": 2.428197595996873
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.6114627912901911,
            "y": 1.9237270688658796,
            "z": 2.457297199455623
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.7431574845583442,
            "y": 1.9195203109949492,
            "z": 2.2729789285496285
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.7166313442385048,
            "y": 2.2797136243657854,
            "z": 2.4629944185515074
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.6565686227629328,
            "y": 1.81266810436163,
            "z": 2.367125430793008
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.6461853926893584,
            "y": 1.943472519917088,
            "z": 2.226946928829893
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.615962990810528,
            "y": 2.1942990959550412,
            "z": 2.4676972364598333
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.6288318491200329,
            "y": 1.8537601221570306,
            "z": 2.462943507010335
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.7761941326055855,
            "y": 2.03731311232909,
            "z": 2.203867885207941
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.615902118757695,
            "y": 2.28535751976674,
            "z": 2.3832624472502113
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.6226042264923448,
            "y": 1.879116476226136,
            "z": 2.3744553693749584
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.6515725191455028,
            "y": 2.0139388888980663,
            "z": 2.2040402508768215
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.7604266521149805,
            "y": 2.2215001904453775,
            "z": 2.4295204664105894
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.7094935558131579,
            "y": 1.8509982720351474,
            "z": 2.372909885685675
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.7373047182842898,
            "y": 1.9839171189749074,
            "z": 2.1801685069342556
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.6401235711570439,
            "y": 2.2415654808332213,
            "z": 2.3572189832960335
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.7218249575770685,
            "y": 1.9351604849302668,
            "z": 2.480991692425347
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.7758608574786217,
            "y": 1.92740027433927,
            "z": 2.2199591302383075
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.7004925339460057,
            "y": 2.2099320868239367,
            "z": 2.443184593335629
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.7522046883363069,
            "y": 1.887735907199429,
            "z": 2.408973850716211
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.7031261745008321,
            "y": 1.9277579738217367,
            "z": 2.1941346780355406
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.6513665468299301,
            "y": 2.241886996288587,
            "z": 2.4898955466534316
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.7460286387377018,
            "y": 1.8748785780515875,
            "z": 2.4602577916050308
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.7995989348221073,
            "y": 1.9606129638141063,
            "z": 2.2730381432651394
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.6963577073056753,
            "y": 2.300695580193809,
            "z": 2.386101166280011
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.6043249498954486,
            "y": 1.837930351063318,
            "z": 2.4085155860020677
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.734766648439813,
            "y": 2.0838359988742208,
            "z": 2.225637166252694
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.7014336237454559,
            "y": 2.1813690369774825,
            "z": 2.4958618181014147
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.710151562424238,
            "y": 1.802248477625682,
            "z": 2.4143473938728546
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.6938078647891803,
            "y": 2.0575027062788553,
            "z": 2.186788616912992
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -1.2431279763303182,
            "y": 2.3753528742603005,
            "z": 2.900809722760866
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -1.246673071041466,
            "y": 2.4593879520546844,
            "z": 2.9383654161529194
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys"
        ],
        "label": "keys",
        "text": "keys",
        "color": "#F6E146",
        "additional": "keys",
        "position": {
            "x": -1.2050390932668564,
            "y": 2.4903648348473313,
            "z": 2.981393277478998
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys"
        ],
        "label": "keys",
        "text": "keys",
        "color": "#F6E146",
        "additional": "keys",
        "position": {
            "x": -1.2226916445587275,
            "y": 2.3939440101736,
            "z": 2.9720262779900213
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect"
        ],
        "label": "expect",
        "text": "expect",
        "color": "#F6E146",
        "additional": "expect",
        "position": {
            "x": -1.2234623746861555,
            "y": 2.537047565069758,
            "z": 2.9221443748263414
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect"
        ],
        "label": "expect",
        "text": "expect",
        "color": "#F6E146",
        "additional": "expect",
        "position": {
            "x": -1.251814201613403,
            "y": 2.466567366382414,
            "z": 2.8785111356005038
        }
    },
    "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": 0.7301665997751923,
            "y": 3.027114610264155,
            "z": 1.214453209054522
        }
    },
    "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": 0.7807719837326021,
            "y": 3.055110613120822,
            "z": 1.2695947331914224
        }
    },
    "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": 0.8667595750078276,
            "y": 2.838591730367468,
            "z": 1.2679166396516894
        }
    },
    "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": 0.8679039418311407,
            "y": 2.8472479172410243,
            "z": 1.192674463087331
        }
    },
    "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause": {
        "id": "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause"
        ],
        "label": "cause",
        "text": "cause",
        "color": "#F6E146",
        "additional": "cause",
        "position": {
            "x": 0.7349697860908662,
            "y": 2.909550802073848,
            "z": 1.1580670219847113
        }
    },
    "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause": {
        "id": "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause"
        ],
        "label": "cause",
        "text": "cause",
        "color": "#F6E146",
        "additional": "cause",
        "position": {
            "x": 0.771583781699487,
            "y": 2.8233708423370643,
            "z": 1.1822881316476543
        }
    },
    "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression"
        ],
        "label": "expression",
        "text": "expression",
        "color": "#F6E146",
        "additional": "expression",
        "position": {
            "x": 0.8477015690613219,
            "y": 2.7035007424196817,
            "z": 2.1969237090947815
        }
    },
    "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression"
        ],
        "label": "expression",
        "text": "expression",
        "color": "#F6E146",
        "additional": "expression",
        "position": {
            "x": 0.9009143265988189,
            "y": 2.6312775255837324,
            "z": 2.1719044959443012
        }
    },
    "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template"
        ],
        "label": "template",
        "text": "template",
        "color": "#F6E146",
        "additional": "template",
        "position": {
            "x": 0.9030347483281163,
            "y": 2.6002982192204445,
            "z": 2.09575158785635
        }
    },
    "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template"
        ],
        "label": "template",
        "text": "template",
        "color": "#F6E146",
        "additional": "template",
        "position": {
            "x": 0.8825011204536883,
            "y": 2.695293468448318,
            "z": 2.121994495141523
        }
    },
    "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args"
        ],
        "label": "args",
        "text": "args",
        "color": "#F6E146",
        "additional": "args",
        "position": {
            "x": 0.8863331706551696,
            "y": 2.5492354399248383,
            "z": 2.1836911076599432
        }
    },
    "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args"
        ],
        "label": "args",
        "text": "args",
        "color": "#F6E146",
        "additional": "args",
        "position": {
            "x": 0.8517488264891693,
            "y": 2.6219065158370434,
            "z": 2.2287673599165667
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec"
        ],
        "label": "spec",
        "text": "spec",
        "color": "#F6E146",
        "additional": "spec",
        "position": {
            "x": -0.5291190070525325,
            "y": 3.1544745753916232,
            "z": 3.384672043609105
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec"
        ],
        "label": "spec",
        "text": "spec",
        "color": "#F6E146",
        "additional": "spec",
        "position": {
            "x": -0.5115117525705277,
            "y": 3.114934387654943,
            "z": 3.335698551331451
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.812329598483392,
            "y": 3.1466095667619705,
            "z": 3.326927510224615
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.8198098640648728,
            "y": 3.036196358528522,
            "z": 3.439286271863733
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "builder",
        "text": "builder",
        "color": "#F6E146",
        "additional": "builder",
        "position": {
            "x": -0.6342098446582047,
            "y": 3.205788026468328,
            "z": 3.514558000261448
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "builder",
        "text": "builder",
        "color": "#F6E146",
        "additional": "builder",
        "position": {
            "x": -0.6730358270847832,
            "y": 3.277230751903501,
            "z": 3.518243126250586
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec"
        ],
        "label": "spec",
        "text": "spec",
        "color": "#F6E146",
        "additional": "spec",
        "position": {
            "x": -0.5549282041398711,
            "y": 3.054658574889643,
            "z": 3.3191303719539578
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.8589653715555188,
            "y": 3.1326602577388187,
            "z": 3.3612271911031026
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "builder",
        "text": "builder",
        "color": "#F6E146",
        "additional": "builder",
        "position": {
            "x": -0.7372229655100206,
            "y": 3.2507661630567246,
            "z": 3.532025028963598
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec"
        ],
        "label": "spec",
        "text": "spec",
        "color": "#F6E146",
        "additional": "spec",
        "position": {
            "x": -0.5842417591805735,
            "y": 3.113843874924231,
            "z": 3.3084133403854397
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.8394947186388262,
            "y": 3.122549589494198,
            "z": 3.421373128807688
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "builder",
        "text": "builder",
        "color": "#F6E146",
        "additional": "builder",
        "position": {
            "x": -0.7439170864507834,
            "y": 3.1540828142311894,
            "z": 3.523352755887786
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec"
        ],
        "label": "spec",
        "text": "spec",
        "color": "#F6E146",
        "additional": "spec",
        "position": {
            "x": -0.5972364017870337,
            "y": 3.1599977965888564,
            "z": 3.2629118585107397
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.8647137921874306,
            "y": 3.0459835268065767,
            "z": 3.3853272140807555
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "builder",
        "text": "builder",
        "color": "#F6E146",
        "additional": "builder",
        "position": {
            "x": -0.6863252102744106,
            "y": 3.1698823194843073,
            "z": 3.545923849535436
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec"
        ],
        "label": "spec",
        "text": "spec",
        "color": "#F6E146",
        "additional": "spec",
        "position": {
            "x": -0.5454072007073265,
            "y": 3.228382025758431,
            "z": 3.358106138891172
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.808759947870987,
            "y": 3.0667083516680487,
            "z": 3.30988156938562
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "builder",
        "text": "builder",
        "color": "#F6E146",
        "additional": "builder",
        "position": {
            "x": -0.7733210158179284,
            "y": 3.2343708615487063,
            "z": 3.4827672080671723
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec"
        ],
        "label": "spec",
        "text": "spec",
        "color": "#F6E146",
        "additional": "spec",
        "position": {
            "x": -0.5887520529496018,
            "y": 3.24107680084972,
            "z": 3.3072809592406043
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.7937858924592744,
            "y": 2.9868637107602876,
            "z": 3.3942804806213145
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "builder",
        "text": "builder",
        "color": "#F6E146",
        "additional": "builder",
        "position": {
            "x": -0.650094593351821,
            "y": 3.277722047844442,
            "z": 3.46011944525754
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec"
        ],
        "label": "spec",
        "text": "spec",
        "color": "#F6E146",
        "additional": "spec",
        "position": {
            "x": -0.532333862555326,
            "y": 3.1873507913177175,
            "z": 3.2909164451159105
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.8041331052118041,
            "y": 3.0027053843607594,
            "z": 3.3382420265478157
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder"
        ],
        "label": "builder",
        "text": "builder",
        "color": "#F6E146",
        "additional": "builder",
        "position": {
            "x": -0.7287009387933541,
            "y": 3.2905608998829385,
            "z": 3.453680778510059
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch"
        ],
        "label": "epoch",
        "text": "epoch",
        "color": "#F6E146",
        "additional": "epoch",
        "position": {
            "x": -0.6111869064453919,
            "y": 2.9354681139479717,
            "z": 3.4809713403444795
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch"
        ],
        "label": "epoch",
        "text": "epoch",
        "color": "#F6E146",
        "additional": "epoch",
        "position": {
            "x": -0.594451829544175,
            "y": 3.012051358322587,
            "z": 3.528369711989638
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch"
        ],
        "label": "epoch",
        "text": "epoch",
        "color": "#F6E146",
        "additional": "epoch",
        "position": {
            "x": -0.550777252164681,
            "y": 2.9989848876844767,
            "z": 3.464908413235327
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.6724957396262286,
            "y": 1.714839854014974,
            "z": 3.2273405238418422
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.7380813167193367,
            "y": 1.7112558838347067,
            "z": 3.2620480762478246
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch"
        ],
        "label": "epoch",
        "text": "epoch",
        "color": "#F6E146",
        "additional": "epoch",
        "position": {
            "x": -0.6548471267047153,
            "y": 1.6955843998883209,
            "z": 3.3391225152105872
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch"
        ],
        "label": "epoch",
        "text": "epoch",
        "color": "#F6E146",
        "additional": "epoch",
        "position": {
            "x": -0.6200028087597158,
            "y": 1.7039959992991511,
            "z": 3.275526759284063
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString"
        ],
        "label": "nanosToString",
        "text": "nanosToString",
        "color": "#F6E146",
        "additional": "nanosToString",
        "position": {
            "x": -0.7219682595920358,
            "y": 1.6940936459429092,
            "z": 3.3268091107187696
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString"
        ],
        "label": "nanosToString",
        "text": "nanosToString",
        "color": "#F6E146",
        "additional": "nanosToString",
        "position": {
            "x": -0.6775169318663457,
            "y": 1.6610931948554757,
            "z": 3.2747313511334255
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.07428069124520897,
            "y": 3.753434500383449,
            "z": 2.174121247266108
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.025467431721905243,
            "y": 3.694284585181142,
            "z": 2.1909669006718353
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.01936222881201588,
            "y": 3.4035909524212387,
            "z": 1.9573016868071376
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.04935515273903479,
            "y": 3.5482245704828457,
            "z": 1.8633257919836856
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": -0.2456271125471361,
            "y": 3.6690225219071975,
            "z": 1.9265729062035462
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": -0.27288916770771343,
            "y": 3.7195112334155858,
            "z": 1.988230753182047
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.07177565028230593,
            "y": 3.7903497803143402,
            "z": 2.112901878379621
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.10291510299334217,
            "y": 3.416513988589443,
            "z": 1.8852480882341471
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": -0.17461358098493318,
            "y": 3.7991076905404353,
            "z": 1.9077855915250952
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.11876029760853557,
            "y": 3.731155382367449,
            "z": 2.1365395264622555
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.15013355332349199,
            "y": 3.46350521573234,
            "z": 1.9062770843182986
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": -0.20074495380173096,
            "y": 3.831550092616757,
            "z": 1.963657713130685
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.017990644994478888,
            "y": 3.6218075204562163,
            "z": 2.1377509529740886
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.06754844197030763,
            "y": 3.4715849463061383,
            "z": 1.8508774649914594
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": -0.21551513772893705,
            "y": 3.715056795929126,
            "z": 1.8919942048770073
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.027457327009685617,
            "y": 3.61254454469411,
            "z": 2.17566393519558
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.013211663418905228,
            "y": 3.5180344691036627,
            "z": 1.907499317718649
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": -0.13333919388786275,
            "y": 3.807716181844868,
            "z": 1.9532796625566171
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.03248219247270523,
            "y": 3.691986406174696,
            "z": 2.0949185747615475
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.008062788896787465,
            "y": 3.4706802774040906,
            "z": 1.876219892056663
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": -0.2379644463570738,
            "y": 3.672814147639629,
            "z": 1.985699145186208
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.024637247574142762,
            "y": 3.7119896680251583,
            "z": 2.1467465373142343
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.0054547181552249135,
            "y": 3.4655753347694085,
            "z": 1.9587532391601759
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": -0.1594511199113331,
            "y": 3.7307313107798947,
            "z": 1.8988941873985805
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.008266056281976075,
            "y": 3.771927470894223,
            "z": 2.083170591087176
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.12321024230326039,
            "y": 3.4041127036213545,
            "z": 1.946777481467748
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": -0.21876297328706462,
            "y": 3.7502982145655945,
            "z": 2.0390506337821397
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.015337421343573743,
            "y": 3.7774816780800657,
            "z": 2.1408784425637233
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.04667900504584099,
            "y": 3.3994575687424082,
            "z": 1.9063502833339507
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": -0.2422297993431699,
            "y": 3.7951991776456007,
            "z": 2.0043541903316053
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.10619914389132012,
            "y": 3.675299106408599,
            "z": 2.18048101439189
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.07555573807942939,
            "y": 3.408661539979121,
            "z": 1.9832193839793364
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": -0.16991603005666378,
            "y": 3.8133274437038076,
            "z": 2.012832076744999
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.08195995651216581,
            "y": 3.616057774568451,
            "z": 2.1599352392650557
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.11903185329015531,
            "y": 3.5112779957593125,
            "z": 1.863757608953407
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": -0.24894081136133472,
            "y": 3.7758120816535525,
            "z": 1.932381648314328
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.41017636123676926,
            "y": 2.684057088880869,
            "z": 1.6039470941547669
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.3435994114634884,
            "y": 2.7327926123554804,
            "z": 1.5838190349335257
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.3974530348383487,
            "y": 2.5986742802439973,
            "z": 1.6145769842266458
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.35405072008258376,
            "y": 2.6542073981893513,
            "z": 1.5679182996644203
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.28588139303523796,
            "y": 2.652243327476764,
            "z": 1.5851850076317462
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.33377024668780475,
            "y": 2.5803790703157223,
            "z": 1.6053502399542694
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 1.624096350661051,
            "y": 2.831440938275181,
            "z": 3.5308715586062323
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 1.6781797464425847,
            "y": 2.7462820453932966,
            "z": 3.5011898630132854
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 1.6096630507370584,
            "y": 2.5652351870229886,
            "z": 3.518498742498588
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 1.6734401321260166,
            "y": 2.5697323288144602,
            "z": 3.5585679430302712
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess"
        ],
        "label": "expireAfterAccess",
        "text": "expireAfterAccess",
        "color": "#F6E146",
        "additional": "expireAfterAccess",
        "position": {
            "x": 1.5287517005181028,
            "y": 2.7440738731568937,
            "z": 3.6917236964819304
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess"
        ],
        "label": "expireAfterAccess",
        "text": "expireAfterAccess",
        "color": "#F6E146",
        "additional": "expireAfterAccess",
        "position": {
            "x": 1.585798512046357,
            "y": 2.8072551649469806,
            "z": 3.6860727316052984
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 1.687824108828202,
            "y": 2.8382756655465755,
            "z": 3.553676071681837
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 1.5679220423888314,
            "y": 2.5448026238690593,
            "z": 3.574212710359768
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess"
        ],
        "label": "expireAfterAccess",
        "text": "expireAfterAccess",
        "color": "#F6E146",
        "additional": "expireAfterAccess",
        "position": {
            "x": 1.494653338467078,
            "y": 2.7781450294800716,
            "z": 3.627946913637424
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 1.714538197534381,
            "y": 2.7634160810755692,
            "z": 3.580466432998695
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 1.6351923630488936,
            "y": 2.5404948786275794,
            "z": 3.6174720122738426
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess"
        ],
        "label": "expireAfterAccess",
        "text": "expireAfterAccess",
        "color": "#F6E146",
        "additional": "expireAfterAccess",
        "position": {
            "x": 1.5478736426464925,
            "y": 2.8473363417972126,
            "z": 3.6275835630597215
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -1.0002432528675624,
            "y": 2.672079531555351,
            "z": 2.552105344071441
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.9774754769285081,
            "y": 2.787344400786996,
            "z": 2.585372911562927
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.9111907256075422,
            "y": 2.2966869530779537,
            "z": 2.6265793179990844
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.8096285679390482,
            "y": 2.247549671673112,
            "z": 2.6053574215458015
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.8088724636204705,
            "y": 2.685739503646603,
            "z": 2.313005372897586
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.8566138606890035,
            "y": 2.498251412828683,
            "z": 2.3235031053572115
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -1.0129440019796805,
            "y": 2.719259319054437,
            "z": 2.585148316188954
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.9270459601223806,
            "y": 2.3541089395171686,
            "z": 2.606050762710362
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.8055609785556399,
            "y": 2.460781066319507,
            "z": 2.3298858493779617
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.8551158734326427,
            "y": 2.8032596830123704,
            "z": 2.524153150839171
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.9218333308152984,
            "y": 2.2973218325405496,
            "z": 2.5075641816170395
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.8230139119086515,
            "y": 2.5276329548612724,
            "z": 2.2840081941491337
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.9279002967969869,
            "y": 2.839182119993655,
            "z": 2.5643054841077144
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.7920228127117539,
            "y": 2.2358904240754454,
            "z": 2.5475463638794555
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.7702962602314984,
            "y": 2.587886680823191,
            "z": 2.283057326581605
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.9028000639078004,
            "y": 2.797904415167116,
            "z": 2.4922458671176293
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.8864150337547192,
            "y": 2.237948052302407,
            "z": 2.5014005468193363
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.749633122682243,
            "y": 2.6695478388807725,
            "z": 2.4064890829852454
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.870716739343,
            "y": 2.7248688308399722,
            "z": 2.600079039490517
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.7742691330715836,
            "y": 2.3116725553355257,
            "z": 2.507296588023355
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.7495931333420411,
            "y": 2.6504728396023625,
            "z": 2.3132509708102096
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.9383763282393256,
            "y": 2.6630776903841964,
            "z": 2.6462763526275963
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.7836669439478721,
            "y": 2.322227568365516,
            "z": 2.628378606416755
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.7004527523117865,
            "y": 2.6259116810589966,
            "z": 2.391689907807484
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.8736363225361525,
            "y": 2.6756576419262226,
            "z": 2.649454931619675
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.8180984943605503,
            "y": 2.377042155679651,
            "z": 2.6329213184680915
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.78539362721771,
            "y": 2.5704514966223067,
            "z": 2.358332087276565
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.9049887864753421,
            "y": 2.738451674605503,
            "z": 2.6578418383430784
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.8757608004092943,
            "y": 2.3714010444759643,
            "z": 2.6419096590753908
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.7543827151306344,
            "y": 2.4621951821162424,
            "z": 2.3556987023004874
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.9621894610793094,
            "y": 2.813677246742727,
            "z": 2.519241562109592
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.9494077962499692,
            "y": 2.319530395857252,
            "z": 2.557098870116179
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.8842342771804277,
            "y": 2.5696509268244356,
            "z": 2.3195502000737314
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.8678598930423356,
            "y": 2.8291967640035143,
            "z": 2.587976635929614
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.8143097763661551,
            "y": 2.2500290603210185,
            "z": 2.4889429390687114
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.8314456486937785,
            "y": 2.6101969121285804,
            "z": 2.2812750418037875
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -1.003905292512929,
            "y": 2.740690682257098,
            "z": 2.5224196375476264
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.9282206191725542,
            "y": 2.253105722843079,
            "z": 2.560344405174908
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.7393437698851848,
            "y": 2.690523147879177,
            "z": 2.3598278957115326
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.9578807366320412,
            "y": 2.750602894856919,
            "z": 2.487769238733404
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.8573235518209132,
            "y": 2.299547814902497,
            "z": 2.4761084515809535
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.878851625122018,
            "y": 2.6396484619633984,
            "z": 2.3183709565830144
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.983237338184936,
            "y": 2.653925167443186,
            "z": 2.6160890212913133
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.7604216715729548,
            "y": 2.352447748027174,
            "z": 2.585221088951444
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.709392656961201,
            "y": 2.5824752691159665,
            "z": 2.326791423326698
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.9095896413868201,
            "y": 2.734225404939955,
            "z": 2.5485541309929305
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.8425890118862622,
            "y": 2.3228598898041932,
            "z": 2.5526599763629023
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.7119238771100507,
            "y": 2.5008813962943006,
            "z": 2.3657239880338965
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.827220206090725,
            "y": 2.750253986076331,
            "z": 2.62785159666742
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.7531433041582385,
            "y": 2.298507670602031,
            "z": 2.561782913031407
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.7518363080258152,
            "y": 2.5090193972713184,
            "z": 2.301937728792729
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.9171344423633967,
            "y": 2.8035814400476435,
            "z": 2.6263709792228465
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.8458636928270724,
            "y": 2.299034006049748,
            "z": 2.64515407467242
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.6949982031322517,
            "y": 2.5591294568843,
            "z": 2.386859865685169
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.8205690660618858,
            "y": 2.7719128300313254,
            "z": 2.5676186390975646
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.853825296418155,
            "y": 2.2118241241889085,
            "z": 2.5522175468142687
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.854971235743746,
            "y": 2.6706127515485476,
            "z": 2.359103859914455
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.9723641490075114,
            "y": 2.736578690888612,
            "z": 2.6338193951672944
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.8827800165428812,
            "y": 2.243036428132063,
            "z": 2.602377179705708
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.8043249592696886,
            "y": 2.70059797785197,
            "z": 2.376041911274142
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -1.1341122550690441,
            "y": 2.0882191552792184,
            "z": 2.012916557156983
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -1.1965269776027228,
            "y": 2.1567517855209273,
            "z": 2.0051112871040018
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -1.2353040138772244,
            "y": 2.139056894498132,
            "z": 2.0587698679927042
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -1.1835920295011715,
            "y": 2.062575552793702,
            "z": 2.0553067241802947
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably"
        ],
        "label": "expireVariably",
        "text": "expireVariably",
        "color": "#F6E146",
        "additional": "expireVariably",
        "position": {
            "x": -1.1667513324395988,
            "y": 2.2399555272316087,
            "z": 1.98645203592289
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably"
        ],
        "label": "expireVariably",
        "text": "expireVariably",
        "color": "#F6E146",
        "additional": "expireVariably",
        "position": {
            "x": -1.1229051474478178,
            "y": 2.158486950241318,
            "z": 1.9772817850381332
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 1.6735848158794013,
            "y": 2.4607308552383715,
            "z": 2.772271786982621
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 1.719074924772951,
            "y": 2.5127429555878686,
            "z": 2.798035184512056
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 1.6699421469338223,
            "y": 2.195468050800928,
            "z": 2.733450516720805
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 1.7333880784323523,
            "y": 2.163803522567952,
            "z": 2.7689491611555477
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite"
        ],
        "label": "expireAfterWrite",
        "text": "expireAfterWrite",
        "color": "#F6E146",
        "additional": "expireAfterWrite",
        "position": {
            "x": 1.800010630243535,
            "y": 2.3698092597276617,
            "z": 2.6545308118503668
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite"
        ],
        "label": "expireAfterWrite",
        "text": "expireAfterWrite",
        "color": "#F6E146",
        "additional": "expireAfterWrite",
        "position": {
            "x": 1.7799378058267288,
            "y": 2.2752582809585027,
            "z": 2.6510388706573615
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 1.7591917926324983,
            "y": 2.456449340820584,
            "z": 2.83823830993185
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 1.7115361520109253,
            "y": 2.198911888040008,
            "z": 2.8335390609688758
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite"
        ],
        "label": "expireAfterWrite",
        "text": "expireAfterWrite",
        "color": "#F6E146",
        "additional": "expireAfterWrite",
        "position": {
            "x": 1.836297734275154,
            "y": 2.2565158581638833,
            "z": 2.702047844939119
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 1.7706961933593512,
            "y": 2.4903011505407386,
            "z": 2.7517572446446166
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 1.6440165675396532,
            "y": 2.2238549278257826,
            "z": 2.7995836318254037
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite"
        ],
        "label": "expireAfterWrite",
        "text": "expireAfterWrite",
        "color": "#F6E146",
        "additional": "expireAfterWrite",
        "position": {
            "x": 1.8520189899910537,
            "y": 2.3538806131766083,
            "z": 2.7098978131021694
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/key",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -1.0038716702662276,
            "y": 2.4700145177347386,
            "z": 4.483188363207148
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/key",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -0.9669698168497205,
            "y": 2.4695529485849725,
            "z": 4.408349395821459
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/value",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": -0.9771619522429273,
            "y": 2.6867379624719985,
            "z": 4.376466081476573
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/value",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": -1.0289121281882991,
            "y": 2.648986816334022,
            "z": 4.314557663403849
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentTime": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentTime",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentTime"
        ],
        "label": "currentTime",
        "text": "currentTime",
        "color": "#F6E146",
        "additional": "currentTime",
        "position": {
            "x": -1.1343636172291875,
            "y": 2.482838734404937,
            "z": 4.456123405284889
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/currentTime": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/currentTime",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentTime"
        ],
        "label": "currentTime",
        "text": "currentTime",
        "color": "#F6E146",
        "additional": "currentTime",
        "position": {
            "x": -1.1677878287405676,
            "y": 2.577570016853588,
            "z": 4.444865763743714
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/key",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -1.0408504892515562,
            "y": 2.4199600129110967,
            "z": 4.4204520896936925
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/value",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": -1.0522001617177454,
            "y": 2.7234455482762656,
            "z": 4.364711238924302
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentTime": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentTime",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/currentTime"
        ],
        "label": "currentTime",
        "text": "currentTime",
        "color": "#F6E146",
        "additional": "currentTime",
        "position": {
            "x": -1.1591751024775898,
            "y": 2.5150011077075756,
            "z": 4.3774482255928024
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration"
        ],
        "label": "currentDuration",
        "text": "currentDuration",
        "color": "#F6E146",
        "additional": "currentDuration",
        "position": {
            "x": -1.136179985982051,
            "y": 2.6916512208096273,
            "z": 4.408721594912656
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration"
        ],
        "label": "currentDuration",
        "text": "currentDuration",
        "color": "#F6E146",
        "additional": "currentDuration",
        "position": {
            "x": -1.0913447524388442,
            "y": 2.713817547563171,
            "z": 4.472742464395621
        }
    },
    "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className": {
        "id": "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className"
        ],
        "label": "className",
        "text": "className",
        "color": "#F6E146",
        "additional": "className",
        "position": {
            "x": -0.658735609579767,
            "y": 2.010529841434744,
            "z": 0.554802653381449
        }
    },
    "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className": {
        "id": "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className"
        ],
        "label": "className",
        "text": "className",
        "color": "#F6E146",
        "additional": "className",
        "position": {
            "x": -0.6917260940521124,
            "y": 2.0703876444480533,
            "z": 0.5016109602969635
        }
    },
    "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal": {
        "id": "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal"
        ],
        "label": "isFinal",
        "text": "isFinal",
        "color": "#F6E146",
        "additional": "isFinal",
        "position": {
            "x": -0.804935786840915,
            "y": 2.099698813808489,
            "z": 0.5641649313841179
        }
    },
    "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal": {
        "id": "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal"
        ],
        "label": "isFinal",
        "text": "isFinal",
        "color": "#F6E146",
        "additional": "isFinal",
        "position": {
            "x": -0.7718600556360931,
            "y": 2.0089895961914204,
            "z": 0.5780752957622172
        }
    },
    "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features": {
        "id": "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features"
        ],
        "label": "features",
        "text": "features",
        "color": "#F6E146",
        "additional": "features",
        "position": {
            "x": -0.6377126425356132,
            "y": 2.2095256217972326,
            "z": 0.5838067588991565
        }
    },
    "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features": {
        "id": "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features"
        ],
        "label": "features",
        "text": "features",
        "color": "#F6E146",
        "additional": "features",
        "position": {
            "x": -0.6093951855299424,
            "y": 2.1170005706146,
            "z": 0.579887249339891
        }
    },
    "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/executor": {
        "id": "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/executor",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/executor"
        ],
        "label": "executor",
        "text": "executor",
        "color": "#F6E146",
        "additional": "executor",
        "position": {
            "x": -0.0594321944725229,
            "y": 4.3656717838681525,
            "z": 1.4377445569006513
        }
    },
    "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/executor": {
        "id": "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/executor",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/executor"
        ],
        "label": "executor",
        "text": "executor",
        "color": "#F6E146",
        "additional": "executor",
        "position": {
            "x": -0.08971553485290973,
            "y": 4.362055866880739,
            "z": 1.5109864600931497
        }
    },
    "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/command": {
        "id": "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/command",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/command"
        ],
        "label": "command",
        "text": "command",
        "color": "#F6E146",
        "additional": "command",
        "position": {
            "x": 0.05118952162521273,
            "y": 4.228197561970173,
            "z": 1.5413164101803754
        }
    },
    "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/command": {
        "id": "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/command",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/command"
        ],
        "label": "command",
        "text": "command",
        "color": "#F6E146",
        "additional": "command",
        "position": {
            "x": -0.009689654869678543,
            "y": 4.2754927152794195,
            "z": 1.5822621382992612
        }
    },
    "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/delay": {
        "id": "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/delay",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/delay"
        ],
        "label": "delay",
        "text": "delay",
        "color": "#F6E146",
        "additional": "delay",
        "position": {
            "x": 0.08328778945252457,
            "y": 4.29123325764254,
            "z": 1.4550918554581695
        }
    },
    "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/delay": {
        "id": "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/delay",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/delay"
        ],
        "label": "delay",
        "text": "delay",
        "color": "#F6E146",
        "additional": "delay",
        "position": {
            "x": 0.036199573056924006,
            "y": 4.228136475616069,
            "z": 1.4263603717632898
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -0.15793012948799756,
            "y": 3.3307078414608635,
            "z": 3.791464568592886
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -0.13638543878774834,
            "y": 3.2319072151147212,
            "z": 3.7442460047601736
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration"
        ],
        "label": "duration",
        "text": "duration",
        "color": "#F6E146",
        "additional": "duration",
        "position": {
            "x": -0.09668979134424416,
            "y": 3.3325153636877194,
            "z": 3.729849869430212
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration"
        ],
        "label": "duration",
        "text": "duration",
        "color": "#F6E146",
        "additional": "duration",
        "position": {
            "x": -0.09549481719450159,
            "y": 3.3236469909058597,
            "z": 3.6471134504018847
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit"
        ],
        "label": "unit",
        "text": "unit",
        "color": "#F6E146",
        "additional": "unit",
        "position": {
            "x": -0.10661449049429472,
            "y": 3.422572347882052,
            "z": 3.7056875303088432
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit"
        ],
        "label": "unit",
        "text": "unit",
        "color": "#F6E146",
        "additional": "unit",
        "position": {
            "x": -0.17243206608994344,
            "y": 3.480013868640225,
            "z": 3.7161643100745914
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -0.19091267843059034,
            "y": 3.238709393237012,
            "z": 3.790640957610887
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration"
        ],
        "label": "duration",
        "text": "duration",
        "color": "#F6E146",
        "additional": "duration",
        "position": {
            "x": -0.10464682292616856,
            "y": 3.239954227413852,
            "z": 3.6856702492661637
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit"
        ],
        "label": "unit",
        "text": "unit",
        "color": "#F6E146",
        "additional": "unit",
        "position": {
            "x": -0.14096322553067941,
            "y": 3.453107091342898,
            "z": 3.6404034426551557
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": -0.24460486100946421,
            "y": 3.2178220591433218,
            "z": 3.749268934086375
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": -0.26253430575982306,
            "y": 3.307166227628572,
            "z": 3.7905345255542477
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/key",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -1.4615074914334478,
            "y": 3.312160948319646,
            "z": 3.0831632416952828
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/key",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -1.438177095662955,
            "y": 3.230149979002616,
            "z": 3.0527318460468456
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/value",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": -1.4129192496279264,
            "y": 3.37446873460556,
            "z": 2.9941206379126166
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/value",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": -1.4065975239539492,
            "y": 3.278469143961638,
            "z": 2.9874321914480397
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/duration": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/duration",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/duration"
        ],
        "label": "duration",
        "text": "duration",
        "color": "#F6E146",
        "additional": "duration",
        "position": {
            "x": -1.4579485593175772,
            "y": 3.287831608405473,
            "z": 3.0136818483043224
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/duration": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/duration",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/duration"
        ],
        "label": "duration",
        "text": "duration",
        "color": "#F6E146",
        "additional": "duration",
        "position": {
            "x": -1.450898089034344,
            "y": 3.3770911999719764,
            "z": 3.040958566142962
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers"
        ],
        "label": "producers",
        "text": "producers",
        "color": "#F6E146",
        "additional": "producers",
        "position": {
            "x": 1.0677167064453923,
            "y": 1.9968400759460834,
            "z": 0.6166389015175564
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers"
        ],
        "label": "producers",
        "text": "producers",
        "color": "#F6E146",
        "additional": "producers",
        "position": {
            "x": 1.1164526738463803,
            "y": 2.0618503202570624,
            "z": 0.6548479733055163
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers"
        ],
        "label": "consumers",
        "text": "consumers",
        "color": "#F6E146",
        "additional": "consumers",
        "position": {
            "x": 1.0173354364891258,
            "y": 2.0771689688440196,
            "z": 0.5122468352759971
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers"
        ],
        "label": "consumers",
        "text": "consumers",
        "color": "#F6E146",
        "additional": "consumers",
        "position": {
            "x": 0.9529523320800148,
            "y": 2.0683921023942897,
            "z": 0.5573886161061133
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity"
        ],
        "label": "capacity",
        "text": "capacity",
        "color": "#F6E146",
        "additional": "capacity",
        "position": {
            "x": 0.9371814041809259,
            "y": 2.1377052718999767,
            "z": 0.6497421600359752
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity"
        ],
        "label": "capacity",
        "text": "capacity",
        "color": "#F6E146",
        "additional": "capacity",
        "position": {
            "x": 0.9702657385447728,
            "y": 2.0426071209915206,
            "z": 0.6579498538984468
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering"
        ],
        "label": "ordering",
        "text": "ordering",
        "color": "#F6E146",
        "additional": "ordering",
        "position": {
            "x": 1.1346052129137143,
            "y": 2.1855436097762304,
            "z": 0.6021754310166576
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering"
        ],
        "label": "ordering",
        "text": "ordering",
        "color": "#F6E146",
        "additional": "ordering",
        "position": {
            "x": 1.0866807715911193,
            "y": 2.2245490543951405,
            "z": 0.548760203849334
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q"
        ],
        "label": "q",
        "text": "q",
        "color": "#F6E146",
        "additional": "q",
        "position": {
            "x": 1.0572081861897011,
            "y": 2.149857230255807,
            "z": 0.708976228778148
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q"
        ],
        "label": "q",
        "text": "q",
        "color": "#F6E146",
        "additional": "q",
        "position": {
            "x": 1.0568344819302982,
            "y": 2.2406037095930396,
            "z": 0.668682467446905
        }
    },
    "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.8486223760731568,
            "y": 0.5,
            "z": 2.6664621322209823
        }
    },
    "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.8779423031847484,
            "y": 0.5803667395015555,
            "z": 2.6232099513314266
        }
    },
    "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.802073502931294,
            "y": 0.6063000400776714,
            "z": 2.52977194094536
        }
    },
    "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.767952919381055,
            "y": 0.5121386447683538,
            "z": 2.5361714691539645
        }
    },
    "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite": {
        "id": "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite"
        ],
        "label": "refreshAfterWrite",
        "text": "refreshAfterWrite",
        "color": "#F6E146",
        "additional": "refreshAfterWrite",
        "position": {
            "x": 0.7691423083252378,
            "y": 0.6626458709609458,
            "z": 2.702944220192323
        }
    },
    "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite": {
        "id": "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite"
        ],
        "label": "refreshAfterWrite",
        "text": "refreshAfterWrite",
        "color": "#F6E146",
        "additional": "refreshAfterWrite",
        "position": {
            "x": 0.7281138913676615,
            "y": 0.5755455345220971,
            "z": 2.717691734513131
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/clock": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/clock",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/clock"
        ],
        "label": "clock",
        "text": "clock",
        "color": "#F6E146",
        "additional": "clock",
        "position": {
            "x": 0.11730921686070683,
            "y": 2.6794982114472616,
            "z": 2.956940543907407
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/clock": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/clock",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/clock"
        ],
        "label": "clock",
        "text": "clock",
        "color": "#F6E146",
        "additional": "clock",
        "position": {
            "x": 0.09063925508966841,
            "y": 2.767452939655202,
            "z": 2.9829814205916083
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/duration": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/duration",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/duration"
        ],
        "label": "duration",
        "text": "duration",
        "color": "#F6E146",
        "additional": "duration",
        "position": {
            "x": 0.01979857772702509,
            "y": 2.61782723351887,
            "z": 2.9679174875197782
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/duration": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/duration",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/duration"
        ],
        "label": "duration",
        "text": "duration",
        "color": "#F6E146",
        "additional": "duration",
        "position": {
            "x": 0.012214598624558537,
            "y": 2.7048833262273466,
            "z": 3.003127522199784
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/times": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/times",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/times"
        ],
        "label": "times",
        "text": "times",
        "color": "#F6E146",
        "additional": "times",
        "position": {
            "x": 0.07213558081301263,
            "y": 2.706364380637803,
            "z": 3.015489772278916
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/times": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/times",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/times"
        ],
        "label": "times",
        "text": "times",
        "color": "#F6E146",
        "additional": "times",
        "position": {
            "x": 0.07661370795322409,
            "y": 2.6217281559215606,
            "z": 2.9783887479335007
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending"
        ],
        "label": "ascending",
        "text": "ascending",
        "color": "#F6E146",
        "additional": "ascending",
        "position": {
            "x": -0.46376505034164617,
            "y": 3.371574378295182,
            "z": 1.6530899748250727
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending"
        ],
        "label": "ascending",
        "text": "ascending",
        "color": "#F6E146",
        "additional": "ascending",
        "position": {
            "x": -0.5138662606214315,
            "y": 3.2920561835045907,
            "z": 1.6452748369428183
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit"
        ],
        "label": "limit",
        "text": "limit",
        "color": "#F6E146",
        "additional": "limit",
        "position": {
            "x": -0.5484888146327478,
            "y": 3.3308434674021425,
            "z": 1.680055678244783
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit"
        ],
        "label": "limit",
        "text": "limit",
        "color": "#F6E146",
        "additional": "limit",
        "position": {
            "x": -0.5031744182601088,
            "y": 3.4072573581042946,
            "z": 1.6847631921516464
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer"
        ],
        "label": "transformer",
        "text": "transformer",
        "color": "#F6E146",
        "additional": "transformer",
        "position": {
            "x": -0.4692800620258242,
            "y": 3.2493497240418145,
            "z": 1.6282841454722063
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer"
        ],
        "label": "transformer",
        "text": "transformer",
        "color": "#F6E146",
        "additional": "transformer",
        "position": {
            "x": -0.4312408401881378,
            "y": 3.3314229943378684,
            "z": 1.6243481797437767
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/buffer": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/buffer",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/buffer"
        ],
        "label": "buffer",
        "text": "buffer",
        "color": "#F6E146",
        "additional": "buffer",
        "position": {
            "x": 0.358883983556205,
            "y": 3.584883901874236,
            "z": 0.7836068635426554
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/buffer": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/buffer",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/buffer"
        ],
        "label": "buffer",
        "text": "buffer",
        "color": "#F6E146",
        "additional": "buffer",
        "position": {
            "x": 0.4033339252262449,
            "y": 3.499538814998163,
            "z": 0.7915027829790309
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/offset": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/offset",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/offset"
        ],
        "label": "offset",
        "text": "offset",
        "color": "#F6E146",
        "additional": "offset",
        "position": {
            "x": 0.5336916015674267,
            "y": 3.6730046793347535,
            "z": 0.8595107746146886
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/offset": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/offset",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/offset"
        ],
        "label": "offset",
        "text": "offset",
        "color": "#F6E146",
        "additional": "offset",
        "position": {
            "x": 0.5388169796978692,
            "y": 3.5691632128194035,
            "z": 0.8579430655879221
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/e": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/e",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/e"
        ],
        "label": "e",
        "text": "e",
        "color": "#F6E146",
        "additional": "e",
        "position": {
            "x": 0.5126798590409742,
            "y": 3.617660403334321,
            "z": 0.7264155416202757
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/e": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/e",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/e"
        ],
        "label": "e",
        "text": "e",
        "color": "#F6E146",
        "additional": "e",
        "position": {
            "x": 0.4678136265024211,
            "y": 3.7055513591826865,
            "z": 0.737216528454632
        }
    },
    "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 1.878378606285127,
            "y": 1.3223552475659637,
            "z": 2.920627708034681
        }
    },
    "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 1.9324996692149354,
            "y": 1.363533206835013,
            "z": 2.9680776885634796
        }
    },
    "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source": {
        "id": "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source"
        ],
        "label": "source",
        "text": "source",
        "color": "#F6E146",
        "additional": "source",
        "position": {
            "x": 2,
            "y": 1.4860479893933327,
            "z": 2.8191545582622886
        }
    },
    "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source": {
        "id": "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source"
        ],
        "label": "source",
        "text": "source",
        "color": "#F6E146",
        "additional": "source",
        "position": {
            "x": 1.9595586967239167,
            "y": 1.417727938402602,
            "z": 2.7794484660215457
        }
    },
    "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad": {
        "id": "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad"
        ],
        "label": "lastLoad",
        "text": "lastLoad",
        "color": "#F6E146",
        "additional": "lastLoad",
        "position": {
            "x": 1.968152075717743,
            "y": 1.527253751206438,
            "z": 2.9178363681207484
        }
    },
    "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad": {
        "id": "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad"
        ],
        "label": "lastLoad",
        "text": "lastLoad",
        "color": "#F6E146",
        "additional": "lastLoad",
        "position": {
            "x": 1.9023038451851644,
            "y": 1.4878181606866376,
            "z": 2.953386942289461
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/lowerBound": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/lowerBound",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/lowerBound"
        ],
        "label": "lowerBound",
        "text": "lowerBound",
        "color": "#F6E146",
        "additional": "lowerBound",
        "position": {
            "x": 0.03101701361653797,
            "y": 3.6235570920257603,
            "z": 4.296034576484995
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/lowerBound": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/lowerBound",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/lowerBound"
        ],
        "label": "lowerBound",
        "text": "lowerBound",
        "color": "#F6E146",
        "additional": "lowerBound",
        "position": {
            "x": 0.06881359902228779,
            "y": 3.5665972022140084,
            "z": 4.247728405376969
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/upperBound": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/upperBound",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/upperBound"
        ],
        "label": "upperBound",
        "text": "upperBound",
        "color": "#F6E146",
        "additional": "upperBound",
        "position": {
            "x": 0.0441722285859214,
            "y": 3.499071582269879,
            "z": 4.201379689610103
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/upperBound": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/upperBound",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/upperBound"
        ],
        "label": "upperBound",
        "text": "upperBound",
        "color": "#F6E146",
        "additional": "upperBound",
        "position": {
            "x": 0.05185154428125971,
            "y": 3.5972277871571556,
            "z": 4.176044888753276
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/events": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/events",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/events"
        ],
        "label": "events",
        "text": "events",
        "color": "#F6E146",
        "additional": "events",
        "position": {
            "x": -0.01589957137190945,
            "y": 3.4484960373167626,
            "z": 4.253102827223815
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/events": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/events",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/events"
        ],
        "label": "events",
        "text": "events",
        "color": "#F6E146",
        "additional": "events",
        "position": {
            "x": -0.001428953111784148,
            "y": 3.510066327558589,
            "z": 4.310328101477779
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/items": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/items",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/items"
        ],
        "label": "items",
        "text": "items",
        "color": "#F6E146",
        "additional": "items",
        "position": {
            "x": -0.5859457712627758,
            "y": 3.9900024013910462,
            "z": 4.113683113678713
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/items": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/items",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/items"
        ],
        "label": "items",
        "text": "items",
        "color": "#F6E146",
        "additional": "items",
        "position": {
            "x": -0.6221122477513281,
            "y": 3.8945415215535775,
            "z": 4.123100283905895
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/constant": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/constant",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/constant"
        ],
        "label": "constant",
        "text": "constant",
        "color": "#F6E146",
        "additional": "constant",
        "position": {
            "x": -0.5736037195357235,
            "y": 3.9489358634300733,
            "z": 3.9735558044403887
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/constant": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/constant",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/constant"
        ],
        "label": "constant",
        "text": "constant",
        "color": "#F6E146",
        "additional": "constant",
        "position": {
            "x": -0.6220021757754308,
            "y": 3.8734580881430425,
            "z": 3.999788823962845
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/events": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/events",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/events"
        ],
        "label": "events",
        "text": "events",
        "color": "#F6E146",
        "additional": "events",
        "position": {
            "x": -0.6470196348695261,
            "y": 3.925028922693729,
            "z": 4.052027815867767
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/events": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/events",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/events"
        ],
        "label": "events",
        "text": "events",
        "color": "#F6E146",
        "additional": "events",
        "position": {
            "x": -0.6003947579059992,
            "y": 4.003819666057495,
            "z": 4.027465371093758
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux"
        ],
        "label": "fpaux",
        "text": "fpaux",
        "color": "#F6E146",
        "additional": "fpaux",
        "position": {
            "x": -0.10967849176156252,
            "y": 1.0934351269865283,
            "z": 1.8064267447506497
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux"
        ],
        "label": "fpaux",
        "text": "fpaux",
        "color": "#F6E146",
        "additional": "fpaux",
        "position": {
            "x": -0.18206013908101681,
            "y": 1.070251449708663,
            "z": 1.7835877398450901
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim"
        ],
        "label": "victim",
        "text": "victim",
        "color": "#F6E146",
        "additional": "victim",
        "position": {
            "x": -0.2837574648823986,
            "y": 1.201659067420675,
            "z": 1.8274042058037232
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim"
        ],
        "label": "victim",
        "text": "victim",
        "color": "#F6E146",
        "additional": "victim",
        "position": {
            "x": -0.26479678664409323,
            "y": 1.09980886108603,
            "z": 1.8503383483416995
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart"
        ],
        "label": "bucketStart",
        "text": "bucketStart",
        "color": "#F6E146",
        "additional": "bucketStart",
        "position": {
            "x": -0.1594633469789637,
            "y": 1.2742356748546895,
            "z": 1.7854363315913964
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart"
        ],
        "label": "bucketStart",
        "text": "bucketStart",
        "color": "#F6E146",
        "additional": "bucketStart",
        "position": {
            "x": -0.14851843796088438,
            "y": 1.1916116982478289,
            "z": 1.7424719453559812
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset"
        ],
        "label": "removedOffset",
        "text": "removedOffset",
        "color": "#F6E146",
        "additional": "removedOffset",
        "position": {
            "x": -0.2644877088701387,
            "y": 1.1939962853468788,
            "z": 1.7633069365780152
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset"
        ],
        "label": "removedOffset",
        "text": "removedOffset",
        "color": "#F6E146",
        "additional": "removedOffset",
        "position": {
            "x": -0.21526697169370967,
            "y": 1.2540959856828753,
            "z": 1.7565591330651402
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux"
        ],
        "label": "fpaux",
        "text": "fpaux",
        "color": "#F6E146",
        "additional": "fpaux",
        "position": {
            "x": -0.1625093239433295,
            "y": 1.046050341564699,
            "z": 1.8488855057477036
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim"
        ],
        "label": "victim",
        "text": "victim",
        "color": "#F6E146",
        "additional": "victim",
        "position": {
            "x": -0.24688529214970334,
            "y": 1.1253383776086994,
            "z": 1.785619549918045
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart"
        ],
        "label": "bucketStart",
        "text": "bucketStart",
        "color": "#F6E146",
        "additional": "bucketStart",
        "position": {
            "x": -0.09905875687686949,
            "y": 1.196498271813803,
            "z": 1.791777558429544
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset"
        ],
        "label": "removedOffset",
        "text": "removedOffset",
        "color": "#F6E146",
        "additional": "removedOffset",
        "position": {
            "x": -0.19813905237187712,
            "y": 1.1442113886040635,
            "z": 1.746080351417362
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx"
        ],
        "label": "idx",
        "text": "idx",
        "color": "#F6E146",
        "additional": "idx",
        "position": {
            "x": 0.011777022165658124,
            "y": 1.9376652545203867,
            "z": 3.7450502454127976
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/idx": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/idx",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx"
        ],
        "label": "idx",
        "text": "idx",
        "color": "#F6E146",
        "additional": "idx",
        "position": {
            "x": 0.049905481148299735,
            "y": 1.8976668084951707,
            "z": 3.801810455506877
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start"
        ],
        "label": "start",
        "text": "start",
        "color": "#F6E146",
        "additional": "start",
        "position": {
            "x": 0.11133026386302003,
            "y": 1.753852658740332,
            "z": 3.762232429508396
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/start": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/start",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start"
        ],
        "label": "start",
        "text": "start",
        "color": "#F6E146",
        "additional": "start",
        "position": {
            "x": 0.08299153357659872,
            "y": 1.8173452717098502,
            "z": 3.810362351370069
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/delta",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta"
        ],
        "label": "delta",
        "text": "delta",
        "color": "#F6E146",
        "additional": "delta",
        "position": {
            "x": -0.05898665815113113,
            "y": 1.7054210084690433,
            "z": 3.7970184325005367
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/delta": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/delta",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta"
        ],
        "label": "delta",
        "text": "delta",
        "color": "#F6E146",
        "additional": "delta",
        "position": {
            "x": -0.06563592514371508,
            "y": 1.8124471362488743,
            "z": 3.806684041360557
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/idx"
        ],
        "label": "idx",
        "text": "idx",
        "color": "#F6E146",
        "additional": "idx",
        "position": {
            "x": -0.03026857297881591,
            "y": 1.8946543695647935,
            "z": 3.7985965440806426
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": 0.003552533112831213,
            "y": 1.7008982003260804,
            "z": 3.7958926477347825
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": 0.009466010763423238,
            "y": 1.797631857718183,
            "z": 3.818710089283424
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/start"
        ],
        "label": "start",
        "text": "start",
        "color": "#F6E146",
        "additional": "start",
        "position": {
            "x": 0.06275278601493595,
            "y": 1.7112844346560327,
            "z": 3.810392824646995
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/delta"
        ],
        "label": "delta",
        "text": "delta",
        "color": "#F6E146",
        "additional": "delta",
        "position": {
            "x": -0.09606649771070419,
            "y": 1.7660797650527,
            "z": 3.7478245118815177
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/fpaux": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/fpaux",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux"
        ],
        "label": "fpaux",
        "text": "fpaux",
        "color": "#F6E146",
        "additional": "fpaux",
        "position": {
            "x": -1.9585125225950657,
            "y": 2.4999259169145662,
            "z": 1.5248791530929757
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux"
        ],
        "label": "fpaux",
        "text": "fpaux",
        "color": "#F6E146",
        "additional": "fpaux",
        "position": {
            "x": -1.8845892215688396,
            "y": 2.493127377455299,
            "z": 1.5271166906612528
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/chainIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/chainIndex",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex"
        ],
        "label": "chainIndex",
        "text": "chainIndex",
        "color": "#F6E146",
        "additional": "chainIndex",
        "position": {
            "x": -1.9404299037723385,
            "y": 2.7461455023370096,
            "z": 1.4827967149342243
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex"
        ],
        "label": "chainIndex",
        "text": "chainIndex",
        "color": "#F6E146",
        "additional": "chainIndex",
        "position": {
            "x": -1.919738308310366,
            "y": 2.7714252526985006,
            "z": 1.4129028602656057
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/isLastIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/isLastIndex",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex"
        ],
        "label": "isLastIndex",
        "text": "isLastIndex",
        "color": "#F6E146",
        "additional": "isLastIndex",
        "position": {
            "x": -2,
            "y": 2.5673899702441876,
            "z": 1.3524457800080194
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex"
        ],
        "label": "isLastIndex",
        "text": "isLastIndex",
        "color": "#F6E146",
        "additional": "isLastIndex",
        "position": {
            "x": -1.9822891380381402,
            "y": 2.6662789230419253,
            "z": 1.3476528069232876
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux"
        ],
        "label": "fpaux",
        "text": "fpaux",
        "color": "#F6E146",
        "additional": "fpaux",
        "position": {
            "x": -1.8792336691945446,
            "y": 2.4400397284531223,
            "z": 1.4644636837587868
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex"
        ],
        "label": "chainIndex",
        "text": "chainIndex",
        "color": "#F6E146",
        "additional": "chainIndex",
        "position": {
            "x": -1.8496524870447275,
            "y": 2.7342634903858185,
            "z": 1.4146224825509655
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex"
        ],
        "label": "isLastIndex",
        "text": "isLastIndex",
        "color": "#F6E146",
        "additional": "isLastIndex",
        "position": {
            "x": -1.9154405440184956,
            "y": 2.6422824887607153,
            "z": 1.3123461357012878
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux"
        ],
        "label": "fpaux",
        "text": "fpaux",
        "color": "#F6E146",
        "additional": "fpaux",
        "position": {
            "x": -1.9523957026457948,
            "y": 2.441649450590795,
            "z": 1.462419652625651
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex"
        ],
        "label": "chainIndex",
        "text": "chainIndex",
        "color": "#F6E146",
        "additional": "chainIndex",
        "position": {
            "x": -1.8684891464621323,
            "y": 2.7339337136544763,
            "z": 1.4898229345341714
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex"
        ],
        "label": "isLastIndex",
        "text": "isLastIndex",
        "color": "#F6E146",
        "additional": "isLastIndex",
        "position": {
            "x": -1.93281271879998,
            "y": 2.5437750732991287,
            "z": 1.3176146816683518
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/hitCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/hitCount",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/hitCount",
            "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/hitCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/hitCount"
        ],
        "label": "hitCount",
        "text": "hitCount",
        "color": "#F6E146",
        "additional": "hitCount",
        "position": {
            "x": 0.29518500769627076,
            "y": 1.8915937761060142,
            "z": 1.3276877577972828
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/hitCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/hitCount",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/hitCount",
            "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/hitCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/hitCount"
        ],
        "label": "hitCount",
        "text": "hitCount",
        "color": "#F6E146",
        "additional": "hitCount",
        "position": {
            "x": 0.2525563984218797,
            "y": 1.8649371322771908,
            "z": 1.3703794735170396
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/missCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/missCount",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/missCount",
            "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/missCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/missCount"
        ],
        "label": "missCount",
        "text": "missCount",
        "color": "#F6E146",
        "additional": "missCount",
        "position": {
            "x": 0.21481028852285844,
            "y": 1.4991217863159592,
            "z": 1.4426426936597982
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/missCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/missCount",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/missCount",
            "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/missCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/missCount"
        ],
        "label": "missCount",
        "text": "missCount",
        "color": "#F6E146",
        "additional": "missCount",
        "position": {
            "x": 0.24583608615359598,
            "y": 1.4879821740027661,
            "z": 1.4993293484916443
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadSuccessCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadSuccessCount",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadSuccessCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/loadSuccessCount"
        ],
        "label": "loadSuccessCount",
        "text": "loadSuccessCount",
        "color": "#F6E146",
        "additional": "loadSuccessCount",
        "position": {
            "x": 0.4410669243171981,
            "y": 1.6497769267959448,
            "z": 1.4241941387457566
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadSuccessCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadSuccessCount",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadSuccessCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/loadSuccessCount"
        ],
        "label": "loadSuccessCount",
        "text": "loadSuccessCount",
        "color": "#F6E146",
        "additional": "loadSuccessCount",
        "position": {
            "x": 0.41415437572965486,
            "y": 1.566108016994032,
            "z": 1.4377921391991801
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadFailureCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadFailureCount",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadFailureCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/loadFailureCount"
        ],
        "label": "loadFailureCount",
        "text": "loadFailureCount",
        "color": "#F6E146",
        "additional": "loadFailureCount",
        "position": {
            "x": 0.3625408649428188,
            "y": 1.5509997236668176,
            "z": 1.32899241253988
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadFailureCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadFailureCount",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadFailureCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/loadFailureCount"
        ],
        "label": "loadFailureCount",
        "text": "loadFailureCount",
        "color": "#F6E146",
        "additional": "loadFailureCount",
        "position": {
            "x": 0.35494382050657425,
            "y": 1.4959318481110617,
            "z": 1.3888046708262234
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/totalLoadTime": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/totalLoadTime",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/totalLoadTime",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/totalLoadTime"
        ],
        "label": "totalLoadTime",
        "text": "totalLoadTime",
        "color": "#F6E146",
        "additional": "totalLoadTime",
        "position": {
            "x": 0.3684860047704106,
            "y": 1.7787331894385112,
            "z": 1.470211697215316
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/totalLoadTime": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/totalLoadTime",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/totalLoadTime",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/totalLoadTime"
        ],
        "label": "totalLoadTime",
        "text": "totalLoadTime",
        "color": "#F6E146",
        "additional": "totalLoadTime",
        "position": {
            "x": 0.42689812103279623,
            "y": 1.7422029848292393,
            "z": 1.4413103969465344
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionCount",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionCount",
            "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/evictionCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/evictionCount"
        ],
        "label": "evictionCount",
        "text": "evictionCount",
        "color": "#F6E146",
        "additional": "evictionCount",
        "position": {
            "x": 0.1332439897418345,
            "y": 1.7349906362638838,
            "z": 1.339448458561423
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionCount",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionCount",
            "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/evictionCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/evictionCount"
        ],
        "label": "evictionCount",
        "text": "evictionCount",
        "color": "#F6E146",
        "additional": "evictionCount",
        "position": {
            "x": 0.16725095896415665,
            "y": 1.8092620798823875,
            "z": 1.3333026294988888
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionWeight": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionWeight",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionWeight",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/evictionWeight"
        ],
        "label": "evictionWeight",
        "text": "evictionWeight",
        "color": "#F6E146",
        "additional": "evictionWeight",
        "position": {
            "x": 0.22000501008786788,
            "y": 1.6116925504875697,
            "z": 1.4500961688824257
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionWeight": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionWeight",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionWeight",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/evictionWeight"
        ],
        "label": "evictionWeight",
        "text": "evictionWeight",
        "color": "#F6E146",
        "additional": "evictionWeight",
        "position": {
            "x": 0.21567371906227395,
            "y": 1.6468377352777417,
            "z": 1.5080037848918435
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/hitCount": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/hitCount",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/hitCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/hitCount"
        ],
        "label": "hitCount",
        "text": "hitCount",
        "color": "#F6E146",
        "additional": "hitCount",
        "position": {
            "x": 0.1811822670202412,
            "y": 1.9456548336968438,
            "z": 1.336782950467375
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/missCount": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/missCount",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/missCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/missCount"
        ],
        "label": "missCount",
        "text": "missCount",
        "color": "#F6E146",
        "additional": "missCount",
        "position": {
            "x": 0.1256699215035364,
            "y": 1.5349290603463022,
            "z": 1.485517938620256
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/evictionCount": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/evictionCount",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionCount"
        ],
        "label": "evictionCount",
        "text": "evictionCount",
        "color": "#F6E146",
        "additional": "evictionCount",
        "position": {
            "x": 0.06376711523909417,
            "y": 1.847306870191071,
            "z": 1.3120084239416816
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/hitCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/hitCount",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/hitCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/hitCount"
        ],
        "label": "hitCount",
        "text": "hitCount",
        "color": "#F6E146",
        "additional": "hitCount",
        "position": {
            "x": 0.2610212622222412,
            "y": 1.8310287610787934,
            "z": 1.2648093876806028
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/missCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/missCount",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/missCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/missCount"
        ],
        "label": "missCount",
        "text": "missCount",
        "color": "#F6E146",
        "additional": "missCount",
        "position": {
            "x": 0.24191324915932544,
            "y": 1.4077214818119321,
            "z": 1.4078666335088528
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/loadSuccessCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/loadSuccessCount",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadSuccessCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadSuccessCount"
        ],
        "label": "loadSuccessCount",
        "text": "loadSuccessCount",
        "color": "#F6E146",
        "additional": "loadSuccessCount",
        "position": {
            "x": 0.4491138482025412,
            "y": 1.5763926896661433,
            "z": 1.3455871375539514
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/loadFailureCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/loadFailureCount",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadFailureCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadFailureCount"
        ],
        "label": "loadFailureCount",
        "text": "loadFailureCount",
        "color": "#F6E146",
        "additional": "loadFailureCount",
        "position": {
            "x": 0.35119857841804825,
            "y": 1.4423305127268828,
            "z": 1.2929051497606214
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/totalLoadTime": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/totalLoadTime",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/totalLoadTime",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/totalLoadTime"
        ],
        "label": "totalLoadTime",
        "text": "totalLoadTime",
        "color": "#F6E146",
        "additional": "totalLoadTime",
        "position": {
            "x": 0.39221345713903144,
            "y": 1.7661197825116473,
            "z": 1.369095906075958
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/evictionCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/evictionCount",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionCount"
        ],
        "label": "evictionCount",
        "text": "evictionCount",
        "color": "#F6E146",
        "additional": "evictionCount",
        "position": {
            "x": 0.14397349622704247,
            "y": 1.7333411090990327,
            "z": 1.2511492885443358
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/evictionWeight": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/evictionWeight",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionWeight",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionWeight"
        ],
        "label": "evictionWeight",
        "text": "evictionWeight",
        "color": "#F6E146",
        "additional": "evictionWeight",
        "position": {
            "x": 0.15023352737417328,
            "y": 1.5875056351891053,
            "z": 1.418683292961116
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 1.550564773770346,
            "y": 2.9094302119900206,
            "z": 2.0540197619921834
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 1.4995906395068208,
            "y": 2.848636689007653,
            "z": 2.036770134743685
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": 1.4712463606650243,
            "y": 3.0154836258985265,
            "z": 1.9429247532695113
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": 1.4083843345872196,
            "y": 3.051428302861098,
            "z": 1.9743048338376026
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": 1.5109495221845175,
            "y": 3.0288979573967194,
            "z": 2.197810907271987
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": 1.5533187515835873,
            "y": 3.0723513695683735,
            "z": 2.1497890538113884
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 1.5577796992932162,
            "y": 2.8913549124800095,
            "z": 2.1137741224660864
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": 1.4548610793915095,
            "y": 2.9455938529849686,
            "z": 1.9760882913591722
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": 1.453391345034016,
            "y": 3.1488495903405247,
            "z": 2.162374172712873
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 1.5005784210990325,
            "y": 2.86702496092644,
            "z": 2.143471951537463
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": 1.5279353859661016,
            "y": 3.024733620308139,
            "z": 1.9949824905462716
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": 1.5196317733885172,
            "y": 3.1470184701693027,
            "z": 2.1344371252123864
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 1.4708414298961263,
            "y": 2.825284465325038,
            "z": 2.091145285965087
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": 1.4784337857821934,
            "y": 3.1020063205962476,
            "z": 1.9916868255713422
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": 1.472977890330056,
            "y": 3.096258048756796,
            "z": 2.2112813991498053
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.38542043007245863,
            "y": 3.575350550057357,
            "z": 2.462601833219476
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.39505398120930457,
            "y": 3.6208174355543803,
            "z": 2.3972332280357467
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/key": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/key",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -0.4219818479250954,
            "y": 3.4742518642335343,
            "z": 2.359510802442283
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/key": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/key",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -0.43207525474252084,
            "y": 3.5429770836527825,
            "z": 2.4098713042591724
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/oldValue": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/oldValue",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/oldValue"
        ],
        "label": "oldValue",
        "text": "oldValue",
        "color": "#F6E146",
        "additional": "oldValue",
        "position": {
            "x": -0.426803486278432,
            "y": 3.5333099440040363,
            "z": 2.4626075527272056
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/oldValue": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/oldValue",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/oldValue"
        ],
        "label": "oldValue",
        "text": "oldValue",
        "color": "#F6E146",
        "additional": "oldValue",
        "position": {
            "x": -0.4296273369568677,
            "y": 3.4605311624908777,
            "z": 2.4173148264838464
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/newValue": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/newValue",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/newValue"
        ],
        "label": "newValue",
        "text": "newValue",
        "color": "#F6E146",
        "additional": "newValue",
        "position": {
            "x": -0.4442556132340483,
            "y": 3.6072127150062534,
            "z": 2.3945715991583363
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/newValue": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/newValue",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/newValue"
        ],
        "label": "newValue",
        "text": "newValue",
        "color": "#F6E146",
        "additional": "newValue",
        "position": {
            "x": -0.4444438650297786,
            "y": 3.536552330587793,
            "z": 2.3469595411674566
        }
    },
    "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason": {
        "id": "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason"
        ],
        "label": "reason",
        "text": "reason",
        "color": "#F6E146",
        "additional": "reason",
        "position": {
            "x": 1.2008819807041284,
            "y": 3.0990108945728716,
            "z": 0.9906020100841983
        }
    },
    "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason": {
        "id": "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason"
        ],
        "label": "reason",
        "text": "reason",
        "color": "#F6E146",
        "additional": "reason",
        "position": {
            "x": 1.2603043630874033,
            "y": 3.140823629912837,
            "z": 1.0287601391797458
        }
    },
    "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual": {
        "id": "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual"
        ],
        "label": "actual",
        "text": "actual",
        "color": "#F6E146",
        "additional": "actual",
        "position": {
            "x": 1.3153517500891252,
            "y": 2.8992920461730898,
            "z": 1.0555985300939277
        }
    },
    "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual": {
        "id": "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual"
        ],
        "label": "actual",
        "text": "actual",
        "color": "#F6E146",
        "additional": "actual",
        "position": {
            "x": 1.3647596175961256,
            "y": 2.9593880051321486,
            "z": 1.015055933018846
        }
    },
    "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher": {
        "id": "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher"
        ],
        "label": "matcher",
        "text": "matcher",
        "color": "#F6E146",
        "additional": "matcher",
        "position": {
            "x": 1.2045664251292059,
            "y": 2.9661370609624114,
            "z": 0.9514945400461734
        }
    },
    "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher": {
        "id": "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher"
        ],
        "label": "matcher",
        "text": "matcher",
        "color": "#F6E146",
        "additional": "matcher",
        "position": {
            "x": 1.2384611750143946,
            "y": 2.888595308457644,
            "z": 0.9921473796363116
        }
    },
    "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/NUM_PRODUCERS": {
        "id": "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/NUM_PRODUCERS",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/NUM_PRODUCERS"
        ],
        "label": "NUM_PRODUCERS",
        "text": "NUM_PRODUCERS",
        "color": "#F6E146",
        "additional": "NUM_PRODUCERS",
        "position": {
            "x": 1.7754693402384194,
            "y": 3.790674277254064,
            "z": 1.7749398001211933
        }
    },
    "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/NUM_PRODUCERS": {
        "id": "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/NUM_PRODUCERS",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/NUM_PRODUCERS"
        ],
        "label": "NUM_PRODUCERS",
        "text": "NUM_PRODUCERS",
        "color": "#F6E146",
        "additional": "NUM_PRODUCERS",
        "position": {
            "x": 1.7245713661731505,
            "y": 3.8797665289726453,
            "z": 1.8179071397486646
        }
    },
    "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/POPULATED_SIZE": {
        "id": "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/POPULATED_SIZE",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/POPULATED_SIZE"
        ],
        "label": "POPULATED_SIZE",
        "text": "POPULATED_SIZE",
        "color": "#F6E146",
        "additional": "POPULATED_SIZE",
        "position": {
            "x": 1.6451796653032722,
            "y": 3.746432901920077,
            "z": 1.6620665652524473
        }
    },
    "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/POPULATED_SIZE": {
        "id": "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/POPULATED_SIZE",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/POPULATED_SIZE"
        ],
        "label": "POPULATED_SIZE",
        "text": "POPULATED_SIZE",
        "color": "#F6E146",
        "additional": "POPULATED_SIZE",
        "position": {
            "x": 1.5929061891150247,
            "y": 3.8354228701580184,
            "z": 1.7034669722651465
        }
    },
    "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/PRODUCE": {
        "id": "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/PRODUCE",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/PRODUCE"
        ],
        "label": "PRODUCE",
        "text": "PRODUCE",
        "color": "#F6E146",
        "additional": "PRODUCE",
        "position": {
            "x": 1.6953234735289304,
            "y": 3.6670221824313245,
            "z": 1.8253788647692595
        }
    },
    "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/PRODUCE": {
        "id": "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/PRODUCE",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/PRODUCE"
        ],
        "label": "PRODUCE",
        "text": "PRODUCE",
        "color": "#F6E146",
        "additional": "PRODUCE",
        "position": {
            "x": 1.6420288125012972,
            "y": 3.756247908993352,
            "z": 1.8661277002319312
        }
    },
    "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/UNSAFE": {
        "id": "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/UNSAFE",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/UNSAFE"
        ],
        "label": "UNSAFE",
        "text": "UNSAFE",
        "color": "#F6E146",
        "additional": "UNSAFE",
        "position": {
            "x": 0.9744295666698628,
            "y": 2.338830091640528,
            "z": 4.207503553541508
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/UNSAFE": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/UNSAFE",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/UNSAFE"
        ],
        "label": "UNSAFE",
        "text": "UNSAFE",
        "color": "#F6E146",
        "additional": "UNSAFE",
        "position": {
            "x": 0.982712358024703,
            "y": 2.230131332658134,
            "z": 4.247079556145761
        }
    },
    "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/ANDROID": {
        "id": "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/ANDROID",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/ANDROID"
        ],
        "label": "ANDROID",
        "text": "ANDROID",
        "color": "#F6E146",
        "additional": "ANDROID",
        "position": {
            "x": 0.8247156655508383,
            "y": 2.2933015218880755,
            "z": 4.176535164056138
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/ANDROID": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/ANDROID",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/ANDROID"
        ],
        "label": "ANDROID",
        "text": "ANDROID",
        "color": "#F6E146",
        "additional": "ANDROID",
        "position": {
            "x": 0.8286993820598298,
            "y": 2.18445861246385,
            "z": 4.216619422839809
        }
    },
    "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/OPEN_JDK": {
        "id": "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/OPEN_JDK",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/OPEN_JDK"
        ],
        "label": "OPEN_JDK",
        "text": "OPEN_JDK",
        "color": "#F6E146",
        "additional": "OPEN_JDK",
        "position": {
            "x": 0.8690971346609766,
            "y": 2.4538184179120126,
            "z": 4.325001248550974
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/OPEN_JDK": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/OPEN_JDK",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/OPEN_JDK"
        ],
        "label": "OPEN_JDK",
        "text": "OPEN_JDK",
        "color": "#F6E146",
        "additional": "OPEN_JDK",
        "position": {
            "x": 0.8719073112390325,
            "y": 2.3430196636079383,
            "z": 4.363023162616235
        }
    },
    "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/lvalue": {
        "id": "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/lvalue",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/lvalue"
        ],
        "label": "lvalue",
        "text": "lvalue",
        "color": "#F6E146",
        "additional": "lvalue",
        "position": {
            "x": -1.2679936022132843,
            "y": 1.445905176183472,
            "z": 3.4239476276088983
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/lvalue": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/lvalue",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/lvalue"
        ],
        "label": "lvalue",
        "text": "lvalue",
        "color": "#F6E146",
        "additional": "lvalue",
        "position": {
            "x": -1.2582193318801098,
            "y": 1.358512797984912,
            "z": 3.356974596403432
        }
    },
    "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/LVALUE_OFFSET": {
        "id": "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/LVALUE_OFFSET",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/LVALUE_OFFSET"
        ],
        "label": "LVALUE_OFFSET",
        "text": "LVALUE_OFFSET",
        "color": "#F6E146",
        "additional": "LVALUE_OFFSET",
        "position": {
            "x": -1.471600738542994,
            "y": 1.400308633834415,
            "z": 3.453531085415132
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/LVALUE_OFFSET": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/LVALUE_OFFSET",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/LVALUE_OFFSET"
        ],
        "label": "LVALUE_OFFSET",
        "text": "LVALUE_OFFSET",
        "color": "#F6E146",
        "additional": "LVALUE_OFFSET",
        "position": {
            "x": -1.4575429340476418,
            "y": 1.3135176496314331,
            "z": 3.386074166088002
        }
    },
    "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/IVALUE_OFFSET": {
        "id": "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/IVALUE_OFFSET",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/IVALUE_OFFSET"
        ],
        "label": "IVALUE_OFFSET",
        "text": "IVALUE_OFFSET",
        "color": "#F6E146",
        "additional": "IVALUE_OFFSET",
        "position": {
            "x": -1.3264312213786176,
            "y": 1.3388550450016647,
            "z": 3.496944815997473
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/IVALUE_OFFSET": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/IVALUE_OFFSET",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/IVALUE_OFFSET"
        ],
        "label": "IVALUE_OFFSET",
        "text": "IVALUE_OFFSET",
        "color": "#F6E146",
        "additional": "IVALUE_OFFSET",
        "position": {
            "x": -1.314467954599285,
            "y": 1.2496148177233342,
            "z": 3.4304818009198517
        }
    },
    "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/ivalue": {
        "id": "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/ivalue",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/ivalue"
        ],
        "label": "ivalue",
        "text": "ivalue",
        "color": "#F6E146",
        "additional": "ivalue",
        "position": {
            "x": -1.4196424290038845,
            "y": 1.5144875383632757,
            "z": 3.358621166831953
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/ivalue": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/ivalue",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/ivalue"
        ],
        "label": "ivalue",
        "text": "ivalue",
        "color": "#F6E146",
        "additional": "ivalue",
        "position": {
            "x": -1.4095263812152883,
            "y": 1.4259269625675441,
            "z": 3.2914102032118664
        }
    },
    "com.github.benmanes.caffeine.cache.Caffeine/memberField/initialCapacity": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/memberField/initialCapacity",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/initialCapacity"
        ],
        "label": "initialCapacity",
        "text": "initialCapacity",
        "color": "#F6E146",
        "additional": "initialCapacity",
        "position": {
            "x": 0.161513861685334,
            "y": 2.4429208258410786,
            "z": 1.8610953818227869
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/initialCapacity": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/initialCapacity",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/memberField/initialCapacity"
        ],
        "label": "initialCapacity",
        "text": "initialCapacity",
        "color": "#F6E146",
        "additional": "initialCapacity",
        "position": {
            "x": 0.015172370781848965,
            "y": 2.4062531287947984,
            "z": 1.794239614595816
        }
    },
    "com.github.benmanes.caffeine.cache.Caffeine/memberField/maximumSize": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/memberField/maximumSize",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/maximumSize"
        ],
        "label": "maximumSize",
        "text": "maximumSize",
        "color": "#F6E146",
        "additional": "maximumSize",
        "position": {
            "x": 0.18808120480907853,
            "y": 2.3875410281549345,
            "z": 1.819988720119627
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/maximumSize": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/maximumSize",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/memberField/maximumSize"
        ],
        "label": "maximumSize",
        "text": "maximumSize",
        "color": "#F6E146",
        "additional": "maximumSize",
        "position": {
            "x": 0.04526372914440158,
            "y": 2.3457103210960097,
            "z": 1.747785758510629
        }
    },
    "com.github.benmanes.caffeine.cache.Caffeine/memberField/maximumWeight": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/memberField/maximumWeight",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/maximumWeight"
        ],
        "label": "maximumWeight",
        "text": "maximumWeight",
        "color": "#F6E146",
        "additional": "maximumWeight",
        "position": {
            "x": 0.16337057845117098,
            "y": 2.3421715432318155,
            "z": 1.876978151670708
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/maximumWeight": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/maximumWeight",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/memberField/maximumWeight"
        ],
        "label": "maximumWeight",
        "text": "maximumWeight",
        "color": "#F6E146",
        "additional": "maximumWeight",
        "position": {
            "x": 0.016561944626848124,
            "y": 2.2932239540611565,
            "z": 1.814399964998684
        }
    },
    "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/MASK": {
        "id": "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/MASK",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/MASK"
        ],
        "label": "MASK",
        "text": "MASK",
        "color": "#F6E146",
        "additional": "MASK",
        "position": {
            "x": 1.4441811922597196,
            "y": 3.1895047567493386,
            "z": 2.9125581490116494
        }
    },
    "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/MASK": {
        "id": "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/MASK",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/MASK"
        ],
        "label": "MASK",
        "text": "MASK",
        "color": "#F6E146",
        "additional": "MASK",
        "position": {
            "x": 1.4439502391762051,
            "y": 3.2943880897219495,
            "z": 2.9564089946437067
        }
    },
    "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/SIZE": {
        "id": "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/SIZE",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/SIZE"
        ],
        "label": "SIZE",
        "text": "SIZE",
        "color": "#F6E146",
        "additional": "SIZE",
        "position": {
            "x": 1.301230209768923,
            "y": 3.238235536976218,
            "z": 2.8721360979298503
        }
    },
    "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/SIZE": {
        "id": "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/SIZE",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/SIZE"
        ],
        "label": "SIZE",
        "text": "SIZE",
        "color": "#F6E146",
        "additional": "SIZE",
        "position": {
            "x": 1.3009600595109654,
            "y": 3.346907458545346,
            "z": 2.911885581416621
        }
    },
    "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/ITEMS": {
        "id": "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/ITEMS",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/ITEMS"
        ],
        "label": "ITEMS",
        "text": "ITEMS",
        "color": "#F6E146",
        "additional": "ITEMS",
        "position": {
            "x": 1.29810612265003,
            "y": 3.0841765100338727,
            "z": 3.0183029052434827
        }
    },
    "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/ITEMS": {
        "id": "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/ITEMS",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/ITEMS"
        ],
        "label": "ITEMS",
        "text": "ITEMS",
        "color": "#F6E146",
        "additional": "ITEMS",
        "position": {
            "x": 1.300288516345348,
            "y": 3.1900518819315637,
            "z": 3.0592768030617314
        }
    },
    "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ITEMS": {
        "id": "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ITEMS",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ITEMS",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ITEMS"
        ],
        "label": "ITEMS",
        "text": "ITEMS",
        "color": "#F6E146",
        "additional": "ITEMS",
        "position": {
            "x": -0.5022859509654045,
            "y": 1.9744185566490726,
            "z": 3.8464204477237147
        }
    },
    "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ITEMS": {
        "id": "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ITEMS",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ITEMS",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ITEMS"
        ],
        "label": "ITEMS",
        "text": "ITEMS",
        "color": "#F6E146",
        "additional": "ITEMS",
        "position": {
            "x": -0.5890593160050073,
            "y": 1.9260222179734199,
            "z": 3.8511050862896434
        }
    },
    "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ints": {
        "id": "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ints",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ints",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ints"
        ],
        "label": "ints",
        "text": "ints",
        "color": "#F6E146",
        "additional": "ints",
        "position": {
            "x": -0.6198589296702031,
            "y": 2.219173217760011,
            "z": 4.019728795309857
        }
    },
    "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ints": {
        "id": "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ints",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ints",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ints"
        ],
        "label": "ints",
        "text": "ints",
        "color": "#F6E146",
        "additional": "ints",
        "position": {
            "x": -0.7021296990712071,
            "y": 2.153819645551201,
            "z": 4.002783276368848
        }
    },
    "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/MASK": {
        "id": "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/MASK",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/MASK",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/MASK"
        ],
        "label": "MASK",
        "text": "MASK",
        "color": "#F6E146",
        "additional": "MASK",
        "position": {
            "x": -0.5406101764716982,
            "y": 2.3449828785060562,
            "z": 3.9086957826661206
        }
    },
    "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/MASK": {
        "id": "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/MASK",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/MASK",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/MASK"
        ],
        "label": "MASK",
        "text": "MASK",
        "color": "#F6E146",
        "additional": "MASK",
        "position": {
            "x": -0.6207126415205502,
            "y": 2.2717118692786844,
            "z": 3.8846761483644836
        }
    },
    "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/SIZE": {
        "id": "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/SIZE",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/SIZE",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/SIZE"
        ],
        "label": "SIZE",
        "text": "SIZE",
        "color": "#F6E146",
        "additional": "SIZE",
        "position": {
            "x": -0.65225504752602,
            "y": 1.9298134642947875,
            "z": 3.8119987243617053
        }
    },
    "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/SIZE": {
        "id": "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/SIZE",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/SIZE",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/SIZE"
        ],
        "label": "SIZE",
        "text": "SIZE",
        "color": "#F6E146",
        "additional": "SIZE",
        "position": {
            "x": -0.738602974372581,
            "y": 1.8743647354246373,
            "z": 3.805506910164161
        }
    },
    "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ITEMS": {
        "id": "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ITEMS",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ITEMS",
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ITEMS"
        ],
        "label": "ITEMS",
        "text": "ITEMS",
        "color": "#F6E146",
        "additional": "ITEMS",
        "position": {
            "x": -0.5889780981337873,
            "y": 2.0443466207627896,
            "z": 3.8149905707019673
        }
    },
    "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ints": {
        "id": "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ints",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ints",
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ints"
        ],
        "label": "ints",
        "text": "ints",
        "color": "#F6E146",
        "additional": "ints",
        "position": {
            "x": -0.7111476539762909,
            "y": 2.271309583632868,
            "z": 3.9843702789252293
        }
    },
    "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/MASK": {
        "id": "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/MASK",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/MASK",
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/MASK"
        ],
        "label": "MASK",
        "text": "MASK",
        "color": "#F6E146",
        "additional": "MASK",
        "position": {
            "x": -0.6342011681669124,
            "y": 2.3865872893604925,
            "z": 3.8766694885236905
        }
    },
    "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/SIZE": {
        "id": "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/SIZE",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/SIZE",
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/SIZE"
        ],
        "label": "SIZE",
        "text": "SIZE",
        "color": "#F6E146",
        "additional": "SIZE",
        "position": {
            "x": -0.7315735868529225,
            "y": 1.9875523393647916,
            "z": 3.7668695408642985
        }
    },
    "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/cacheType": {
        "id": "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/cacheType",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/cacheType"
        ],
        "label": "cacheType",
        "text": "cacheType",
        "color": "#F6E146",
        "additional": "cacheType",
        "position": {
            "x": -0.8531473165912384,
            "y": 2.0908048489012496,
            "z": 3.892925924379951
        }
    },
    "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/cacheType": {
        "id": "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/cacheType",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/cacheType"
        ],
        "label": "cacheType",
        "text": "cacheType",
        "color": "#F6E146",
        "additional": "cacheType",
        "position": {
            "x": -0.861771289639359,
            "y": 2.206497530522962,
            "z": 3.8637871483530892
        }
    },
    "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/cache": {
        "id": "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.8364085173836815,
            "y": 2.0628510589213245,
            "z": 3.796714761864268
        }
    },
    "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/cache": {
        "id": "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.8431649402819368,
            "y": 2.1773554084438578,
            "z": 3.7674817957958475
        }
    },
    "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/timeZone": {
        "id": "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/timeZone",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/timeZone"
        ],
        "label": "timeZone",
        "text": "timeZone",
        "color": "#F6E146",
        "additional": "timeZone",
        "position": {
            "x": -0.9333350157735916,
            "y": 2.2825301991894698,
            "z": 0.6887402036559999
        }
    },
    "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/timeZone": {
        "id": "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/timeZone",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/timeZone"
        ],
        "label": "timeZone",
        "text": "timeZone",
        "color": "#F6E146",
        "additional": "timeZone",
        "position": {
            "x": -0.9208354899576481,
            "y": 2.1700405902209674,
            "z": 0.7287300826290651
        }
    },
    "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/directory": {
        "id": "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/directory",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/directory"
        ],
        "label": "directory",
        "text": "directory",
        "color": "#F6E146",
        "additional": "directory",
        "position": {
            "x": -0.8788072913637921,
            "y": 2.297742044731634,
            "z": 0.7883186737375001
        }
    },
    "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/directory": {
        "id": "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/directory",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/directory"
        ],
        "label": "directory",
        "text": "directory",
        "color": "#F6E146",
        "additional": "directory",
        "position": {
            "x": -0.8770232040254919,
            "y": 2.186012078213751,
            "z": 0.8335114946615485
        }
    },
    "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/featureByIndex": {
        "id": "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/featureByIndex",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/featureByIndex"
        ],
        "label": "featureByIndex",
        "text": "featureByIndex",
        "color": "#F6E146",
        "additional": "featureByIndex",
        "position": {
            "x": -0.7371344665008617,
            "y": 2.3562631954709516,
            "z": 0.7483040593231851
        }
    },
    "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/featureByIndex": {
        "id": "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/featureByIndex",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/featureByIndex"
        ],
        "label": "featureByIndex",
        "text": "featureByIndex",
        "color": "#F6E146",
        "additional": "featureByIndex",
        "position": {
            "x": -0.7351265510975344,
            "y": 2.2438854776420865,
            "z": 0.7890701162861018
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/itemsPerSet": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/itemsPerSet",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/itemsPerSet",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/itemsPerSet"
        ],
        "label": "itemsPerSet",
        "text": "itemsPerSet",
        "color": "#F6E146",
        "additional": "itemsPerSet",
        "position": {
            "x": 0.03334547096618934,
            "y": 1.4530239309387865,
            "z": 2.8251163735918015
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/itemsPerSet": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/itemsPerSet",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/itemsPerSet",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/itemsPerSet"
        ],
        "label": "itemsPerSet",
        "text": "itemsPerSet",
        "color": "#F6E146",
        "additional": "itemsPerSet",
        "position": {
            "x": -0.023061617504078757,
            "y": 1.4252483558707914,
            "z": 2.75816881758668
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/hashFunc": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/hashFunc",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/hashFunc",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/hashFunc"
        ],
        "label": "hashFunc",
        "text": "hashFunc",
        "color": "#F6E146",
        "additional": "hashFunc",
        "position": {
            "x": 0.2223108168787391,
            "y": 1.5201108248220665,
            "z": 2.94663202465736
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/hashFunc": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/hashFunc",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/hashFunc",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/hashFunc"
        ],
        "label": "hashFunc",
        "text": "hashFunc",
        "color": "#F6E146",
        "additional": "hashFunc",
        "position": {
            "x": 0.17478864864786203,
            "y": 1.4687386642040319,
            "z": 2.877866171388139
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/chainIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/chainIndex",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/chainIndex"
        ],
        "label": "chainIndex",
        "text": "chainIndex",
        "color": "#F6E146",
        "additional": "chainIndex",
        "position": {
            "x": 0.10718804362809209,
            "y": 1.8622862267540543,
            "z": 2.8522853673830775
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/chainIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/chainIndex",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/chainIndex"
        ],
        "label": "chainIndex",
        "text": "chainIndex",
        "color": "#F6E146",
        "additional": "chainIndex",
        "position": {
            "x": 0.06372770096694236,
            "y": 1.8093062228847463,
            "z": 2.7832960749455458
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/rnd": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/rnd",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/rnd",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/rnd"
        ],
        "label": "rnd",
        "text": "rnd",
        "color": "#F6E146",
        "additional": "rnd",
        "position": {
            "x": 0.17672270712218197,
            "y": 1.6514995929450138,
            "z": 3.0485328106956784
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/rnd": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/rnd",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/rnd",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/rnd"
        ],
        "label": "rnd",
        "text": "rnd",
        "color": "#F6E146",
        "additional": "rnd",
        "position": {
            "x": 0.12865633630577644,
            "y": 1.5961402736462178,
            "z": 2.9809192497803703
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/lastIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/lastIndex",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/lastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/lastIndex"
        ],
        "label": "lastIndex",
        "text": "lastIndex",
        "color": "#F6E146",
        "additional": "lastIndex",
        "position": {
            "x": 0.20236462139470124,
            "y": 1.8280298476649453,
            "z": 2.9730183968250743
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/lastIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/lastIndex",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/lastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/lastIndex"
        ],
        "label": "lastIndex",
        "text": "lastIndex",
        "color": "#F6E146",
        "additional": "lastIndex",
        "position": {
            "x": 0.1556070046648088,
            "y": 1.794185921398791,
            "z": 2.902797002797131
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/itemsPerSet": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/itemsPerSet",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/itemsPerSet",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/itemsPerSet"
        ],
        "label": "itemsPerSet",
        "text": "itemsPerSet",
        "color": "#F6E146",
        "additional": "itemsPerSet",
        "position": {
            "x": -0.05112436633186457,
            "y": 1.4169231394793624,
            "z": 2.847273838259387
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/cache": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.07610201982313525,
            "y": 1.7143725748343537,
            "z": 2.9822803931612984
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/cache": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/cache",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.006902877914772398,
            "y": 1.6740671884159246,
            "z": 2.997858492097978
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/hashFunc": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/hashFunc",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/hashFunc",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/hashFunc"
        ],
        "label": "hashFunc",
        "text": "hashFunc",
        "color": "#F6E146",
        "additional": "hashFunc",
        "position": {
            "x": 0.14227377434392352,
            "y": 1.4536095324806015,
            "z": 2.9675774078194173
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/chainIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/chainIndex",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/chainIndex"
        ],
        "label": "chainIndex",
        "text": "chainIndex",
        "color": "#F6E146",
        "additional": "chainIndex",
        "position": {
            "x": 0.02234681665474847,
            "y": 1.8066110810705385,
            "z": 2.8686324559186454
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/rnd": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/rnd",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/rnd",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/rnd"
        ],
        "label": "rnd",
        "text": "rnd",
        "color": "#F6E146",
        "additional": "rnd",
        "position": {
            "x": 0.09123117757600152,
            "y": 1.595693046781926,
            "z": 3.0680673395156823
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/lastIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/lastIndex",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/lastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/lastIndex"
        ],
        "label": "lastIndex",
        "text": "lastIndex",
        "color": "#F6E146",
        "additional": "lastIndex",
        "position": {
            "x": 0.11746984517673908,
            "y": 1.7967243986368613,
            "z": 2.995164088934616
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInFilter": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInFilter",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInFilter",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInFilter"
        ],
        "label": "isInFilter",
        "text": "isInFilter",
        "color": "#F6E146",
        "additional": "isInFilter",
        "position": {
            "x": -1.5263168153252502,
            "y": 2.6671410634318864,
            "z": 1.5626796540604475
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInFilter": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInFilter",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInFilter",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInFilter"
        ],
        "label": "isInFilter",
        "text": "isInFilter",
        "color": "#F6E146",
        "additional": "isInFilter",
        "position": {
            "x": -1.4939745488441072,
            "y": 2.5646213265777136,
            "z": 1.543807523676177
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInMain": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInMain",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInMain",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInMain"
        ],
        "label": "isInMain",
        "text": "isInMain",
        "color": "#F6E146",
        "additional": "isInMain",
        "position": {
            "x": -1.491445433442335,
            "y": 2.983487735736685,
            "z": 1.3964986182886974
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInMain": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInMain",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInMain",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInMain"
        ],
        "label": "isInMain",
        "text": "isInMain",
        "color": "#F6E146",
        "additional": "isInMain",
        "position": {
            "x": -1.4757799845165946,
            "y": 2.868656301566881,
            "z": 1.3717517026970534
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/key": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/key",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/key",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -1.5354292166079673,
            "y": 3.093818889128351,
            "z": 1.5631444717455043
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/key": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/key",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/key",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -1.4923431795776776,
            "y": 2.98946435417667,
            "z": 1.5652909377694681
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInFilter": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInFilter",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInFilter",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInFilter"
        ],
        "label": "isInFilter",
        "text": "isInFilter",
        "color": "#F6E146",
        "additional": "isInFilter",
        "position": {
            "x": -1.4484584373103555,
            "y": 2.6449468756553514,
            "z": 1.4960468544825327
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInMain": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInMain",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInMain",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInMain"
        ],
        "label": "isInMain",
        "text": "isInMain",
        "color": "#F6E146",
        "additional": "isInMain",
        "position": {
            "x": -1.4208538096128083,
            "y": 2.955968974260478,
            "z": 1.3347586754515897
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/key": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/key",
        "size": 0.07453194763821624,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/key",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -1.4585464585207313,
            "y": 3.066256752367189,
            "z": 1.506958695003748
        }
    }
}