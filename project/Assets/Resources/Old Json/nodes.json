{
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/BoundedLocalCacheTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/BoundedLocalCacheTest.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest"
        ],
        "label": "BoundedLocalCacheTest.java",
        "text": "BoundedLocalCacheTest.java",
        "color": "#636363",
        "additional": "BoundedLocalCacheTest.java"
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/EvictionTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/EvictionTest.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest"
        ],
        "label": "EvictionTest.java",
        "text": "EvictionTest.java",
        "color": "#636363",
        "additional": "EvictionTest.java"
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/CacheWriter.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/CacheWriter.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.CacheWriter"
        ],
        "label": "CacheWriter.java",
        "text": "CacheWriter.java",
        "color": "#636363",
        "additional": "CacheWriter.java"
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/RemovalListener.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/RemovalListener.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.RemovalListener"
        ],
        "label": "RemovalListener.java",
        "text": "RemovalListener.java",
        "color": "#636363",
        "additional": "RemovalListener.java"
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Caffeine.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Caffeine.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine"
        ],
        "label": "Caffeine.java",
        "text": "Caffeine.java",
        "color": "#636363",
        "additional": "Caffeine.java"
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/CaffeineSpecTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/CaffeineSpecTest.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest"
        ],
        "label": "CaffeineSpecTest.java",
        "text": "CaffeineSpecTest.java",
        "color": "#636363",
        "additional": "CaffeineSpecTest.java"
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/ExpireAfterAccessTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/ExpireAfterAccessTest.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest"
        ],
        "label": "ExpireAfterAccessTest.java",
        "text": "ExpireAfterAccessTest.java",
        "color": "#636363",
        "additional": "ExpireAfterAccessTest.java"
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/ExpireAfterVarTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/ExpireAfterVarTest.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest"
        ],
        "label": "ExpireAfterVarTest.java",
        "text": "ExpireAfterVarTest.java",
        "color": "#636363",
        "additional": "ExpireAfterVarTest.java"
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/ExpireAfterWriteTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/ExpireAfterWriteTest.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest"
        ],
        "label": "ExpireAfterWriteTest.java",
        "text": "ExpireAfterWriteTest.java",
        "color": "#636363",
        "additional": "ExpireAfterWriteTest.java"
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Expiry.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Expiry.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry"
        ],
        "label": "Expiry.java",
        "text": "Expiry.java",
        "color": "#636363",
        "additional": "Expiry.java"
    },
    "caffeine/src/javaPoet/java/com/github/benmanes/caffeine/cache/LocalCacheFactoryGenerator.java": {
        "id": "caffeine/src/javaPoet/java/com/github/benmanes/caffeine/cache/LocalCacheFactoryGenerator.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator"
        ],
        "label": "LocalCacheFactoryGenerator.java",
        "text": "LocalCacheFactoryGenerator.java",
        "color": "#636363",
        "additional": "LocalCacheFactoryGenerator.java"
    },
    "caffeine/src/javaPoet/java/com/github/benmanes/caffeine/cache/NodeFactoryGenerator.java": {
        "id": "caffeine/src/javaPoet/java/com/github/benmanes/caffeine/cache/NodeFactoryGenerator.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator"
        ],
        "label": "NodeFactoryGenerator.java",
        "text": "NodeFactoryGenerator.java",
        "color": "#636363",
        "additional": "NodeFactoryGenerator.java"
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Pacer.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Pacer.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.Pacer"
        ],
        "label": "Pacer.java",
        "text": "Pacer.java",
        "color": "#636363",
        "additional": "Pacer.java"
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Scheduler.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Scheduler.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.Scheduler"
        ],
        "label": "Scheduler.java",
        "text": "Scheduler.java",
        "color": "#636363",
        "additional": "Scheduler.java"
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Policy.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Policy.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration"
        ],
        "label": "Policy.java",
        "text": "Policy.java",
        "color": "#636363",
        "additional": "Policy.java"
    },
    "guava/src/test/java/com/github/benmanes/caffeine/cache/QueueSanityTest.java": {
        "id": "guava/src/test/java/com/github/benmanes/caffeine/cache/QueueSanityTest.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest"
        ],
        "label": "QueueSanityTest.java",
        "text": "QueueSanityTest.java",
        "color": "#636363",
        "additional": "QueueSanityTest.java"
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/RefreshAfterWriteTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/RefreshAfterWriteTest.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest"
        ],
        "label": "RefreshAfterWriteTest.java",
        "text": "RefreshAfterWriteTest.java",
        "color": "#636363",
        "additional": "RefreshAfterWriteTest.java"
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/TimerWheelTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/TimerWheelTest.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest"
        ],
        "label": "TimerWheelTest.java",
        "text": "TimerWheelTest.java",
        "color": "#636363",
        "additional": "TimerWheelTest.java"
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/MpscGrowableArrayQueue.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/MpscGrowableArrayQueue.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess"
        ],
        "label": "MpscGrowableArrayQueue.java",
        "text": "MpscGrowableArrayQueue.java",
        "color": "#636363",
        "additional": "MpscGrowableArrayQueue.java"
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/issues/Issue30Test.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/issues/Issue30Test.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test"
        ],
        "label": "Issue30Test.java",
        "text": "Issue30Test.java",
        "color": "#636363",
        "additional": "Issue30Test.java"
    },
    "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/Synthetic.java": {
        "id": "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/Synthetic.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic"
        ],
        "label": "Synthetic.java",
        "text": "Synthetic.java",
        "color": "#636363",
        "additional": "Synthetic.java"
    },
    "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/admission/tinycache/TinyCache.java": {
        "id": "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/admission/tinycache/TinyCache.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache"
        ],
        "label": "TinyCache.java",
        "text": "TinyCache.java",
        "color": "#636363",
        "additional": "TinyCache.java"
    },
    "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/admission/tinycache/TinyCacheSketch.java": {
        "id": "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/admission/tinycache/TinyCacheSketch.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch"
        ],
        "label": "TinyCacheSketch.java",
        "text": "TinyCacheSketch.java",
        "color": "#636363",
        "additional": "TinyCacheSketch.java"
    },
    "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/admission/tinycache/TinyCacheWithGhostCache.java": {
        "id": "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/admission/tinycache/TinyCacheWithGhostCache.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache"
        ],
        "label": "TinyCacheWithGhostCache.java",
        "text": "TinyCacheWithGhostCache.java",
        "color": "#636363",
        "additional": "TinyCacheWithGhostCache.java"
    },
    "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/admission/tinycache/TinySetIndexing.java": {
        "id": "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/admission/tinycache/TinySetIndexing.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing"
        ],
        "label": "TinySetIndexing.java",
        "text": "TinySetIndexing.java",
        "color": "#636363",
        "additional": "TinySetIndexing.java"
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/stats/CacheStats.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/stats/CacheStats.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats"
        ],
        "label": "CacheStats.java",
        "text": "CacheStats.java",
        "color": "#636363",
        "additional": "CacheStats.java"
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/stats/CacheStatsTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/stats/CacheStatsTest.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest"
        ],
        "label": "CacheStatsTest.java",
        "text": "CacheStatsTest.java",
        "color": "#636363",
        "additional": "CacheStatsTest.java"
    },
    "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/policy/PolicyStats.java": {
        "id": "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/policy/PolicyStats.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats"
        ],
        "label": "PolicyStats.java",
        "text": "PolicyStats.java",
        "color": "#636363",
        "additional": "PolicyStats.java"
    },
    "jcache/src/main/java/com/github/benmanes/caffeine/jcache/event/EventDispatcher.java": {
        "id": "jcache/src/main/java/com/github/benmanes/caffeine/jcache/event/EventDispatcher.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher"
        ],
        "label": "EventDispatcher.java",
        "text": "EventDispatcher.java",
        "color": "#636363",
        "additional": "EventDispatcher.java"
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/testing/DescriptionBuilder.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/testing/DescriptionBuilder.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder"
        ],
        "label": "DescriptionBuilder.java",
        "text": "DescriptionBuilder.java",
        "color": "#636363",
        "additional": "DescriptionBuilder.java"
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/SingleConsumerQueueTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/SingleConsumerQueueTest.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.SingleConsumerQueueTest"
        ],
        "label": "SingleConsumerQueueTest.java",
        "text": "SingleConsumerQueueTest.java",
        "color": "#636363",
        "additional": "SingleConsumerQueueTest.java"
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/MpscGrowableArrayQueueTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/MpscGrowableArrayQueueTest.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest"
        ],
        "label": "MpscGrowableArrayQueueTest.java",
        "text": "MpscGrowableArrayQueueTest.java",
        "color": "#636363",
        "additional": "MpscGrowableArrayQueueTest.java"
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/base/UnsafeAccess.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/base/UnsafeAccess.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccess"
        ],
        "label": "UnsafeAccess.java",
        "text": "UnsafeAccess.java",
        "color": "#636363",
        "additional": "UnsafeAccess.java"
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/UnsafeAccess.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/UnsafeAccess.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccess"
        ],
        "label": "UnsafeAccess.java",
        "text": "UnsafeAccess.java",
        "color": "#636363",
        "additional": "UnsafeAccess.java"
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/base/UnsafeAccessTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/base/UnsafeAccessTest.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields"
        ],
        "label": "UnsafeAccessTest.java",
        "text": "UnsafeAccessTest.java",
        "color": "#636363",
        "additional": "UnsafeAccessTest.java"
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/UnsafeAccessTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/UnsafeAccessTest.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields"
        ],
        "label": "UnsafeAccessTest.java",
        "text": "UnsafeAccessTest.java",
        "color": "#636363",
        "additional": "UnsafeAccessTest.java"
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/CaffeineSpec.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/CaffeineSpec.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpec"
        ],
        "label": "CaffeineSpec.java",
        "text": "CaffeineSpec.java",
        "color": "#636363",
        "additional": "CaffeineSpec.java"
    },
    "caffeine/src/jmh/java/com/github/benmanes/caffeine/cache/ComputeBenchmark.java": {
        "id": "caffeine/src/jmh/java/com/github/benmanes/caffeine/cache/ComputeBenchmark.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.ComputeBenchmark"
        ],
        "label": "ComputeBenchmark.java",
        "text": "ComputeBenchmark.java",
        "color": "#636363",
        "additional": "ComputeBenchmark.java"
    },
    "caffeine/src/jmh/java/com/github/benmanes/caffeine/profiler/CacheProfiler.java": {
        "id": "caffeine/src/jmh/java/com/github/benmanes/caffeine/profiler/CacheProfiler.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.profiler.CacheProfiler"
        ],
        "label": "CacheProfiler.java",
        "text": "CacheProfiler.java",
        "color": "#636363",
        "additional": "CacheProfiler.java"
    },
    "caffeine/src/jmh/java/com/github/benmanes/caffeine/cache/FrequencySketchBenchmark.java": {
        "id": "caffeine/src/jmh/java/com/github/benmanes/caffeine/cache/FrequencySketchBenchmark.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark"
        ],
        "label": "FrequencySketchBenchmark.java",
        "text": "FrequencySketchBenchmark.java",
        "color": "#636363",
        "additional": "FrequencySketchBenchmark.java"
    },
    "caffeine/src/jmh/java/com/github/benmanes/caffeine/cache/GetPutBenchmark.java": {
        "id": "caffeine/src/jmh/java/com/github/benmanes/caffeine/cache/GetPutBenchmark.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.GetPutBenchmark"
        ],
        "label": "GetPutBenchmark.java",
        "text": "GetPutBenchmark.java",
        "color": "#636363",
        "additional": "GetPutBenchmark.java"
    },
    "caffeine/src/jmh/java/com/github/benmanes/caffeine/cache/PutRemoveBenchmark.java": {
        "id": "caffeine/src/jmh/java/com/github/benmanes/caffeine/cache/PutRemoveBenchmark.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark"
        ],
        "label": "PutRemoveBenchmark.java",
        "text": "PutRemoveBenchmark.java",
        "color": "#636363",
        "additional": "PutRemoveBenchmark.java"
    },
    "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/policy/irr/FrdPolicy.java": {
        "id": "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/policy/irr/FrdPolicy.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node"
        ],
        "label": "FrdPolicy.java",
        "text": "FrdPolicy.java",
        "color": "#636363",
        "additional": "FrdPolicy.java"
    },
    "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/policy/irr/HillClimberFrdPolicy.java": {
        "id": "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/policy/irr/HillClimberFrdPolicy.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node"
        ],
        "label": "HillClimberFrdPolicy.java",
        "text": "HillClimberFrdPolicy.java",
        "color": "#636363",
        "additional": "HillClimberFrdPolicy.java"
    },
    "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/policy/irr/IndicatorFrdPolicy.java": {
        "id": "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/policy/irr/IndicatorFrdPolicy.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node"
        ],
        "label": "IndicatorFrdPolicy.java",
        "text": "IndicatorFrdPolicy.java",
        "color": "#636363",
        "additional": "IndicatorFrdPolicy.java"
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)"
        ],
        "label": "BoundedLocalCacheTest",
        "text": "BoundedLocalCacheTest",
        "color": "#6D6921",
        "additional": "BoundedLocalCacheTest"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)"
        ],
        "label": "EvictionTest",
        "text": "EvictionTest",
        "color": "#6D6921",
        "additional": "EvictionTest"
    },
    "com.github.benmanes.caffeine.cache.CacheWriter": {
        "id": "com.github.benmanes.caffeine.cache.CacheWriter",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)"
        ],
        "label": "CacheWriter",
        "text": "CacheWriter",
        "color": "#6D6921",
        "additional": "CacheWriter"
    },
    "com.github.benmanes.caffeine.cache.RemovalListener": {
        "id": "com.github.benmanes.caffeine.cache.RemovalListener",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)"
        ],
        "label": "RemovalListener",
        "text": "RemovalListener",
        "color": "#6D6921",
        "additional": "RemovalListener"
    },
    "com.github.benmanes.caffeine.cache.Caffeine": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/memberField/initialCapacity",
            "com.github.benmanes.caffeine.cache.Caffeine/memberField/maximumSize",
            "com.github.benmanes.caffeine.cache.Caffeine/memberField/maximumWeight",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)"
        ],
        "label": "Caffeine",
        "text": "Caffeine",
        "color": "#6D6921",
        "additional": "Caffeine"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)"
        ],
        "label": "CaffeineSpecTest",
        "text": "CaffeineSpecTest",
        "color": "#6D6921",
        "additional": "CaffeineSpecTest"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)"
        ],
        "label": "ExpireAfterAccessTest",
        "text": "ExpireAfterAccessTest",
        "color": "#6D6921",
        "additional": "ExpireAfterAccessTest"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)"
        ],
        "label": "ExpireAfterVarTest",
        "text": "ExpireAfterVarTest",
        "color": "#6D6921",
        "additional": "ExpireAfterVarTest"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)"
        ],
        "label": "ExpireAfterWriteTest",
        "text": "ExpireAfterWriteTest",
        "color": "#6D6921",
        "additional": "ExpireAfterWriteTest"
    },
    "com.github.benmanes.caffeine.cache.Expiry": {
        "id": "com.github.benmanes.caffeine.cache.Expiry",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)"
        ],
        "label": "Expiry",
        "text": "Expiry",
        "color": "#6D6921",
        "additional": "Expiry"
    },
    "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator": {
        "id": "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/timeZone",
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/directory",
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/featureByIndex",
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)"
        ],
        "label": "LocalCacheFactoryGenerator",
        "text": "LocalCacheFactoryGenerator",
        "color": "#6D6921",
        "additional": "LocalCacheFactoryGenerator"
    },
    "com.github.benmanes.caffeine.cache.NodeFactoryGenerator": {
        "id": "com.github.benmanes.caffeine.cache.NodeFactoryGenerator",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/timeZone",
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/directory",
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/featureByIndex",
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)"
        ],
        "label": "NodeFactoryGenerator",
        "text": "NodeFactoryGenerator",
        "color": "#6D6921",
        "additional": "NodeFactoryGenerator"
    },
    "com.github.benmanes.caffeine.cache.Pacer": {
        "id": "com.github.benmanes.caffeine.cache.Pacer",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)"
        ],
        "label": "Pacer",
        "text": "Pacer",
        "color": "#6D6921",
        "additional": "Pacer"
    },
    "com.github.benmanes.caffeine.cache.Scheduler": {
        "id": "com.github.benmanes.caffeine.cache.Scheduler",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)"
        ],
        "label": "Scheduler",
        "text": "Scheduler",
        "color": "#6D6921",
        "additional": "Scheduler"
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)"
        ],
        "label": "VarExpiration",
        "text": "VarExpiration",
        "color": "#6D6921",
        "additional": "VarExpiration"
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)"
        ],
        "label": "QueueSanityTest",
        "text": "QueueSanityTest",
        "color": "#6D6921",
        "additional": "QueueSanityTest"
    },
    "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest": {
        "id": "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)"
        ],
        "label": "RefreshAfterWriteTest",
        "text": "RefreshAfterWriteTest",
        "color": "#6D6921",
        "additional": "RefreshAfterWriteTest"
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)"
        ],
        "label": "TimerWheelTest",
        "text": "TimerWheelTest",
        "color": "#6D6921",
        "additional": "TimerWheelTest"
    },
    "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)"
        ],
        "label": "UnsafeRefArrayAccess",
        "text": "UnsafeRefArrayAccess",
        "color": "#6D6921",
        "additional": "UnsafeRefArrayAccess"
    },
    "com.github.benmanes.caffeine.cache.issues.Issue30Test": {
        "id": "com.github.benmanes.caffeine.cache.issues.Issue30Test",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)"
        ],
        "label": "Issue30Test",
        "text": "Issue30Test",
        "color": "#6D6921",
        "additional": "Issue30Test"
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)"
        ],
        "label": "Synthetic",
        "text": "Synthetic",
        "color": "#6D6921",
        "additional": "Synthetic"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/itemsPerSet",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/hashFunc",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/rnd",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/lastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/cache",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)"
        ],
        "label": "TinyCache",
        "text": "TinyCache",
        "color": "#6D6921",
        "additional": "TinyCache"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/itemsPerSet",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/hashFunc",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/rnd",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/lastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)"
        ],
        "label": "TinyCacheSketch",
        "text": "TinyCacheSketch",
        "color": "#6D6921",
        "additional": "TinyCacheSketch"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/itemsPerSet",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/cache",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/hashFunc",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/rnd",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/lastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)"
        ],
        "label": "TinyCacheWithGhostCache",
        "text": "TinyCacheWithGhostCache",
        "color": "#6D6921",
        "additional": "TinyCacheWithGhostCache"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)"
        ],
        "label": "TinySetIndexing",
        "text": "TinySetIndexing",
        "color": "#6D6921",
        "additional": "TinySetIndexing"
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats",
        "size": 3,
        "edges": [
            null,
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)"
        ],
        "label": "CacheStats",
        "text": "CacheStats",
        "color": "#6D6921",
        "additional": "CacheStats"
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStatsTest": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStatsTest",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)"
        ],
        "label": "CacheStatsTest",
        "text": "CacheStatsTest",
        "color": "#6D6921",
        "additional": "CacheStatsTest"
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats",
        "size": 3,
        "edges": [
            null
        ],
        "label": "PolicyStats",
        "text": "PolicyStats",
        "color": "#6D6921",
        "additional": "PolicyStats"
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)"
        ],
        "label": "EventDispatcher",
        "text": "EventDispatcher",
        "color": "#6D6921",
        "additional": "EventDispatcher"
    },
    "com.github.benmanes.caffeine.testing.DescriptionBuilder": {
        "id": "com.github.benmanes.caffeine.testing.DescriptionBuilder",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)"
        ],
        "label": "DescriptionBuilder",
        "text": "DescriptionBuilder",
        "color": "#6D6921",
        "additional": "DescriptionBuilder"
    },
    "com.github.benmanes.caffeine.SingleConsumerQueueTest": {
        "id": "com.github.benmanes.caffeine.SingleConsumerQueueTest",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/NUM_PRODUCERS",
            "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/POPULATED_SIZE",
            "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/PRODUCE"
        ],
        "label": "SingleConsumerQueueTest",
        "text": "SingleConsumerQueueTest",
        "color": "#6D6921",
        "additional": "SingleConsumerQueueTest"
    },
    "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest": {
        "id": "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/NUM_PRODUCERS",
            "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/POPULATED_SIZE",
            "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/PRODUCE"
        ],
        "label": "SingleConsumerQueueTest",
        "text": "SingleConsumerQueueTest",
        "color": "#6D6921",
        "additional": "SingleConsumerQueueTest"
    },
    "com.github.benmanes.caffeine.base.UnsafeAccess": {
        "id": "com.github.benmanes.caffeine.base.UnsafeAccess",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/UNSAFE",
            "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/ANDROID",
            "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/OPEN_JDK"
        ],
        "label": "UnsafeAccess",
        "text": "UnsafeAccess",
        "color": "#6D6921",
        "additional": "UnsafeAccess"
    },
    "com.github.benmanes.caffeine.cache.UnsafeAccess": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeAccess",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/UNSAFE",
            "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/ANDROID",
            "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/OPEN_JDK"
        ],
        "label": "UnsafeAccess",
        "text": "UnsafeAccess",
        "color": "#6D6921",
        "additional": "UnsafeAccess"
    },
    "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields": {
        "id": "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/lvalue",
            "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/LVALUE_OFFSET",
            "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/IVALUE_OFFSET",
            "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/ivalue"
        ],
        "label": "RelaxedFields",
        "text": "RelaxedFields",
        "color": "#6D6921",
        "additional": "RelaxedFields"
    },
    "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/lvalue",
            "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/LVALUE_OFFSET",
            "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/IVALUE_OFFSET",
            "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/ivalue"
        ],
        "label": "RelaxedFields",
        "text": "RelaxedFields",
        "color": "#6D6921",
        "additional": "RelaxedFields"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpec": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpec",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/initialCapacity",
            "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/maximumSize",
            "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/maximumWeight"
        ],
        "label": "Caffeine",
        "text": "Caffeine",
        "color": "#6D6921",
        "additional": "Caffeine"
    },
    "com.github.benmanes.caffeine.cache.ComputeBenchmark": {
        "id": "com.github.benmanes.caffeine.cache.ComputeBenchmark",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/MASK",
            "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/SIZE",
            "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/ITEMS"
        ],
        "label": "ComputeBenchmark",
        "text": "ComputeBenchmark",
        "color": "#6D6921",
        "additional": "ComputeBenchmark"
    },
    "com.github.benmanes.caffeine.profiler.CacheProfiler": {
        "id": "com.github.benmanes.caffeine.profiler.CacheProfiler",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/MASK",
            "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/SIZE",
            "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/ITEMS"
        ],
        "label": "ComputeBenchmark",
        "text": "ComputeBenchmark",
        "color": "#6D6921",
        "additional": "ComputeBenchmark"
    },
    "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark": {
        "id": "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ITEMS",
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ints",
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/MASK",
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/SIZE"
        ],
        "label": "FrequencySketchBenchmark",
        "text": "FrequencySketchBenchmark",
        "color": "#6D6921",
        "additional": "FrequencySketchBenchmark"
    },
    "com.github.benmanes.caffeine.cache.GetPutBenchmark": {
        "id": "com.github.benmanes.caffeine.cache.GetPutBenchmark",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ITEMS",
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ints",
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/MASK",
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/SIZE",
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/cacheType",
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/cache"
        ],
        "label": "FrequencySketchBenchmark",
        "text": "FrequencySketchBenchmark",
        "color": "#6D6921",
        "additional": "FrequencySketchBenchmark"
    },
    "com.github.benmanes.caffeine.cache.PutRemoveBenchmark": {
        "id": "com.github.benmanes.caffeine.cache.PutRemoveBenchmark",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ITEMS",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ints",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/MASK",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/SIZE",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/cacheType",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/cache"
        ],
        "label": "FrequencySketchBenchmark",
        "text": "FrequencySketchBenchmark",
        "color": "#6D6921",
        "additional": "FrequencySketchBenchmark"
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInFilter",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInMain",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/key"
        ],
        "label": "Node",
        "text": "Node",
        "color": "#6D6921",
        "additional": "Node"
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInFilter",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInMain",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/key"
        ],
        "label": "Node",
        "text": "Node",
        "color": "#6D6921",
        "additional": "Node"
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInFilter",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInMain",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/key"
        ],
        "label": "Node",
        "text": "Node",
        "color": "#6D6921",
        "additional": "Node"
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "drain_blocksOrderedMap",
        "text": "drain_blocksOrderedMap",
        "color": "#CBCBAE",
        "additional": "drain_blocksOrderedMap"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "maximumSize_increase_max",
        "text": "maximumSize_increase_max",
        "color": "#CBCBAE",
        "additional": "maximumSize_increase_max"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "evict",
        "text": "evict",
        "color": "#CBCBAE",
        "additional": "evict"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "maximumSize_decrease_min",
        "text": "maximumSize_decrease_min",
        "color": "#CBCBAE",
        "additional": "maximumSize_decrease_min"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "weightOf_absent",
        "text": "weightOf_absent",
        "color": "#CBCBAE",
        "additional": "weightOf_absent"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "maximumSize_decrease",
        "text": "maximumSize_decrease",
        "color": "#CBCBAE",
        "additional": "maximumSize_decrease"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "maximumSize_increase",
        "text": "maximumSize_increase",
        "color": "#CBCBAE",
        "additional": "maximumSize_increase"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "weightedSize",
        "text": "weightedSize",
        "color": "#CBCBAE",
        "additional": "weightedSize"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "coldest_snapshot",
        "text": "coldest_snapshot",
        "color": "#CBCBAE",
        "additional": "coldest_snapshot"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "hottest_snapshot",
        "text": "hottest_snapshot",
        "color": "#CBCBAE",
        "additional": "hottest_snapshot"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "weightOf",
        "text": "weightOf",
        "color": "#CBCBAE",
        "additional": "weightOf"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "maximumSize_decrease_negative",
        "text": "maximumSize_decrease_negative",
        "color": "#CBCBAE",
        "additional": "maximumSize_decrease_negative"
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect"
        ],
        "label": "checkReorder",
        "text": "checkReorder",
        "color": "#CBCBAE",
        "additional": "checkReorder"
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect"
        ],
        "label": "checkEvict",
        "text": "checkEvict",
        "color": "#CBCBAE",
        "additional": "checkEvict"
    },
    "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)": {
        "id": "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key",
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key",
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value",
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value",
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause",
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause"
        ],
        "label": "delete",
        "text": "delete",
        "color": "#CBCBAE",
        "additional": "delete"
    },
    "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)": {
        "id": "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key",
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key",
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value",
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value",
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause",
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause"
        ],
        "label": "onRemoval",
        "text": "onRemoval",
        "color": "#CBCBAE",
        "additional": "onRemoval"
    },
    "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args"
        ],
        "label": "requireArgument",
        "text": "requireArgument",
        "color": "#CBCBAE",
        "additional": "requireArgument"
    },
    "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args"
        ],
        "label": "requireState",
        "text": "requireState",
        "color": "#CBCBAE",
        "additional": "requireState"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "checkInitialCapacity",
        "text": "checkInitialCapacity",
        "color": "#CBCBAE",
        "additional": "checkInitialCapacity"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "checkExpireAfterAccess",
        "text": "checkExpireAfterAccess",
        "color": "#CBCBAE",
        "additional": "checkExpireAfterAccess"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "checkExpireAfterWrite",
        "text": "checkExpireAfterWrite",
        "color": "#CBCBAE",
        "additional": "checkExpireAfterWrite"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "checkMaximumWeight",
        "text": "checkMaximumWeight",
        "color": "#CBCBAE",
        "additional": "checkMaximumWeight"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "checkMaximumSize",
        "text": "checkMaximumSize",
        "color": "#CBCBAE",
        "additional": "checkMaximumSize"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "checkWeakKeys",
        "text": "checkWeakKeys",
        "color": "#CBCBAE",
        "additional": "checkWeakKeys"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "checkRefreshAfterWrite",
        "text": "checkRefreshAfterWrite",
        "color": "#CBCBAE",
        "additional": "checkRefreshAfterWrite"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder"
        ],
        "label": "checkValueStrength",
        "text": "checkValueStrength",
        "color": "#CBCBAE",
        "additional": "checkValueStrength"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString"
        ],
        "label": "runTest",
        "text": "runTest",
        "color": "#CBCBAE",
        "additional": "runTest"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString"
        ],
        "label": "toSpec",
        "text": "toSpec",
        "color": "#CBCBAE",
        "additional": "toSpec"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "replaceConditionally_changeWeight",
        "text": "replaceConditionally_changeWeight",
        "color": "#CBCBAE",
        "additional": "replaceConditionally_changeWeight"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "removeConditionally",
        "text": "removeConditionally",
        "color": "#CBCBAE",
        "additional": "removeConditionally"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "put_sameWeight",
        "text": "put_sameWeight",
        "color": "#CBCBAE",
        "additional": "put_sameWeight"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "replace_changeWeight",
        "text": "replace_changeWeight",
        "color": "#CBCBAE",
        "additional": "replace_changeWeight"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "replaceConditionally_fails",
        "text": "replaceConditionally_fails",
        "color": "#CBCBAE",
        "additional": "replaceConditionally_fails"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "invalidateAll",
        "text": "invalidateAll",
        "color": "#CBCBAE",
        "additional": "invalidateAll"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "replace_sameWeight",
        "text": "replace_sameWeight",
        "color": "#CBCBAE",
        "additional": "replace_sameWeight"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "remove",
        "text": "remove",
        "color": "#CBCBAE",
        "additional": "remove"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "replaceConditionally_sameWeight",
        "text": "replaceConditionally_sameWeight",
        "color": "#CBCBAE",
        "additional": "replaceConditionally_sameWeight"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "put_changeWeight",
        "text": "put_changeWeight",
        "color": "#CBCBAE",
        "additional": "put_changeWeight"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "removeConditionally_fails",
        "text": "removeConditionally_fails",
        "color": "#CBCBAE",
        "additional": "removeConditionally_fails"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "put",
        "text": "put",
        "color": "#CBCBAE",
        "additional": "put"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "put_asyncWeight",
        "text": "put_asyncWeight",
        "color": "#CBCBAE",
        "additional": "put_asyncWeight"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "evict_zero_async",
        "text": "evict_zero_async",
        "color": "#CBCBAE",
        "additional": "evict_zero_async"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess"
        ],
        "label": "setExpiresAfter_duration",
        "text": "setExpiresAfter_duration",
        "color": "#CBCBAE",
        "additional": "setExpiresAfter_duration"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess"
        ],
        "label": "oldest_snapshot",
        "text": "oldest_snapshot",
        "color": "#CBCBAE",
        "additional": "oldest_snapshot"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess"
        ],
        "label": "setExpiresAfter",
        "text": "setExpiresAfter",
        "color": "#CBCBAE",
        "additional": "setExpiresAfter"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess"
        ],
        "label": "youngest_snapshot",
        "text": "youngest_snapshot",
        "color": "#CBCBAE",
        "additional": "youngest_snapshot"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "putIfAbsent_nullKey",
        "text": "putIfAbsent_nullKey",
        "color": "#CBCBAE",
        "additional": "putIfAbsent_nullKey"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "getExpiresAfter",
        "text": "getExpiresAfter",
        "color": "#CBCBAE",
        "additional": "getExpiresAfter"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "putIfAbsent_nullValue",
        "text": "putIfAbsent_nullValue",
        "color": "#CBCBAE",
        "additional": "putIfAbsent_nullValue"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "put_replace",
        "text": "put_replace",
        "color": "#CBCBAE",
        "additional": "put_replace"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "setExpiresAfter",
        "text": "setExpiresAfter",
        "color": "#CBCBAE",
        "additional": "setExpiresAfter"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "getExpiresAfter_duration",
        "text": "getExpiresAfter_duration",
        "color": "#CBCBAE",
        "additional": "getExpiresAfter_duration"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "put_negativeDuration",
        "text": "put_negativeDuration",
        "color": "#CBCBAE",
        "additional": "put_negativeDuration"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "putIfAbsent_negativeDuration",
        "text": "putIfAbsent_negativeDuration",
        "color": "#CBCBAE",
        "additional": "putIfAbsent_negativeDuration"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "oldest_snapshot",
        "text": "oldest_snapshot",
        "color": "#CBCBAE",
        "additional": "oldest_snapshot"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "putIfAbsent_nullTimeUnit",
        "text": "putIfAbsent_nullTimeUnit",
        "color": "#CBCBAE",
        "additional": "putIfAbsent_nullTimeUnit"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "put_nullDuration",
        "text": "put_nullDuration",
        "color": "#CBCBAE",
        "additional": "put_nullDuration"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "putIfAbsent_insert",
        "text": "putIfAbsent_insert",
        "color": "#CBCBAE",
        "additional": "putIfAbsent_insert"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "putIfAbsent_present",
        "text": "putIfAbsent_present",
        "color": "#CBCBAE",
        "additional": "putIfAbsent_present"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "youngest_snapshot",
        "text": "youngest_snapshot",
        "color": "#CBCBAE",
        "additional": "youngest_snapshot"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "put_nullValue",
        "text": "put_nullValue",
        "color": "#CBCBAE",
        "additional": "put_nullValue"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "put_insert",
        "text": "put_insert",
        "color": "#CBCBAE",
        "additional": "put_insert"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "setExpiresAfter_duration",
        "text": "setExpiresAfter_duration",
        "color": "#CBCBAE",
        "additional": "setExpiresAfter_duration"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "put_nullTimeUnit",
        "text": "put_nullTimeUnit",
        "color": "#CBCBAE",
        "additional": "put_nullTimeUnit"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "putIfAbsent_nullDuration",
        "text": "putIfAbsent_nullDuration",
        "color": "#CBCBAE",
        "additional": "putIfAbsent_nullDuration"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "put_nullKey",
        "text": "put_nullKey",
        "color": "#CBCBAE",
        "additional": "put_nullKey"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably"
        ],
        "label": "put_insert_replaceExpired_expiryFails",
        "text": "put_insert_replaceExpired_expiryFails",
        "color": "#CBCBAE",
        "additional": "put_insert_replaceExpired_expiryFails"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably"
        ],
        "label": "put_update_expiryFails",
        "text": "put_update_expiryFails",
        "color": "#CBCBAE",
        "additional": "put_update_expiryFails"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite"
        ],
        "label": "youngest_snapshot",
        "text": "youngest_snapshot",
        "color": "#CBCBAE",
        "additional": "youngest_snapshot"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite"
        ],
        "label": "oldest_snapshot",
        "text": "oldest_snapshot",
        "color": "#CBCBAE",
        "additional": "oldest_snapshot"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite"
        ],
        "label": "setExpiresAfter_duration",
        "text": "setExpiresAfter_duration",
        "color": "#CBCBAE",
        "additional": "setExpiresAfter_duration"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite"
        ],
        "label": "setExpiresAfter",
        "text": "setExpiresAfter",
        "color": "#CBCBAE",
        "additional": "setExpiresAfter"
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration"
        ],
        "label": "expireAfterUpdate",
        "text": "expireAfterUpdate",
        "color": "#CBCBAE",
        "additional": "expireAfterUpdate"
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentTime"
        ],
        "label": "expireAfterCreate",
        "text": "expireAfterCreate",
        "color": "#CBCBAE",
        "additional": "expireAfterCreate"
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/currentTime"
        ],
        "label": "expireAfterRead",
        "text": "expireAfterRead",
        "color": "#CBCBAE",
        "additional": "expireAfterRead"
    },
    "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)": {
        "id": "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className",
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className",
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal",
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal",
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features",
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features"
        ],
        "label": "makeLocalCacheSpec",
        "text": "makeLocalCacheSpec",
        "color": "#CBCBAE",
        "additional": "makeLocalCacheSpec"
    },
    "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)": {
        "id": "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className",
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className",
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal",
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal",
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features",
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features"
        ],
        "label": "makeNodeSpec",
        "text": "makeNodeSpec",
        "color": "#CBCBAE",
        "additional": "makeNodeSpec"
    },
    "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)": {
        "id": "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/executor",
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/executor",
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/command",
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/command",
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/delay",
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/delay"
        ],
        "label": "schedule",
        "text": "schedule",
        "color": "#CBCBAE",
        "additional": "schedule"
    },
    "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)": {
        "id": "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/executor",
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/executor",
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/command",
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/command",
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/delay",
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/delay"
        ],
        "label": "schedule",
        "text": "schedule",
        "color": "#CBCBAE",
        "additional": "schedule"
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit"
        ],
        "label": "setExpiresAfter",
        "text": "setExpiresAfter",
        "color": "#CBCBAE",
        "additional": "setExpiresAfter"
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit"
        ],
        "label": "putIfAbsent",
        "text": "putIfAbsent",
        "color": "#CBCBAE",
        "additional": "putIfAbsent"
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit"
        ],
        "label": "put",
        "text": "put",
        "color": "#CBCBAE",
        "additional": "put"
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/duration"
        ],
        "label": "put",
        "text": "put",
        "color": "#CBCBAE",
        "additional": "put"
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/duration"
        ],
        "label": "putIfAbsent",
        "text": "putIfAbsent",
        "color": "#CBCBAE",
        "additional": "putIfAbsent"
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q"
        ],
        "label": "makeAtomic",
        "text": "makeAtomic",
        "color": "#CBCBAE",
        "additional": "makeAtomic"
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q"
        ],
        "label": "makeQueue",
        "text": "makeQueue",
        "color": "#CBCBAE",
        "additional": "makeQueue"
    },
    "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)": {
        "id": "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite"
        ],
        "label": "youngest_snapshot",
        "text": "youngest_snapshot",
        "color": "#CBCBAE",
        "additional": "youngest_snapshot"
    },
    "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)": {
        "id": "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite"
        ],
        "label": "oldest_snapshot",
        "text": "oldest_snapshot",
        "color": "#CBCBAE",
        "additional": "oldest_snapshot"
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/clock",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/clock",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/duration",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/duration",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/times",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/times"
        ],
        "label": "getExpirationDelay_fuzzy",
        "text": "getExpirationDelay_fuzzy",
        "color": "#CBCBAE",
        "additional": "getExpirationDelay_fuzzy"
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/clock",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/clock",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/duration",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/duration",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/times",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/times"
        ],
        "label": "schedule_fuzzy",
        "text": "schedule_fuzzy",
        "color": "#CBCBAE",
        "additional": "schedule_fuzzy"
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer"
        ],
        "label": "snapshot",
        "text": "snapshot",
        "color": "#CBCBAE",
        "additional": "snapshot"
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer"
        ],
        "label": "snapshot",
        "text": "snapshot",
        "color": "#CBCBAE",
        "additional": "snapshot"
    },
    "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/buffer",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/buffer",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/offset",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/offset",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/e",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/e"
        ],
        "label": "soElement",
        "text": "soElement",
        "color": "#CBCBAE",
        "additional": "soElement"
    },
    "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/buffer",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/buffer",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/offset",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/offset",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/e",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/e"
        ],
        "label": "spElement",
        "text": "spElement",
        "color": "#CBCBAE",
        "additional": "spElement"
    },
    "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)": {
        "id": "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad"
        ],
        "label": "expiration",
        "text": "expiration",
        "color": "#CBCBAE",
        "additional": "expiration"
    },
    "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)": {
        "id": "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad"
        ],
        "label": "initialValues",
        "text": "initialValues",
        "color": "#CBCBAE",
        "additional": "initialValues"
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/lowerBound",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/lowerBound",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/upperBound",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/upperBound",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/events",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/events"
        ],
        "label": "hotspot",
        "text": "hotspot",
        "color": "#CBCBAE",
        "additional": "hotspot"
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/lowerBound",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/lowerBound",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/upperBound",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/upperBound",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/events",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/events"
        ],
        "label": "uniform",
        "text": "uniform",
        "color": "#CBCBAE",
        "additional": "uniform"
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/items",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/items",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/constant",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/constant",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/events",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/events"
        ],
        "label": "zipfian",
        "text": "zipfian",
        "color": "#CBCBAE",
        "additional": "zipfian"
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/items",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/items",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/constant",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/constant",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/events",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/events"
        ],
        "label": "scrambledZipfian",
        "text": "scrambledZipfian",
        "color": "#CBCBAE",
        "additional": "scrambledZipfian"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset"
        ],
        "label": "replace",
        "text": "replace",
        "color": "#CBCBAE",
        "additional": "replace"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset"
        ],
        "label": "replace",
        "text": "replace",
        "color": "#CBCBAE",
        "additional": "replace"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset"
        ],
        "label": "replace",
        "text": "replace",
        "color": "#CBCBAE",
        "additional": "replace"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/delta",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta"
        ],
        "label": "replaceItems",
        "text": "replaceItems",
        "color": "#CBCBAE",
        "additional": "replaceItems"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/delta",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta"
        ],
        "label": "replaceItems",
        "text": "replaceItems",
        "color": "#CBCBAE",
        "additional": "replaceItems"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/delta"
        ],
        "label": "replaceItems",
        "text": "replaceItems",
        "color": "#CBCBAE",
        "additional": "replaceItems"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex"
        ],
        "label": "getChainAtOffset",
        "text": "getChainAtOffset",
        "color": "#CBCBAE",
        "additional": "getChainAtOffset"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex"
        ],
        "label": "getChainStart",
        "text": "getChainStart",
        "color": "#CBCBAE",
        "additional": "getChainStart"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex"
        ],
        "label": "removeItem",
        "text": "removeItem",
        "color": "#CBCBAE",
        "additional": "removeItem"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex"
        ],
        "label": "getChain",
        "text": "getChain",
        "color": "#CBCBAE",
        "additional": "getChain"
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/hitCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/hitCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/missCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/missCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadSuccessCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadSuccessCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadFailureCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadFailureCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/totalLoadTime",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/totalLoadTime",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionWeight",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionWeight"
        ],
        "label": "of",
        "text": "of",
        "color": "#CBCBAE",
        "additional": "of"
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/hitCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/hitCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/missCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/missCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadSuccessCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadSuccessCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadFailureCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadFailureCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/totalLoadTime",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/totalLoadTime",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionWeight",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionWeight"
        ],
        "label": "checkStats",
        "text": "checkStats",
        "color": "#CBCBAE",
        "additional": "checkStats"
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "publishCreated",
        "text": "publishCreated",
        "color": "#CBCBAE",
        "additional": "publishCreated"
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "publishRemovedQuietly",
        "text": "publishRemovedQuietly",
        "color": "#CBCBAE",
        "additional": "publishRemovedQuietly"
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "publishExpiredQuietly",
        "text": "publishExpiredQuietly",
        "color": "#CBCBAE",
        "additional": "publishExpiredQuietly"
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "publishExpired",
        "text": "publishExpired",
        "color": "#CBCBAE",
        "additional": "publishExpired"
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "publishRemoved",
        "text": "publishRemoved",
        "color": "#CBCBAE",
        "additional": "publishRemoved"
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/oldValue",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/oldValue",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/newValue",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/newValue"
        ],
        "label": "publishUpdated",
        "text": "publishUpdated",
        "color": "#CBCBAE",
        "additional": "publishUpdated"
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/oldValue",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/oldValue",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/newValue",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/newValue"
        ],
        "label": "publish",
        "text": "publish",
        "color": "#CBCBAE",
        "additional": "publish"
    },
    "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)": {
        "id": "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher"
        ],
        "label": "addError",
        "text": "addError",
        "color": "#CBCBAE",
        "additional": "addError"
    },
    "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)": {
        "id": "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher"
        ],
        "label": "expectThat",
        "text": "expectThat",
        "color": "#CBCBAE",
        "additional": "expectThat"
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction"
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys"
        ],
        "label": "keys",
        "text": "keys",
        "color": "#F6E146",
        "additional": "keys"
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys"
        ],
        "label": "keys",
        "text": "keys",
        "color": "#F6E146",
        "additional": "keys"
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect"
        ],
        "label": "expect",
        "text": "expect",
        "color": "#F6E146",
        "additional": "expect"
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect"
        ],
        "label": "expect",
        "text": "expect",
        "color": "#F6E146",
        "additional": "expect"
    },
    "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key"
    },
    "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key"
    },
    "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value"
    },
    "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value"
    },
    "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause": {
        "id": "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause"
        ],
        "label": "cause",
        "text": "cause",
        "color": "#F6E146",
        "additional": "cause"
    },
    "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause": {
        "id": "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause"
        ],
        "label": "cause",
        "text": "cause",
        "color": "#F6E146",
        "additional": "cause"
    },
    "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression"
        ],
        "label": "expression",
        "text": "expression",
        "color": "#F6E146",
        "additional": "expression"
    },
    "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression"
        ],
        "label": "expression",
        "text": "expression",
        "color": "#F6E146",
        "additional": "expression"
    },
    "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template"
        ],
        "label": "template",
        "text": "template",
        "color": "#F6E146",
        "additional": "template"
    },
    "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template"
        ],
        "label": "template",
        "text": "template",
        "color": "#F6E146",
        "additional": "template"
    },
    "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args"
        ],
        "label": "args",
        "text": "args",
        "color": "#F6E146",
        "additional": "args"
    },
    "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args"
        ],
        "label": "args",
        "text": "args",
        "color": "#F6E146",
        "additional": "args"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec"
        ],
        "label": "spec",
        "text": "spec",
        "color": "#F6E146",
        "additional": "spec"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec"
        ],
        "label": "spec",
        "text": "spec",
        "color": "#F6E146",
        "additional": "spec"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "builder",
        "text": "builder",
        "color": "#F6E146",
        "additional": "builder"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "builder",
        "text": "builder",
        "color": "#F6E146",
        "additional": "builder"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec"
        ],
        "label": "spec",
        "text": "spec",
        "color": "#F6E146",
        "additional": "spec"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "builder",
        "text": "builder",
        "color": "#F6E146",
        "additional": "builder"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec"
        ],
        "label": "spec",
        "text": "spec",
        "color": "#F6E146",
        "additional": "spec"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "builder",
        "text": "builder",
        "color": "#F6E146",
        "additional": "builder"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec"
        ],
        "label": "spec",
        "text": "spec",
        "color": "#F6E146",
        "additional": "spec"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "builder",
        "text": "builder",
        "color": "#F6E146",
        "additional": "builder"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec"
        ],
        "label": "spec",
        "text": "spec",
        "color": "#F6E146",
        "additional": "spec"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "builder",
        "text": "builder",
        "color": "#F6E146",
        "additional": "builder"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec"
        ],
        "label": "spec",
        "text": "spec",
        "color": "#F6E146",
        "additional": "spec"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "builder",
        "text": "builder",
        "color": "#F6E146",
        "additional": "builder"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec"
        ],
        "label": "spec",
        "text": "spec",
        "color": "#F6E146",
        "additional": "spec"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder"
        ],
        "label": "builder",
        "text": "builder",
        "color": "#F6E146",
        "additional": "builder"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch"
        ],
        "label": "epoch",
        "text": "epoch",
        "color": "#F6E146",
        "additional": "epoch"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch"
        ],
        "label": "epoch",
        "text": "epoch",
        "color": "#F6E146",
        "additional": "epoch"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch"
        ],
        "label": "epoch",
        "text": "epoch",
        "color": "#F6E146",
        "additional": "epoch"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch"
        ],
        "label": "epoch",
        "text": "epoch",
        "color": "#F6E146",
        "additional": "epoch"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch"
        ],
        "label": "epoch",
        "text": "epoch",
        "color": "#F6E146",
        "additional": "epoch"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString"
        ],
        "label": "nanosToString",
        "text": "nanosToString",
        "color": "#F6E146",
        "additional": "nanosToString"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString"
        ],
        "label": "nanosToString",
        "text": "nanosToString",
        "color": "#F6E146",
        "additional": "nanosToString"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction"
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess"
        ],
        "label": "expireAfterAccess",
        "text": "expireAfterAccess",
        "color": "#F6E146",
        "additional": "expireAfterAccess"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess"
        ],
        "label": "expireAfterAccess",
        "text": "expireAfterAccess",
        "color": "#F6E146",
        "additional": "expireAfterAccess"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess"
        ],
        "label": "expireAfterAccess",
        "text": "expireAfterAccess",
        "color": "#F6E146",
        "additional": "expireAfterAccess"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess"
        ],
        "label": "expireAfterAccess",
        "text": "expireAfterAccess",
        "color": "#F6E146",
        "additional": "expireAfterAccess"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably"
        ],
        "label": "expireVariably",
        "text": "expireVariably",
        "color": "#F6E146",
        "additional": "expireVariably"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably"
        ],
        "label": "expireVariably",
        "text": "expireVariably",
        "color": "#F6E146",
        "additional": "expireVariably"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite"
        ],
        "label": "expireAfterWrite",
        "text": "expireAfterWrite",
        "color": "#F6E146",
        "additional": "expireAfterWrite"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite"
        ],
        "label": "expireAfterWrite",
        "text": "expireAfterWrite",
        "color": "#F6E146",
        "additional": "expireAfterWrite"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite"
        ],
        "label": "expireAfterWrite",
        "text": "expireAfterWrite",
        "color": "#F6E146",
        "additional": "expireAfterWrite"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite"
        ],
        "label": "expireAfterWrite",
        "text": "expireAfterWrite",
        "color": "#F6E146",
        "additional": "expireAfterWrite"
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key"
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key"
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/value",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value"
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/value",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value"
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentTime": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentTime",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentTime"
        ],
        "label": "currentTime",
        "text": "currentTime",
        "color": "#F6E146",
        "additional": "currentTime"
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/currentTime": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/currentTime",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentTime"
        ],
        "label": "currentTime",
        "text": "currentTime",
        "color": "#F6E146",
        "additional": "currentTime"
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key"
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/value",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value"
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentTime": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentTime",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/currentTime"
        ],
        "label": "currentTime",
        "text": "currentTime",
        "color": "#F6E146",
        "additional": "currentTime"
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration"
        ],
        "label": "currentDuration",
        "text": "currentDuration",
        "color": "#F6E146",
        "additional": "currentDuration"
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration"
        ],
        "label": "currentDuration",
        "text": "currentDuration",
        "color": "#F6E146",
        "additional": "currentDuration"
    },
    "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className": {
        "id": "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className"
        ],
        "label": "className",
        "text": "className",
        "color": "#F6E146",
        "additional": "className"
    },
    "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className": {
        "id": "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className"
        ],
        "label": "className",
        "text": "className",
        "color": "#F6E146",
        "additional": "className"
    },
    "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal": {
        "id": "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal"
        ],
        "label": "isFinal",
        "text": "isFinal",
        "color": "#F6E146",
        "additional": "isFinal"
    },
    "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal": {
        "id": "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal"
        ],
        "label": "isFinal",
        "text": "isFinal",
        "color": "#F6E146",
        "additional": "isFinal"
    },
    "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features": {
        "id": "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features"
        ],
        "label": "features",
        "text": "features",
        "color": "#F6E146",
        "additional": "features"
    },
    "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features": {
        "id": "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features"
        ],
        "label": "features",
        "text": "features",
        "color": "#F6E146",
        "additional": "features"
    },
    "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/executor": {
        "id": "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/executor",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/executor"
        ],
        "label": "executor",
        "text": "executor",
        "color": "#F6E146",
        "additional": "executor"
    },
    "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/executor": {
        "id": "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/executor",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/executor"
        ],
        "label": "executor",
        "text": "executor",
        "color": "#F6E146",
        "additional": "executor"
    },
    "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/command": {
        "id": "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/command",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/command"
        ],
        "label": "command",
        "text": "command",
        "color": "#F6E146",
        "additional": "command"
    },
    "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/command": {
        "id": "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/command",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/command"
        ],
        "label": "command",
        "text": "command",
        "color": "#F6E146",
        "additional": "command"
    },
    "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/delay": {
        "id": "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/delay",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/delay"
        ],
        "label": "delay",
        "text": "delay",
        "color": "#F6E146",
        "additional": "delay"
    },
    "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/delay": {
        "id": "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/delay",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/delay"
        ],
        "label": "delay",
        "text": "delay",
        "color": "#F6E146",
        "additional": "delay"
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key"
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key"
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration"
        ],
        "label": "duration",
        "text": "duration",
        "color": "#F6E146",
        "additional": "duration"
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration"
        ],
        "label": "duration",
        "text": "duration",
        "color": "#F6E146",
        "additional": "duration"
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit"
        ],
        "label": "unit",
        "text": "unit",
        "color": "#F6E146",
        "additional": "unit"
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit"
        ],
        "label": "unit",
        "text": "unit",
        "color": "#F6E146",
        "additional": "unit"
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key"
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration"
        ],
        "label": "duration",
        "text": "duration",
        "color": "#F6E146",
        "additional": "duration"
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit"
        ],
        "label": "unit",
        "text": "unit",
        "color": "#F6E146",
        "additional": "unit"
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value"
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value"
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key"
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key"
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/value",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value"
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/value",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value"
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/duration": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/duration",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/duration"
        ],
        "label": "duration",
        "text": "duration",
        "color": "#F6E146",
        "additional": "duration"
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/duration": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/duration",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/duration"
        ],
        "label": "duration",
        "text": "duration",
        "color": "#F6E146",
        "additional": "duration"
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers"
        ],
        "label": "producers",
        "text": "producers",
        "color": "#F6E146",
        "additional": "producers"
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers"
        ],
        "label": "producers",
        "text": "producers",
        "color": "#F6E146",
        "additional": "producers"
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers"
        ],
        "label": "consumers",
        "text": "consumers",
        "color": "#F6E146",
        "additional": "consumers"
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers"
        ],
        "label": "consumers",
        "text": "consumers",
        "color": "#F6E146",
        "additional": "consumers"
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity"
        ],
        "label": "capacity",
        "text": "capacity",
        "color": "#F6E146",
        "additional": "capacity"
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity"
        ],
        "label": "capacity",
        "text": "capacity",
        "color": "#F6E146",
        "additional": "capacity"
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering"
        ],
        "label": "ordering",
        "text": "ordering",
        "color": "#F6E146",
        "additional": "ordering"
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering"
        ],
        "label": "ordering",
        "text": "ordering",
        "color": "#F6E146",
        "additional": "ordering"
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q"
        ],
        "label": "q",
        "text": "q",
        "color": "#F6E146",
        "additional": "q"
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q"
        ],
        "label": "q",
        "text": "q",
        "color": "#F6E146",
        "additional": "q"
    },
    "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context"
    },
    "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite": {
        "id": "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite"
        ],
        "label": "refreshAfterWrite",
        "text": "refreshAfterWrite",
        "color": "#F6E146",
        "additional": "refreshAfterWrite"
    },
    "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite": {
        "id": "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite"
        ],
        "label": "refreshAfterWrite",
        "text": "refreshAfterWrite",
        "color": "#F6E146",
        "additional": "refreshAfterWrite"
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/clock": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/clock",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/clock"
        ],
        "label": "clock",
        "text": "clock",
        "color": "#F6E146",
        "additional": "clock"
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/clock": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/clock",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/clock"
        ],
        "label": "clock",
        "text": "clock",
        "color": "#F6E146",
        "additional": "clock"
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/duration": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/duration",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/duration"
        ],
        "label": "duration",
        "text": "duration",
        "color": "#F6E146",
        "additional": "duration"
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/duration": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/duration",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/duration"
        ],
        "label": "duration",
        "text": "duration",
        "color": "#F6E146",
        "additional": "duration"
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/times": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/times",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/times"
        ],
        "label": "times",
        "text": "times",
        "color": "#F6E146",
        "additional": "times"
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/times": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/times",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/times"
        ],
        "label": "times",
        "text": "times",
        "color": "#F6E146",
        "additional": "times"
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending"
        ],
        "label": "ascending",
        "text": "ascending",
        "color": "#F6E146",
        "additional": "ascending"
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending"
        ],
        "label": "ascending",
        "text": "ascending",
        "color": "#F6E146",
        "additional": "ascending"
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit"
        ],
        "label": "limit",
        "text": "limit",
        "color": "#F6E146",
        "additional": "limit"
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit"
        ],
        "label": "limit",
        "text": "limit",
        "color": "#F6E146",
        "additional": "limit"
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer"
        ],
        "label": "transformer",
        "text": "transformer",
        "color": "#F6E146",
        "additional": "transformer"
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer"
        ],
        "label": "transformer",
        "text": "transformer",
        "color": "#F6E146",
        "additional": "transformer"
    },
    "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/buffer": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/buffer",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/buffer"
        ],
        "label": "buffer",
        "text": "buffer",
        "color": "#F6E146",
        "additional": "buffer"
    },
    "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/buffer": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/buffer",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/buffer"
        ],
        "label": "buffer",
        "text": "buffer",
        "color": "#F6E146",
        "additional": "buffer"
    },
    "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/offset": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/offset",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/offset"
        ],
        "label": "offset",
        "text": "offset",
        "color": "#F6E146",
        "additional": "offset"
    },
    "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/offset": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/offset",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/offset"
        ],
        "label": "offset",
        "text": "offset",
        "color": "#F6E146",
        "additional": "offset"
    },
    "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/e": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/e",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/e"
        ],
        "label": "e",
        "text": "e",
        "color": "#F6E146",
        "additional": "e"
    },
    "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/e": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/e",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/e"
        ],
        "label": "e",
        "text": "e",
        "color": "#F6E146",
        "additional": "e"
    },
    "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source": {
        "id": "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source"
        ],
        "label": "source",
        "text": "source",
        "color": "#F6E146",
        "additional": "source"
    },
    "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source": {
        "id": "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source"
        ],
        "label": "source",
        "text": "source",
        "color": "#F6E146",
        "additional": "source"
    },
    "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad": {
        "id": "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad"
        ],
        "label": "lastLoad",
        "text": "lastLoad",
        "color": "#F6E146",
        "additional": "lastLoad"
    },
    "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad": {
        "id": "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad"
        ],
        "label": "lastLoad",
        "text": "lastLoad",
        "color": "#F6E146",
        "additional": "lastLoad"
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/lowerBound": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/lowerBound",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/lowerBound"
        ],
        "label": "lowerBound",
        "text": "lowerBound",
        "color": "#F6E146",
        "additional": "lowerBound"
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/lowerBound": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/lowerBound",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/lowerBound"
        ],
        "label": "lowerBound",
        "text": "lowerBound",
        "color": "#F6E146",
        "additional": "lowerBound"
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/upperBound": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/upperBound",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/upperBound"
        ],
        "label": "upperBound",
        "text": "upperBound",
        "color": "#F6E146",
        "additional": "upperBound"
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/upperBound": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/upperBound",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/upperBound"
        ],
        "label": "upperBound",
        "text": "upperBound",
        "color": "#F6E146",
        "additional": "upperBound"
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/events": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/events",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/events"
        ],
        "label": "events",
        "text": "events",
        "color": "#F6E146",
        "additional": "events"
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/events": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/events",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/events"
        ],
        "label": "events",
        "text": "events",
        "color": "#F6E146",
        "additional": "events"
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/items": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/items",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/items"
        ],
        "label": "items",
        "text": "items",
        "color": "#F6E146",
        "additional": "items"
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/items": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/items",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/items"
        ],
        "label": "items",
        "text": "items",
        "color": "#F6E146",
        "additional": "items"
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/constant": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/constant",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/constant"
        ],
        "label": "constant",
        "text": "constant",
        "color": "#F6E146",
        "additional": "constant"
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/constant": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/constant",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/constant"
        ],
        "label": "constant",
        "text": "constant",
        "color": "#F6E146",
        "additional": "constant"
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/events": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/events",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/events"
        ],
        "label": "events",
        "text": "events",
        "color": "#F6E146",
        "additional": "events"
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/events": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/events",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/events"
        ],
        "label": "events",
        "text": "events",
        "color": "#F6E146",
        "additional": "events"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux"
        ],
        "label": "fpaux",
        "text": "fpaux",
        "color": "#F6E146",
        "additional": "fpaux"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux"
        ],
        "label": "fpaux",
        "text": "fpaux",
        "color": "#F6E146",
        "additional": "fpaux"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim"
        ],
        "label": "victim",
        "text": "victim",
        "color": "#F6E146",
        "additional": "victim"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim"
        ],
        "label": "victim",
        "text": "victim",
        "color": "#F6E146",
        "additional": "victim"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart"
        ],
        "label": "bucketStart",
        "text": "bucketStart",
        "color": "#F6E146",
        "additional": "bucketStart"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart"
        ],
        "label": "bucketStart",
        "text": "bucketStart",
        "color": "#F6E146",
        "additional": "bucketStart"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset"
        ],
        "label": "removedOffset",
        "text": "removedOffset",
        "color": "#F6E146",
        "additional": "removedOffset"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset"
        ],
        "label": "removedOffset",
        "text": "removedOffset",
        "color": "#F6E146",
        "additional": "removedOffset"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux"
        ],
        "label": "fpaux",
        "text": "fpaux",
        "color": "#F6E146",
        "additional": "fpaux"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim"
        ],
        "label": "victim",
        "text": "victim",
        "color": "#F6E146",
        "additional": "victim"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart"
        ],
        "label": "bucketStart",
        "text": "bucketStart",
        "color": "#F6E146",
        "additional": "bucketStart"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset"
        ],
        "label": "removedOffset",
        "text": "removedOffset",
        "color": "#F6E146",
        "additional": "removedOffset"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx"
        ],
        "label": "idx",
        "text": "idx",
        "color": "#F6E146",
        "additional": "idx"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/idx": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/idx",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx"
        ],
        "label": "idx",
        "text": "idx",
        "color": "#F6E146",
        "additional": "idx"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start"
        ],
        "label": "start",
        "text": "start",
        "color": "#F6E146",
        "additional": "start"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/start": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/start",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start"
        ],
        "label": "start",
        "text": "start",
        "color": "#F6E146",
        "additional": "start"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/delta",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta"
        ],
        "label": "delta",
        "text": "delta",
        "color": "#F6E146",
        "additional": "delta"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/delta": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/delta",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta"
        ],
        "label": "delta",
        "text": "delta",
        "color": "#F6E146",
        "additional": "delta"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/idx"
        ],
        "label": "idx",
        "text": "idx",
        "color": "#F6E146",
        "additional": "idx"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/start"
        ],
        "label": "start",
        "text": "start",
        "color": "#F6E146",
        "additional": "start"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/delta"
        ],
        "label": "delta",
        "text": "delta",
        "color": "#F6E146",
        "additional": "delta"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/fpaux": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/fpaux",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux"
        ],
        "label": "fpaux",
        "text": "fpaux",
        "color": "#F6E146",
        "additional": "fpaux"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux"
        ],
        "label": "fpaux",
        "text": "fpaux",
        "color": "#F6E146",
        "additional": "fpaux"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/chainIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/chainIndex",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex"
        ],
        "label": "chainIndex",
        "text": "chainIndex",
        "color": "#F6E146",
        "additional": "chainIndex"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex"
        ],
        "label": "chainIndex",
        "text": "chainIndex",
        "color": "#F6E146",
        "additional": "chainIndex"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/isLastIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/isLastIndex",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex"
        ],
        "label": "isLastIndex",
        "text": "isLastIndex",
        "color": "#F6E146",
        "additional": "isLastIndex"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex"
        ],
        "label": "isLastIndex",
        "text": "isLastIndex",
        "color": "#F6E146",
        "additional": "isLastIndex"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux"
        ],
        "label": "fpaux",
        "text": "fpaux",
        "color": "#F6E146",
        "additional": "fpaux"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex"
        ],
        "label": "chainIndex",
        "text": "chainIndex",
        "color": "#F6E146",
        "additional": "chainIndex"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex"
        ],
        "label": "isLastIndex",
        "text": "isLastIndex",
        "color": "#F6E146",
        "additional": "isLastIndex"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux"
        ],
        "label": "fpaux",
        "text": "fpaux",
        "color": "#F6E146",
        "additional": "fpaux"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex"
        ],
        "label": "chainIndex",
        "text": "chainIndex",
        "color": "#F6E146",
        "additional": "chainIndex"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex"
        ],
        "label": "isLastIndex",
        "text": "isLastIndex",
        "color": "#F6E146",
        "additional": "isLastIndex"
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/hitCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/hitCount",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/hitCount",
            null
        ],
        "label": "hitCount",
        "text": "hitCount",
        "color": "#F6E146",
        "additional": "hitCount"
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/hitCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/hitCount",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/hitCount",
            null
        ],
        "label": "hitCount",
        "text": "hitCount",
        "color": "#F6E146",
        "additional": "hitCount"
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/missCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/missCount",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/missCount",
            null
        ],
        "label": "missCount",
        "text": "missCount",
        "color": "#F6E146",
        "additional": "missCount"
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/missCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/missCount",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/missCount",
            null
        ],
        "label": "missCount",
        "text": "missCount",
        "color": "#F6E146",
        "additional": "missCount"
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadSuccessCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadSuccessCount",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadSuccessCount",
            null
        ],
        "label": "loadSuccessCount",
        "text": "loadSuccessCount",
        "color": "#F6E146",
        "additional": "loadSuccessCount"
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadSuccessCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadSuccessCount",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadSuccessCount",
            null
        ],
        "label": "loadSuccessCount",
        "text": "loadSuccessCount",
        "color": "#F6E146",
        "additional": "loadSuccessCount"
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadFailureCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadFailureCount",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadFailureCount",
            null
        ],
        "label": "loadFailureCount",
        "text": "loadFailureCount",
        "color": "#F6E146",
        "additional": "loadFailureCount"
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadFailureCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadFailureCount",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadFailureCount",
            null
        ],
        "label": "loadFailureCount",
        "text": "loadFailureCount",
        "color": "#F6E146",
        "additional": "loadFailureCount"
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/totalLoadTime": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/totalLoadTime",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/totalLoadTime",
            null
        ],
        "label": "totalLoadTime",
        "text": "totalLoadTime",
        "color": "#F6E146",
        "additional": "totalLoadTime"
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/totalLoadTime": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/totalLoadTime",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/totalLoadTime",
            null
        ],
        "label": "totalLoadTime",
        "text": "totalLoadTime",
        "color": "#F6E146",
        "additional": "totalLoadTime"
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionCount",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionCount",
            null
        ],
        "label": "evictionCount",
        "text": "evictionCount",
        "color": "#F6E146",
        "additional": "evictionCount"
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionCount",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionCount",
            null
        ],
        "label": "evictionCount",
        "text": "evictionCount",
        "color": "#F6E146",
        "additional": "evictionCount"
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionWeight": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionWeight",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionWeight",
            null
        ],
        "label": "evictionWeight",
        "text": "evictionWeight",
        "color": "#F6E146",
        "additional": "evictionWeight"
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionWeight": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionWeight",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionWeight",
            null
        ],
        "label": "evictionWeight",
        "text": "evictionWeight",
        "color": "#F6E146",
        "additional": "evictionWeight"
    },
    "null": {
        "id": null,
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/hitCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/missCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadSuccessCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadFailureCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/totalLoadTime",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionWeight",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/hitCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/missCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadSuccessCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadFailureCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/totalLoadTime",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionWeight"
        ],
        "label": "hitCount",
        "text": "hitCount",
        "color": "#F6E146",
        "additional": "hitCount"
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key"
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key"
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value"
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value"
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key"
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value"
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key"
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value"
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key"
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value"
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/key": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key"
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/key": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key"
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/oldValue": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/oldValue",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/oldValue"
        ],
        "label": "oldValue",
        "text": "oldValue",
        "color": "#F6E146",
        "additional": "oldValue"
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/oldValue": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/oldValue",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/oldValue"
        ],
        "label": "oldValue",
        "text": "oldValue",
        "color": "#F6E146",
        "additional": "oldValue"
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/newValue": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/newValue",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/newValue"
        ],
        "label": "newValue",
        "text": "newValue",
        "color": "#F6E146",
        "additional": "newValue"
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/newValue": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/newValue",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/newValue"
        ],
        "label": "newValue",
        "text": "newValue",
        "color": "#F6E146",
        "additional": "newValue"
    },
    "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason": {
        "id": "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason"
        ],
        "label": "reason",
        "text": "reason",
        "color": "#F6E146",
        "additional": "reason"
    },
    "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason": {
        "id": "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason"
        ],
        "label": "reason",
        "text": "reason",
        "color": "#F6E146",
        "additional": "reason"
    },
    "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual": {
        "id": "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual"
        ],
        "label": "actual",
        "text": "actual",
        "color": "#F6E146",
        "additional": "actual"
    },
    "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual": {
        "id": "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual"
        ],
        "label": "actual",
        "text": "actual",
        "color": "#F6E146",
        "additional": "actual"
    },
    "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher": {
        "id": "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher"
        ],
        "label": "matcher",
        "text": "matcher",
        "color": "#F6E146",
        "additional": "matcher"
    },
    "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher": {
        "id": "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher"
        ],
        "label": "matcher",
        "text": "matcher",
        "color": "#F6E146",
        "additional": "matcher"
    },
    "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/NUM_PRODUCERS": {
        "id": "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/NUM_PRODUCERS",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/NUM_PRODUCERS"
        ],
        "label": "NUM_PRODUCERS",
        "text": "NUM_PRODUCERS",
        "color": "#F6E146",
        "additional": "NUM_PRODUCERS"
    },
    "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/NUM_PRODUCERS": {
        "id": "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/NUM_PRODUCERS",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/NUM_PRODUCERS"
        ],
        "label": "NUM_PRODUCERS",
        "text": "NUM_PRODUCERS",
        "color": "#F6E146",
        "additional": "NUM_PRODUCERS"
    },
    "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/POPULATED_SIZE": {
        "id": "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/POPULATED_SIZE",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/POPULATED_SIZE"
        ],
        "label": "POPULATED_SIZE",
        "text": "POPULATED_SIZE",
        "color": "#F6E146",
        "additional": "POPULATED_SIZE"
    },
    "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/POPULATED_SIZE": {
        "id": "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/POPULATED_SIZE",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/POPULATED_SIZE"
        ],
        "label": "POPULATED_SIZE",
        "text": "POPULATED_SIZE",
        "color": "#F6E146",
        "additional": "POPULATED_SIZE"
    },
    "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/PRODUCE": {
        "id": "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/PRODUCE",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/PRODUCE"
        ],
        "label": "PRODUCE",
        "text": "PRODUCE",
        "color": "#F6E146",
        "additional": "PRODUCE"
    },
    "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/PRODUCE": {
        "id": "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/PRODUCE",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/PRODUCE"
        ],
        "label": "PRODUCE",
        "text": "PRODUCE",
        "color": "#F6E146",
        "additional": "PRODUCE"
    },
    "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/UNSAFE": {
        "id": "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/UNSAFE",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/UNSAFE"
        ],
        "label": "UNSAFE",
        "text": "UNSAFE",
        "color": "#F6E146",
        "additional": "UNSAFE"
    },
    "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/UNSAFE": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/UNSAFE",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/UNSAFE"
        ],
        "label": "UNSAFE",
        "text": "UNSAFE",
        "color": "#F6E146",
        "additional": "UNSAFE"
    },
    "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/ANDROID": {
        "id": "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/ANDROID",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/ANDROID"
        ],
        "label": "ANDROID",
        "text": "ANDROID",
        "color": "#F6E146",
        "additional": "ANDROID"
    },
    "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/ANDROID": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/ANDROID",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/ANDROID"
        ],
        "label": "ANDROID",
        "text": "ANDROID",
        "color": "#F6E146",
        "additional": "ANDROID"
    },
    "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/OPEN_JDK": {
        "id": "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/OPEN_JDK",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/OPEN_JDK"
        ],
        "label": "OPEN_JDK",
        "text": "OPEN_JDK",
        "color": "#F6E146",
        "additional": "OPEN_JDK"
    },
    "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/OPEN_JDK": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/OPEN_JDK",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/OPEN_JDK"
        ],
        "label": "OPEN_JDK",
        "text": "OPEN_JDK",
        "color": "#F6E146",
        "additional": "OPEN_JDK"
    },
    "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/lvalue": {
        "id": "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/lvalue",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/lvalue"
        ],
        "label": "lvalue",
        "text": "lvalue",
        "color": "#F6E146",
        "additional": "lvalue"
    },
    "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/lvalue": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/lvalue",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/lvalue"
        ],
        "label": "lvalue",
        "text": "lvalue",
        "color": "#F6E146",
        "additional": "lvalue"
    },
    "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/LVALUE_OFFSET": {
        "id": "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/LVALUE_OFFSET",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/LVALUE_OFFSET"
        ],
        "label": "LVALUE_OFFSET",
        "text": "LVALUE_OFFSET",
        "color": "#F6E146",
        "additional": "LVALUE_OFFSET"
    },
    "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/LVALUE_OFFSET": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/LVALUE_OFFSET",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/LVALUE_OFFSET"
        ],
        "label": "LVALUE_OFFSET",
        "text": "LVALUE_OFFSET",
        "color": "#F6E146",
        "additional": "LVALUE_OFFSET"
    },
    "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/IVALUE_OFFSET": {
        "id": "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/IVALUE_OFFSET",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/IVALUE_OFFSET"
        ],
        "label": "IVALUE_OFFSET",
        "text": "IVALUE_OFFSET",
        "color": "#F6E146",
        "additional": "IVALUE_OFFSET"
    },
    "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/IVALUE_OFFSET": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/IVALUE_OFFSET",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/IVALUE_OFFSET"
        ],
        "label": "IVALUE_OFFSET",
        "text": "IVALUE_OFFSET",
        "color": "#F6E146",
        "additional": "IVALUE_OFFSET"
    },
    "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/ivalue": {
        "id": "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/ivalue",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/ivalue"
        ],
        "label": "ivalue",
        "text": "ivalue",
        "color": "#F6E146",
        "additional": "ivalue"
    },
    "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/ivalue": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/ivalue",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/ivalue"
        ],
        "label": "ivalue",
        "text": "ivalue",
        "color": "#F6E146",
        "additional": "ivalue"
    },
    "com.github.benmanes.caffeine.cache.Caffeine/memberField/initialCapacity": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/memberField/initialCapacity",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/initialCapacity"
        ],
        "label": "initialCapacity",
        "text": "initialCapacity",
        "color": "#F6E146",
        "additional": "initialCapacity"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/initialCapacity": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/initialCapacity",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/memberField/initialCapacity"
        ],
        "label": "initialCapacity",
        "text": "initialCapacity",
        "color": "#F6E146",
        "additional": "initialCapacity"
    },
    "com.github.benmanes.caffeine.cache.Caffeine/memberField/maximumSize": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/memberField/maximumSize",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/maximumSize"
        ],
        "label": "maximumSize",
        "text": "maximumSize",
        "color": "#F6E146",
        "additional": "maximumSize"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/maximumSize": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/maximumSize",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/memberField/maximumSize"
        ],
        "label": "maximumSize",
        "text": "maximumSize",
        "color": "#F6E146",
        "additional": "maximumSize"
    },
    "com.github.benmanes.caffeine.cache.Caffeine/memberField/maximumWeight": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/memberField/maximumWeight",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/maximumWeight"
        ],
        "label": "maximumWeight",
        "text": "maximumWeight",
        "color": "#F6E146",
        "additional": "maximumWeight"
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/maximumWeight": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/maximumWeight",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/memberField/maximumWeight"
        ],
        "label": "maximumWeight",
        "text": "maximumWeight",
        "color": "#F6E146",
        "additional": "maximumWeight"
    },
    "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/MASK": {
        "id": "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/MASK",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/MASK"
        ],
        "label": "MASK",
        "text": "MASK",
        "color": "#F6E146",
        "additional": "MASK"
    },
    "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/MASK": {
        "id": "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/MASK",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/MASK"
        ],
        "label": "MASK",
        "text": "MASK",
        "color": "#F6E146",
        "additional": "MASK"
    },
    "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/SIZE": {
        "id": "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/SIZE",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/SIZE"
        ],
        "label": "SIZE",
        "text": "SIZE",
        "color": "#F6E146",
        "additional": "SIZE"
    },
    "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/SIZE": {
        "id": "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/SIZE",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/SIZE"
        ],
        "label": "SIZE",
        "text": "SIZE",
        "color": "#F6E146",
        "additional": "SIZE"
    },
    "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/ITEMS": {
        "id": "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/ITEMS",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/ITEMS"
        ],
        "label": "ITEMS",
        "text": "ITEMS",
        "color": "#F6E146",
        "additional": "ITEMS"
    },
    "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/ITEMS": {
        "id": "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/ITEMS",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/ITEMS"
        ],
        "label": "ITEMS",
        "text": "ITEMS",
        "color": "#F6E146",
        "additional": "ITEMS"
    },
    "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ITEMS": {
        "id": "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ITEMS",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ITEMS",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ITEMS"
        ],
        "label": "ITEMS",
        "text": "ITEMS",
        "color": "#F6E146",
        "additional": "ITEMS"
    },
    "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ITEMS": {
        "id": "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ITEMS",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ITEMS",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ITEMS"
        ],
        "label": "ITEMS",
        "text": "ITEMS",
        "color": "#F6E146",
        "additional": "ITEMS"
    },
    "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ints": {
        "id": "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ints",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ints",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ints"
        ],
        "label": "ints",
        "text": "ints",
        "color": "#F6E146",
        "additional": "ints"
    },
    "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ints": {
        "id": "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ints",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ints",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ints"
        ],
        "label": "ints",
        "text": "ints",
        "color": "#F6E146",
        "additional": "ints"
    },
    "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/MASK": {
        "id": "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/MASK",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/MASK",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/MASK"
        ],
        "label": "MASK",
        "text": "MASK",
        "color": "#F6E146",
        "additional": "MASK"
    },
    "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/MASK": {
        "id": "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/MASK",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/MASK",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/MASK"
        ],
        "label": "MASK",
        "text": "MASK",
        "color": "#F6E146",
        "additional": "MASK"
    },
    "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/SIZE": {
        "id": "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/SIZE",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/SIZE",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/SIZE"
        ],
        "label": "SIZE",
        "text": "SIZE",
        "color": "#F6E146",
        "additional": "SIZE"
    },
    "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/SIZE": {
        "id": "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/SIZE",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/SIZE",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/SIZE"
        ],
        "label": "SIZE",
        "text": "SIZE",
        "color": "#F6E146",
        "additional": "SIZE"
    },
    "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ITEMS": {
        "id": "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ITEMS",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ITEMS",
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ITEMS"
        ],
        "label": "ITEMS",
        "text": "ITEMS",
        "color": "#F6E146",
        "additional": "ITEMS"
    },
    "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ints": {
        "id": "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ints",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ints",
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ints"
        ],
        "label": "ints",
        "text": "ints",
        "color": "#F6E146",
        "additional": "ints"
    },
    "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/MASK": {
        "id": "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/MASK",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/MASK",
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/MASK"
        ],
        "label": "MASK",
        "text": "MASK",
        "color": "#F6E146",
        "additional": "MASK"
    },
    "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/SIZE": {
        "id": "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/SIZE",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/SIZE",
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/SIZE"
        ],
        "label": "SIZE",
        "text": "SIZE",
        "color": "#F6E146",
        "additional": "SIZE"
    },
    "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/cacheType": {
        "id": "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/cacheType",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/cacheType"
        ],
        "label": "cacheType",
        "text": "cacheType",
        "color": "#F6E146",
        "additional": "cacheType"
    },
    "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/cacheType": {
        "id": "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/cacheType",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/cacheType"
        ],
        "label": "cacheType",
        "text": "cacheType",
        "color": "#F6E146",
        "additional": "cacheType"
    },
    "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/cache": {
        "id": "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/cache": {
        "id": "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/timeZone": {
        "id": "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/timeZone",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/timeZone"
        ],
        "label": "timeZone",
        "text": "timeZone",
        "color": "#F6E146",
        "additional": "timeZone"
    },
    "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/timeZone": {
        "id": "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/timeZone",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/timeZone"
        ],
        "label": "timeZone",
        "text": "timeZone",
        "color": "#F6E146",
        "additional": "timeZone"
    },
    "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/directory": {
        "id": "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/directory",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/directory"
        ],
        "label": "directory",
        "text": "directory",
        "color": "#F6E146",
        "additional": "directory"
    },
    "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/directory": {
        "id": "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/directory",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/directory"
        ],
        "label": "directory",
        "text": "directory",
        "color": "#F6E146",
        "additional": "directory"
    },
    "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/featureByIndex": {
        "id": "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/featureByIndex",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/featureByIndex"
        ],
        "label": "featureByIndex",
        "text": "featureByIndex",
        "color": "#F6E146",
        "additional": "featureByIndex"
    },
    "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/featureByIndex": {
        "id": "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/featureByIndex",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/featureByIndex"
        ],
        "label": "featureByIndex",
        "text": "featureByIndex",
        "color": "#F6E146",
        "additional": "featureByIndex"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/itemsPerSet": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/itemsPerSet",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/itemsPerSet",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/itemsPerSet"
        ],
        "label": "itemsPerSet",
        "text": "itemsPerSet",
        "color": "#F6E146",
        "additional": "itemsPerSet"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/itemsPerSet": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/itemsPerSet",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/itemsPerSet",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/itemsPerSet"
        ],
        "label": "itemsPerSet",
        "text": "itemsPerSet",
        "color": "#F6E146",
        "additional": "itemsPerSet"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/hashFunc": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/hashFunc",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/hashFunc",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/hashFunc"
        ],
        "label": "hashFunc",
        "text": "hashFunc",
        "color": "#F6E146",
        "additional": "hashFunc"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/hashFunc": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/hashFunc",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/hashFunc",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/hashFunc"
        ],
        "label": "hashFunc",
        "text": "hashFunc",
        "color": "#F6E146",
        "additional": "hashFunc"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/chainIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/chainIndex",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/chainIndex"
        ],
        "label": "chainIndex",
        "text": "chainIndex",
        "color": "#F6E146",
        "additional": "chainIndex"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/chainIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/chainIndex",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/chainIndex"
        ],
        "label": "chainIndex",
        "text": "chainIndex",
        "color": "#F6E146",
        "additional": "chainIndex"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/rnd": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/rnd",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/rnd",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/rnd"
        ],
        "label": "rnd",
        "text": "rnd",
        "color": "#F6E146",
        "additional": "rnd"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/rnd": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/rnd",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/rnd",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/rnd"
        ],
        "label": "rnd",
        "text": "rnd",
        "color": "#F6E146",
        "additional": "rnd"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/lastIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/lastIndex",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/lastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/lastIndex"
        ],
        "label": "lastIndex",
        "text": "lastIndex",
        "color": "#F6E146",
        "additional": "lastIndex"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/lastIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/lastIndex",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/lastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/lastIndex"
        ],
        "label": "lastIndex",
        "text": "lastIndex",
        "color": "#F6E146",
        "additional": "lastIndex"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/itemsPerSet": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/itemsPerSet",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/itemsPerSet",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/itemsPerSet"
        ],
        "label": "itemsPerSet",
        "text": "itemsPerSet",
        "color": "#F6E146",
        "additional": "itemsPerSet"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/cache": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/cache": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/hashFunc": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/hashFunc",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/hashFunc",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/hashFunc"
        ],
        "label": "hashFunc",
        "text": "hashFunc",
        "color": "#F6E146",
        "additional": "hashFunc"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/chainIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/chainIndex",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/chainIndex"
        ],
        "label": "chainIndex",
        "text": "chainIndex",
        "color": "#F6E146",
        "additional": "chainIndex"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/rnd": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/rnd",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/rnd",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/rnd"
        ],
        "label": "rnd",
        "text": "rnd",
        "color": "#F6E146",
        "additional": "rnd"
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/lastIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/lastIndex",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/lastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/lastIndex"
        ],
        "label": "lastIndex",
        "text": "lastIndex",
        "color": "#F6E146",
        "additional": "lastIndex"
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInFilter": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInFilter",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInFilter",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInFilter"
        ],
        "label": "isInFilter",
        "text": "isInFilter",
        "color": "#F6E146",
        "additional": "isInFilter"
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInFilter": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInFilter",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInFilter",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInFilter"
        ],
        "label": "isInFilter",
        "text": "isInFilter",
        "color": "#F6E146",
        "additional": "isInFilter"
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInMain": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInMain",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInMain",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInMain"
        ],
        "label": "isInMain",
        "text": "isInMain",
        "color": "#F6E146",
        "additional": "isInMain"
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInMain": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInMain",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInMain",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInMain"
        ],
        "label": "isInMain",
        "text": "isInMain",
        "color": "#F6E146",
        "additional": "isInMain"
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/key": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/key",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key"
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/key": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/key",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key"
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInFilter": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInFilter",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInFilter",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInFilter"
        ],
        "label": "isInFilter",
        "text": "isInFilter",
        "color": "#F6E146",
        "additional": "isInFilter"
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInMain": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInMain",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInMain",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInMain"
        ],
        "label": "isInMain",
        "text": "isInMain",
        "color": "#F6E146",
        "additional": "isInMain"
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/key": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/key",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key"
    }
}