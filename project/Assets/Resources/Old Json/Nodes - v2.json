{
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/BoundedLocalCacheTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/BoundedLocalCacheTest.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest"
        ],
        "label": "BoundedLocalCacheTest.java",
        "text": "BoundedLocalCacheTest.java",
        "color": "#636363",
        "additional": "BoundedLocalCacheTest.java",
        "position": {
            "x": -0.42798507205058534,
            "y": 2.2313233354227355,
            "z": 2.7689638194550104
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/EvictionTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/EvictionTest.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest"
        ],
        "label": "EvictionTest.java",
        "text": "EvictionTest.java",
        "color": "#636363",
        "additional": "EvictionTest.java",
        "position": {
            "x": 0.30751592066812883,
            "y": 2.885033951517031,
            "z": 2.0587849888672585
        }
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/CacheWriter.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/CacheWriter.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CacheWriter"
        ],
        "label": "CacheWriter.java",
        "text": "CacheWriter.java",
        "color": "#636363",
        "additional": "CacheWriter.java",
        "position": {
            "x": 0.8255006506234404,
            "y": 2.922570686598304,
            "z": 1.4422606614627578
        }
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/RemovalListener.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/RemovalListener.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.RemovalListener"
        ],
        "label": "RemovalListener.java",
        "text": "RemovalListener.java",
        "color": "#636363",
        "additional": "RemovalListener.java",
        "position": {
            "x": 0.9509773197021398,
            "y": 3.1227604986285105,
            "z": 1.302005760245549
        }
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Caffeine.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Caffeine.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine"
        ],
        "label": "Caffeine.java",
        "text": "Caffeine.java",
        "color": "#636363",
        "additional": "Caffeine.java",
        "position": {
            "x": 0.3361424266879083,
            "y": 2.403807685229973,
            "z": 1.9285088531257943
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/CaffeineSpecTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/CaffeineSpecTest.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest"
        ],
        "label": "CaffeineSpecTest.java",
        "text": "CaffeineSpecTest.java",
        "color": "#636363",
        "additional": "CaffeineSpecTest.java",
        "position": {
            "x": -0.6845880724203228,
            "y": 2.681659877616975,
            "z": 3.3722541933678065
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/ExpireAfterAccessTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/ExpireAfterAccessTest.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest"
        ],
        "label": "ExpireAfterAccessTest.java",
        "text": "ExpireAfterAccessTest.java",
        "color": "#636363",
        "additional": "ExpireAfterAccessTest.java",
        "position": {
            "x": 1.4949225742925232,
            "y": 2.5455770842960863,
            "z": 3.6832163039901853
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/ExpireAfterVarTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/ExpireAfterVarTest.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest"
        ],
        "label": "ExpireAfterVarTest.java",
        "text": "ExpireAfterVarTest.java",
        "color": "#636363",
        "additional": "ExpireAfterVarTest.java",
        "position": {
            "x": -1.01339995477864,
            "y": 2.3758553973082233,
            "z": 2.343670158416181
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/ExpireAfterWriteTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/ExpireAfterWriteTest.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest"
        ],
        "label": "ExpireAfterWriteTest.java",
        "text": "ExpireAfterWriteTest.java",
        "color": "#636363",
        "additional": "ExpireAfterWriteTest.java",
        "position": {
            "x": 1.6601147087949175,
            "y": 2.338705350142675,
            "z": 2.9291172437735615
        }
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Expiry.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Expiry.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry"
        ],
        "label": "Expiry.java",
        "text": "Expiry.java",
        "color": "#636363",
        "additional": "Expiry.java",
        "position": {
            "x": -0.8884223014480668,
            "y": 2.6061608127052627,
            "z": 4.5
        }
    },
    "caffeine/src/javaPoet/java/com/github/benmanes/caffeine/cache/LocalCacheFactoryGenerator.java": {
        "id": "caffeine/src/javaPoet/java/com/github/benmanes/caffeine/cache/LocalCacheFactoryGenerator.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator"
        ],
        "label": "LocalCacheFactoryGenerator.java",
        "text": "LocalCacheFactoryGenerator.java",
        "color": "#636363",
        "additional": "LocalCacheFactoryGenerator.java",
        "position": {
            "x": -0.8313385302696552,
            "y": 2.4274124208044228,
            "z": 0.6660940919384413
        }
    },
    "caffeine/src/javaPoet/java/com/github/benmanes/caffeine/cache/NodeFactoryGenerator.java": {
        "id": "caffeine/src/javaPoet/java/com/github/benmanes/caffeine/cache/NodeFactoryGenerator.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator"
        ],
        "label": "NodeFactoryGenerator.java",
        "text": "NodeFactoryGenerator.java",
        "color": "#636363",
        "additional": "NodeFactoryGenerator.java",
        "position": {
            "x": -0.81145969349469,
            "y": 2.0212520310269375,
            "z": 0.7993797410940761
        }
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Pacer.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Pacer.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Pacer"
        ],
        "label": "Pacer.java",
        "text": "Pacer.java",
        "color": "#636363",
        "additional": "Pacer.java",
        "position": {
            "x": -0.19480242059246367,
            "y": 4.127827977940551,
            "z": 1.3967093302041702
        }
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Scheduler.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Scheduler.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Scheduler"
        ],
        "label": "Scheduler.java",
        "text": "Scheduler.java",
        "color": "#636363",
        "additional": "Scheduler.java",
        "position": {
            "x": 0.058750413116851696,
            "y": 4.5,
            "z": 1.6687129605793387
        }
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Policy.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Policy.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration"
        ],
        "label": "Policy.java",
        "text": "Policy.java",
        "color": "#636363",
        "additional": "Policy.java",
        "position": {
            "x": -0.715789334192136,
            "y": 3.4925514760559535,
            "z": 3.4489600431087424
        }
    },
    "guava/src/test/java/com/github/benmanes/caffeine/cache/QueueSanityTest.java": {
        "id": "guava/src/test/java/com/github/benmanes/caffeine/cache/QueueSanityTest.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest"
        ],
        "label": "QueueSanityTest.java",
        "text": "QueueSanityTest.java",
        "color": "#636363",
        "additional": "QueueSanityTest.java",
        "position": {
            "x": 0.9352991755625459,
            "y": 2.2947073212641875,
            "z": 0.5
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/RefreshAfterWriteTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/RefreshAfterWriteTest.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest"
        ],
        "label": "RefreshAfterWriteTest.java",
        "text": "RefreshAfterWriteTest.java",
        "color": "#636363",
        "additional": "RefreshAfterWriteTest.java",
        "position": {
            "x": 0.6032151762351536,
            "y": 0.5430527414760578,
            "z": 2.5644591314204397
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/TimerWheelTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/TimerWheelTest.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest"
        ],
        "label": "TimerWheelTest.java",
        "text": "TimerWheelTest.java",
        "color": "#636363",
        "additional": "TimerWheelTest.java",
        "position": {
            "x": -0.1793169620656947,
            "y": 3.065431568135829,
            "z": 2.378552004111599
        }
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/MpscGrowableArrayQueue.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/MpscGrowableArrayQueue.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess"
        ],
        "label": "MpscGrowableArrayQueue.java",
        "text": "MpscGrowableArrayQueue.java",
        "color": "#636363",
        "additional": "MpscGrowableArrayQueue.java",
        "position": {
            "x": 0.4232836833782523,
            "y": 3.7766417131768693,
            "z": 0.9334276905282151
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/issues/Issue30Test.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/issues/Issue30Test.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test"
        ],
        "label": "Issue30Test.java",
        "text": "Issue30Test.java",
        "color": "#636363",
        "additional": "Issue30Test.java",
        "position": {
            "x": 1.8670811027071825,
            "y": 1.259581147509282,
            "z": 2.7598241462961886
        }
    },
    "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/Synthetic.java": {
        "id": "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/Synthetic.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic"
        ],
        "label": "Synthetic.java",
        "text": "Synthetic.java",
        "color": "#636363",
        "additional": "Synthetic.java",
        "position": {
            "x": -0.27761669938816724,
            "y": 3.8409255450745183,
            "z": 4.153739601757022
        }
    },
    "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/admission/tinycache/TinyCache.java": {
        "id": "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/admission/tinycache/TinyCache.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache"
        ],
        "label": "TinyCache.java",
        "text": "TinyCache.java",
        "color": "#636363",
        "additional": "TinyCache.java",
        "position": {
            "x": 0.17113317079548462,
            "y": 1.666063460177331,
            "z": 2.872133882393134
        }
    },
    "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/admission/tinycache/TinyCacheSketch.java": {
        "id": "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/admission/tinycache/TinyCacheSketch.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch"
        ],
        "label": "TinyCacheSketch.java",
        "text": "TinyCacheSketch.java",
        "color": "#636363",
        "additional": "TinyCacheSketch.java",
        "position": {
            "x": 0.07749276633283886,
            "y": 1.564328476297139,
            "z": 2.7216732050703434
        }
    },
    "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/admission/tinycache/TinyCacheWithGhostCache.java": {
        "id": "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/admission/tinycache/TinyCacheWithGhostCache.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache"
        ],
        "label": "TinyCacheWithGhostCache.java",
        "text": "TinyCacheWithGhostCache.java",
        "color": "#636363",
        "additional": "TinyCacheWithGhostCache.java",
        "position": {
            "x": -0.0493494491960762,
            "y": 1.516570491967763,
            "z": 2.9788295311466384
        }
    },
    "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/admission/tinycache/TinySetIndexing.java": {
        "id": "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/admission/tinycache/TinySetIndexing.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing"
        ],
        "label": "TinySetIndexing.java",
        "text": "TinySetIndexing.java",
        "color": "#636363",
        "additional": "TinySetIndexing.java",
        "position": {
            "x": -1.7734673622729362,
            "y": 2.482969463833113,
            "z": 1.34364072565584
        }
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/stats/CacheStats.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/stats/CacheStats.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats"
        ],
        "label": "CacheStats.java",
        "text": "CacheStats.java",
        "color": "#636363",
        "additional": "CacheStats.java",
        "position": {
            "x": 0.2321727235454678,
            "y": 1.551331946884635,
            "z": 1.2384798925385883
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/stats/CacheStatsTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/stats/CacheStatsTest.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest"
        ],
        "label": "CacheStatsTest.java",
        "text": "CacheStatsTest.java",
        "color": "#636363",
        "additional": "CacheStatsTest.java",
        "position": {
            "x": 0.3322236927986353,
            "y": 1.7264683368745388,
            "z": 1.1807054800215488
        }
    },
    "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/policy/PolicyStats.java": {
        "id": "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/policy/PolicyStats.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats"
        ],
        "label": "PolicyStats.java",
        "text": "PolicyStats.java",
        "color": "#636363",
        "additional": "PolicyStats.java",
        "position": {
            "x": -0.037583716044440774,
            "y": 1.8117946660579984,
            "z": 1.3774715078023623
        }
    },
    "jcache/src/main/java/com/github/benmanes/caffeine/jcache/event/EventDispatcher.java": {
        "id": "jcache/src/main/java/com/github/benmanes/caffeine/jcache/event/EventDispatcher.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher"
        ],
        "label": "EventDispatcher.java",
        "text": "EventDispatcher.java",
        "color": "#636363",
        "additional": "EventDispatcher.java",
        "position": {
            "x": 0.925138192786854,
            "y": 3.2407511554391846,
            "z": 2.2002712432112888
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/testing/DescriptionBuilder.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/testing/DescriptionBuilder.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder"
        ],
        "label": "DescriptionBuilder.java",
        "text": "DescriptionBuilder.java",
        "color": "#636363",
        "additional": "DescriptionBuilder.java",
        "position": {
            "x": 1.3808218041294453,
            "y": 3.1017784739930185,
            "z": 1.1409856085164893
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/SingleConsumerQueueTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/SingleConsumerQueueTest.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.SingleConsumerQueueTest"
        ],
        "label": "SingleConsumerQueueTest.java",
        "text": "SingleConsumerQueueTest.java",
        "color": "#636363",
        "additional": "SingleConsumerQueueTest.java",
        "position": {
            "x": 1.7670403795110348,
            "y": 3.5908329148554357,
            "z": 1.6813264178168559
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/MpscGrowableArrayQueueTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/MpscGrowableArrayQueueTest.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest"
        ],
        "label": "MpscGrowableArrayQueueTest.java",
        "text": "MpscGrowableArrayQueueTest.java",
        "color": "#636363",
        "additional": "MpscGrowableArrayQueueTest.java",
        "position": {
            "x": 1.5605020240466208,
            "y": 3.9545168794298267,
            "z": 1.8454914311299084
        }
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/base/UnsafeAccess.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/base/UnsafeAccess.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccess"
        ],
        "label": "UnsafeAccess.java",
        "text": "UnsafeAccess.java",
        "color": "#636363",
        "additional": "UnsafeAccess.java",
        "position": {
            "x": 0.8191547831942718,
            "y": 2.4929613501785433,
            "z": 4.215768645546573
        }
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/UnsafeAccess.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/UnsafeAccess.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccess"
        ],
        "label": "UnsafeAccess.java",
        "text": "UnsafeAccess.java",
        "color": "#636363",
        "additional": "UnsafeAccess.java",
        "position": {
            "x": 0.8804292775958764,
            "y": 2.1124335562507777,
            "z": 4.344698510604829
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/base/UnsafeAccessTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/base/UnsafeAccessTest.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields"
        ],
        "label": "UnsafeAccessTest.java",
        "text": "UnsafeAccessTest.java",
        "color": "#636363",
        "additional": "UnsafeAccessTest.java",
        "position": {
            "x": -1.3942472964798145,
            "y": 1.5634953968347516,
            "z": 3.510677992188706
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/UnsafeAccessTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/UnsafeAccessTest.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields"
        ],
        "label": "UnsafeAccessTest.java",
        "text": "UnsafeAccessTest.java",
        "color": "#636363",
        "additional": "UnsafeAccessTest.java",
        "position": {
            "x": -1.3457737366198204,
            "y": 1.231289640627549,
            "z": 3.262120144313645
        }
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/CaffeineSpec.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/CaffeineSpec.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpec"
        ],
        "label": "CaffeineSpec.java",
        "text": "CaffeineSpec.java",
        "color": "#636363",
        "additional": "CaffeineSpec.java",
        "position": {
            "x": -0.1847402043794233,
            "y": 2.2940214349085526,
            "z": 1.6755423489130825
        }
    },
    "caffeine/src/jmh/java/com/github/benmanes/caffeine/cache/ComputeBenchmark.java": {
        "id": "caffeine/src/jmh/java/com/github/benmanes/caffeine/cache/ComputeBenchmark.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ComputeBenchmark"
        ],
        "label": "ComputeBenchmark.java",
        "text": "ComputeBenchmark.java",
        "color": "#636363",
        "additional": "ComputeBenchmark.java",
        "position": {
            "x": 1.3313236046695764,
            "y": 3.007593657812036,
            "z": 2.9021669472236393
        }
    },
    "caffeine/src/jmh/java/com/github/benmanes/caffeine/profiler/CacheProfiler.java": {
        "id": "caffeine/src/jmh/java/com/github/benmanes/caffeine/profiler/CacheProfiler.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.profiler.CacheProfiler"
        ],
        "label": "CacheProfiler.java",
        "text": "CacheProfiler.java",
        "color": "#636363",
        "additional": "CacheProfiler.java",
        "position": {
            "x": 1.329573141762899,
            "y": 3.401141913138019,
            "z": 3.057352104126026
        }
    },
    "caffeine/src/jmh/java/com/github/benmanes/caffeine/cache/FrequencySketchBenchmark.java": {
        "id": "caffeine/src/jmh/java/com/github/benmanes/caffeine/cache/FrequencySketchBenchmark.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark"
        ],
        "label": "FrequencySketchBenchmark.java",
        "text": "FrequencySketchBenchmark.java",
        "color": "#636363",
        "additional": "FrequencySketchBenchmark.java",
        "position": {
            "x": -0.45209117831220524,
            "y": 2.142922168555003,
            "z": 3.9191336758445248
        }
    },
    "caffeine/src/jmh/java/com/github/benmanes/caffeine/cache/GetPutBenchmark.java": {
        "id": "caffeine/src/jmh/java/com/github/benmanes/caffeine/cache/GetPutBenchmark.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.GetPutBenchmark"
        ],
        "label": "GetPutBenchmark.java",
        "text": "GetPutBenchmark.java",
        "color": "#636363",
        "additional": "GetPutBenchmark.java",
        "position": {
            "x": -0.7803182762764609,
            "y": 1.9595617813040287,
            "z": 3.902990743634294
        }
    },
    "caffeine/src/jmh/java/com/github/benmanes/caffeine/cache/PutRemoveBenchmark.java": {
        "id": "caffeine/src/jmh/java/com/github/benmanes/caffeine/cache/PutRemoveBenchmark.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark"
        ],
        "label": "PutRemoveBenchmark.java",
        "text": "PutRemoveBenchmark.java",
        "color": "#636363",
        "additional": "PutRemoveBenchmark.java",
        "position": {
            "x": -0.7831288337931264,
            "y": 2.298476084885926,
            "z": 3.8151329023346414
        }
    },
    "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/policy/irr/FrdPolicy.java": {
        "id": "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/policy/irr/FrdPolicy.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node"
        ],
        "label": "FrdPolicy.java",
        "text": "FrdPolicy.java",
        "color": "#636363",
        "additional": "FrdPolicy.java",
        "position": {
            "x": -1.582924468982912,
            "y": 2.9312513564638984,
            "z": 1.6066769855977963
        }
    },
    "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/policy/irr/HillClimberFrdPolicy.java": {
        "id": "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/policy/irr/HillClimberFrdPolicy.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node"
        ],
        "label": "HillClimberFrdPolicy.java",
        "text": "HillClimberFrdPolicy.java",
        "color": "#636363",
        "additional": "HillClimberFrdPolicy.java",
        "position": {
            "x": -1.4946419053822604,
            "y": 2.738348678948781,
            "z": 1.5867750066295156
        }
    },
    "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/policy/irr/IndicatorFrdPolicy.java": {
        "id": "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/policy/irr/IndicatorFrdPolicy.java",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node"
        ],
        "label": "IndicatorFrdPolicy.java",
        "text": "IndicatorFrdPolicy.java",
        "color": "#636363",
        "additional": "IndicatorFrdPolicy.java",
        "position": {
            "x": -1.3452798530800227,
            "y": 2.839549227844961,
            "z": 1.3998299470906326
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)"
        ],
        "label": "BoundedLocalCacheTest",
        "text": "BoundedLocalCacheTest",
        "color": "#6D6921",
        "additional": "BoundedLocalCacheTest",
        "position": {
            "x": -0.3975334147106333,
            "y": 2.2534188788487963,
            "z": 2.691319895535209
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)"
        ],
        "label": "EvictionTest",
        "text": "EvictionTest",
        "color": "#6D6921",
        "additional": "EvictionTest",
        "position": {
            "x": 0.2831781737646817,
            "y": 2.8564728317778267,
            "z": 2.1320662522650657
        }
    },
    "com.github.benmanes.caffeine.cache.CacheWriter": {
        "id": "com.github.benmanes.caffeine.cache.CacheWriter",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)"
        ],
        "label": "CacheWriter",
        "text": "CacheWriter",
        "color": "#6D6921",
        "additional": "CacheWriter",
        "position": {
            "x": 0.7905460697563576,
            "y": 2.907356653112628,
            "z": 1.3606315138749527
        }
    },
    "com.github.benmanes.caffeine.cache.RemovalListener": {
        "id": "com.github.benmanes.caffeine.cache.RemovalListener",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)"
        ],
        "label": "RemovalListener",
        "text": "RemovalListener",
        "color": "#6D6921",
        "additional": "RemovalListener",
        "position": {
            "x": 0.8986279960947505,
            "y": 3.0522067912497732,
            "z": 1.2488480576028291
        }
    },
    "com.github.benmanes.caffeine.cache.Caffeine": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/memberField/initialCapacity",
            "com.github.benmanes.caffeine.cache.Caffeine/memberField/maximumSize",
            "com.github.benmanes.caffeine.cache.Caffeine/memberField/maximumWeight",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)"
        ],
        "label": "Caffeine",
        "text": "Caffeine",
        "color": "#6D6921",
        "additional": "Caffeine",
        "position": {
            "x": 0.39933696350770376,
            "y": 2.4696300447701294,
            "z": 1.952346295441816
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)"
        ],
        "label": "CaffeineSpecTest",
        "text": "CaffeineSpecTest",
        "color": "#6D6921",
        "additional": "CaffeineSpecTest",
        "position": {
            "x": -0.6840034617868114,
            "y": 2.8012747474680344,
            "z": 3.370536147601102
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)"
        ],
        "label": "ExpireAfterAccessTest",
        "text": "ExpireAfterAccessTest",
        "color": "#6D6921",
        "additional": "ExpireAfterAccessTest",
        "position": {
            "x": 1.5482048686506986,
            "y": 2.6254100633421817,
            "z": 3.638846495628188
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)"
        ],
        "label": "ExpireAfterVarTest",
        "text": "ExpireAfterVarTest",
        "color": "#6D6921",
        "additional": "ExpireAfterVarTest",
        "position": {
            "x": -0.9349554948696919,
            "y": 2.431910439761188,
            "z": 2.3970751756143316
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)"
        ],
        "label": "ExpireAfterWriteTest",
        "text": "ExpireAfterWriteTest",
        "color": "#6D6921",
        "additional": "ExpireAfterWriteTest",
        "position": {
            "x": 1.6968207555815162,
            "y": 2.3428365616508047,
            "z": 2.844805769382561
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry": {
        "id": "com.github.benmanes.caffeine.cache.Expiry",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)"
        ],
        "label": "Expiry",
        "text": "Expiry",
        "color": "#6D6921",
        "additional": "Expiry",
        "position": {
            "x": -0.9670747104234336,
            "y": 2.5895165037440018,
            "z": 4.452757309605731
        }
    },
    "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator": {
        "id": "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/timeZone",
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/directory",
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/featureByIndex",
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)"
        ],
        "label": "LocalCacheFactoryGenerator",
        "text": "LocalCacheFactoryGenerator",
        "color": "#6D6921",
        "additional": "LocalCacheFactoryGenerator",
        "position": {
            "x": -0.817393904332474,
            "y": 2.3106355585257,
            "z": 0.6741220066582269
        }
    },
    "com.github.benmanes.caffeine.cache.NodeFactoryGenerator": {
        "id": "com.github.benmanes.caffeine.cache.NodeFactoryGenerator",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/timeZone",
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/directory",
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/featureByIndex",
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)"
        ],
        "label": "NodeFactoryGenerator",
        "text": "NodeFactoryGenerator",
        "color": "#6D6921",
        "additional": "NodeFactoryGenerator",
        "position": {
            "x": -0.8027369611677146,
            "y": 2.1197140852225638,
            "z": 0.7538591089171328
        }
    },
    "com.github.benmanes.caffeine.cache.Pacer": {
        "id": "com.github.benmanes.caffeine.cache.Pacer",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)"
        ],
        "label": "Pacer",
        "text": "Pacer",
        "color": "#6D6921",
        "additional": "Pacer",
        "position": {
            "x": -0.12085917532773416,
            "y": 4.174807251467843,
            "z": 1.4348873373631479
        }
    },
    "com.github.benmanes.caffeine.cache.Scheduler": {
        "id": "com.github.benmanes.caffeine.cache.Scheduler",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)"
        ],
        "label": "Scheduler",
        "text": "Scheduler",
        "color": "#6D6921",
        "additional": "Scheduler",
        "position": {
            "x": 0.0479330387577237,
            "y": 4.441262208224493,
            "z": 1.5914765993700815
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)"
        ],
        "label": "VarExpiration",
        "text": "VarExpiration",
        "color": "#6D6921",
        "additional": "VarExpiration",
        "position": {
            "x": -0.6461632395004888,
            "y": 3.3985826270513293,
            "z": 3.4614444578051407
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)"
        ],
        "label": "QueueSanityTest",
        "text": "QueueSanityTest",
        "color": "#6D6921",
        "additional": "QueueSanityTest",
        "position": {
            "x": 0.9848520319598042,
            "y": 2.2167946518749853,
            "z": 0.5485220552417175
        }
    },
    "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest": {
        "id": "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)"
        ],
        "label": "RefreshAfterWriteTest",
        "text": "RefreshAfterWriteTest",
        "color": "#6D6921",
        "additional": "RefreshAfterWriteTest",
        "position": {
            "x": 0.6825581123825972,
            "y": 0.5696617641015439,
            "z": 2.598964531821614
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)"
        ],
        "label": "TimerWheelTest",
        "text": "TimerWheelTest",
        "color": "#6D6921",
        "additional": "TimerWheelTest",
        "position": {
            "x": -0.20805350453352767,
            "y": 2.9978122278366093,
            "z": 2.3218835251552337
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)"
        ],
        "label": "UnsafeRefArrayAccess",
        "text": "UnsafeRefArrayAccess",
        "color": "#6D6921",
        "additional": "UnsafeRefArrayAccess",
        "position": {
            "x": 0.4290733490800993,
            "y": 3.6862809266606997,
            "z": 0.8805908758450152
        }
    },
    "com.github.benmanes.caffeine.cache.issues.Issue30Test": {
        "id": "com.github.benmanes.caffeine.cache.issues.Issue30Test",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)"
        ],
        "label": "Issue30Test",
        "text": "Issue30Test",
        "color": "#6D6921",
        "additional": "Issue30Test",
        "position": {
            "x": 1.9026737505420321,
            "y": 1.3301622897907062,
            "z": 2.8190044562363354
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)"
        ],
        "label": "Synthetic",
        "text": "Synthetic",
        "color": "#6D6921",
        "additional": "Synthetic",
        "position": {
            "x": -0.29067685109605534,
            "y": 3.73644238569379,
            "z": 4.1482797651028545
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/itemsPerSet",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/hashFunc",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/rnd",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/lastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/cache",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)"
        ],
        "label": "TinyCache",
        "text": "TinyCache",
        "color": "#6D6921",
        "additional": "TinyCache",
        "position": {
            "x": 0.08680184784150402,
            "y": 1.6231086938675872,
            "z": 2.880522868204625
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/itemsPerSet",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/hashFunc",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/rnd",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/lastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)"
        ],
        "label": "TinyCacheSketch",
        "text": "TinyCacheSketch",
        "color": "#6D6921",
        "additional": "TinyCacheSketch",
        "position": {
            "x": 0.029623723310935546,
            "y": 1.582568716878809,
            "z": 2.792799820246139
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/itemsPerSet",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/cache",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/hashFunc",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/rnd",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/lastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)"
        ],
        "label": "TinyCacheWithGhostCache",
        "text": "TinyCacheWithGhostCache",
        "color": "#6D6921",
        "additional": "TinyCacheWithGhostCache",
        "position": {
            "x": -0.011027875709139767,
            "y": 1.5703428131706316,
            "z": 2.910803527261407
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)"
        ],
        "label": "TinySetIndexing",
        "text": "TinySetIndexing",
        "color": "#6D6921",
        "additional": "TinySetIndexing",
        "position": {
            "x": -1.8368316096830608,
            "y": 2.535555516195654,
            "z": 1.395064389160007
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/hitCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/missCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/loadSuccessCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/loadFailureCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/totalLoadTime",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/evictionCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/evictionWeight",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)"
        ],
        "label": "CacheStats",
        "text": "CacheStats",
        "color": "#6D6921",
        "additional": "CacheStats",
        "position": {
            "x": 0.2722894544280572,
            "y": 1.6062922202706773,
            "z": 1.312018203500993
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStatsTest": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStatsTest",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)"
        ],
        "label": "CacheStatsTest",
        "text": "CacheStatsTest",
        "color": "#6D6921",
        "additional": "CacheStatsTest",
        "position": {
            "x": 0.32596363492779723,
            "y": 1.707546776677593,
            "z": 1.2770541148707686
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/hitCount",
            "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/missCount",
            "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/evictionCount"
        ],
        "label": "PolicyStats",
        "text": "PolicyStats",
        "color": "#6D6921",
        "additional": "PolicyStats",
        "position": {
            "x": 0.052640248194707695,
            "y": 1.7784427658072908,
            "z": 1.3983914017032206
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)"
        ],
        "label": "EventDispatcher",
        "text": "EventDispatcher",
        "color": "#6D6921",
        "additional": "EventDispatcher",
        "position": {
            "x": 0.9680511361854207,
            "y": 3.150697269222161,
            "z": 2.1722284549764916
        }
    },
    "com.github.benmanes.caffeine.testing.DescriptionBuilder": {
        "id": "com.github.benmanes.caffeine.testing.DescriptionBuilder",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)"
        ],
        "label": "DescriptionBuilder",
        "text": "DescriptionBuilder",
        "color": "#6D6921",
        "additional": "DescriptionBuilder",
        "position": {
            "x": 1.3274464351444757,
            "y": 3.063312148035384,
            "z": 1.078058607177895
        }
    },
    "com.github.benmanes.caffeine.SingleConsumerQueueTest": {
        "id": "com.github.benmanes.caffeine.SingleConsumerQueueTest",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/NUM_PRODUCERS",
            "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/POPULATED_SIZE",
            "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/PRODUCE"
        ],
        "label": "SingleConsumerQueueTest",
        "text": "SingleConsumerQueueTest",
        "color": "#6D6921",
        "additional": "SingleConsumerQueueTest",
        "position": {
            "x": 1.729961853161499,
            "y": 3.680247643742166,
            "z": 1.721152565370814
        }
    },
    "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest": {
        "id": "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/NUM_PRODUCERS",
            "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/POPULATED_SIZE",
            "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/PRODUCE"
        ],
        "label": "SingleConsumerQueueTest",
        "text": "SingleConsumerQueueTest",
        "color": "#6D6921",
        "additional": "SingleConsumerQueueTest",
        "position": {
            "x": 1.614087322875415,
            "y": 3.8758887706010765,
            "z": 1.811801904116568
        }
    },
    "com.github.benmanes.caffeine.base.UnsafeAccess": {
        "id": "com.github.benmanes.caffeine.base.UnsafeAccess",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/UNSAFE",
            "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/ANDROID",
            "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/OPEN_JDK"
        ],
        "label": "UnsafeAccess",
        "text": "UnsafeAccess",
        "color": "#6D6921",
        "additional": "UnsafeAccess",
        "position": {
            "x": 0.879151039903197,
            "y": 2.413712300139874,
            "z": 4.218956149963443
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeAccess": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeAccess",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/UNSAFE",
            "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/ANDROID",
            "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/OPEN_JDK"
        ],
        "label": "UnsafeAccess",
        "text": "UnsafeAccess",
        "color": "#6D6921",
        "additional": "UnsafeAccess",
        "position": {
            "x": 0.8905299242259095,
            "y": 2.211160691012101,
            "z": 4.305509363347811
        }
    },
    "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields": {
        "id": "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/lvalue",
            "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/LVALUE_OFFSET",
            "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/IVALUE_OFFSET",
            "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/ivalue"
        ],
        "label": "RelaxedFields",
        "text": "RelaxedFields",
        "color": "#6D6921",
        "additional": "RelaxedFields",
        "position": {
            "x": -1.374850342707267,
            "y": 1.4718176364027036,
            "z": 3.462618471480882
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/lvalue",
            "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/LVALUE_OFFSET",
            "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/IVALUE_OFFSET",
            "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/ivalue"
        ],
        "label": "RelaxedFields",
        "text": "RelaxedFields",
        "color": "#6D6921",
        "additional": "RelaxedFields",
        "position": {
            "x": -1.3569529370975912,
            "y": 1.2979779995312644,
            "z": 3.330993288948856
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpec": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpec",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/initialCapacity",
            "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/maximumSize",
            "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/maximumWeight"
        ],
        "label": "Caffeine",
        "text": "Caffeine",
        "color": "#6D6921",
        "additional": "Caffeine",
        "position": {
            "x": -0.09387824069405215,
            "y": 2.318909959171703,
            "z": 1.7256342916250589
        }
    },
    "com.github.benmanes.caffeine.cache.ComputeBenchmark": {
        "id": "com.github.benmanes.caffeine.cache.ComputeBenchmark",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/MASK",
            "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/SIZE",
            "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/ITEMS"
        ],
        "label": "ComputeBenchmark",
        "text": "ComputeBenchmark",
        "color": "#6D6921",
        "additional": "ComputeBenchmark",
        "position": {
            "x": 1.3450572198942012,
            "y": 3.117033410048311,
            "z": 2.9189491321407286
        }
    },
    "com.github.benmanes.caffeine.profiler.CacheProfiler": {
        "id": "com.github.benmanes.caffeine.profiler.CacheProfiler",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/MASK",
            "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/SIZE",
            "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/ITEMS"
        ],
        "label": "ComputeBenchmark",
        "text": "ComputeBenchmark",
        "color": "#6D6921",
        "additional": "ComputeBenchmark",
        "position": {
            "x": 1.344625213710306,
            "y": 3.313427988646596,
            "z": 3.007084084798115
        }
    },
    "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark": {
        "id": "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ITEMS",
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ints",
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/MASK",
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/SIZE"
        ],
        "label": "FrequencySketchBenchmark",
        "text": "FrequencySketchBenchmark",
        "color": "#6D6921",
        "additional": "FrequencySketchBenchmark",
        "position": {
            "x": -0.5406603889198527,
            "y": 2.1207693654099447,
            "z": 3.907226296554926
        }
    },
    "com.github.benmanes.caffeine.cache.GetPutBenchmark": {
        "id": "com.github.benmanes.caffeine.cache.GetPutBenchmark",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ITEMS",
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ints",
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/MASK",
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/SIZE",
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/cacheType",
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/cache"
        ],
        "label": "FrequencySketchBenchmark",
        "text": "FrequencySketchBenchmark",
        "color": "#6D6921",
        "additional": "FrequencySketchBenchmark",
        "position": {
            "x": -0.7271030847128759,
            "y": 2.0485435411662545,
            "z": 3.8798911082713916
        }
    },
    "com.github.benmanes.caffeine.cache.PutRemoveBenchmark": {
        "id": "com.github.benmanes.caffeine.cache.PutRemoveBenchmark",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ITEMS",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ints",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/MASK",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/SIZE",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/cacheType",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/cache"
        ],
        "label": "FrequencySketchBenchmark",
        "text": "FrequencySketchBenchmark",
        "color": "#6D6921",
        "additional": "FrequencySketchBenchmark",
        "position": {
            "x": -0.7332870069948167,
            "y": 2.203211200214685,
            "z": 3.8335608985003446
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInFilter",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInMain",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/key"
        ],
        "label": "Node",
        "text": "Node",
        "color": "#6D6921",
        "additional": "Node",
        "position": {
            "x": -1.540472123449176,
            "y": 2.9082308284330227,
            "z": 1.5310349447738982
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInFilter",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInMain",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/key"
        ],
        "label": "Node",
        "text": "Node",
        "color": "#6D6921",
        "additional": "Node",
        "position": {
            "x": -1.4904305507238418,
            "y": 2.7809630030303807,
            "z": 1.5070805245252146
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInFilter",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInMain",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/key"
        ],
        "label": "Node",
        "text": "Node",
        "color": "#6D6921",
        "additional": "Node",
        "position": {
            "x": -1.4161566599165392,
            "y": 2.8697433164588446,
            "z": 1.4462484007423135
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "drain_blocksOrderedMap",
        "text": "drain_blocksOrderedMap",
        "color": "#CBCBAE",
        "additional": "drain_blocksOrderedMap",
        "position": {
            "x": 0.5618749014323643,
            "y": 2.0407314800731795,
            "z": 2.3950345267852047
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "maximumSize_increase_max",
        "text": "maximumSize_increase_max",
        "color": "#CBCBAE",
        "additional": "maximumSize_increase_max",
        "position": {
            "x": 0.6006048481618045,
            "y": 2.077016536552964,
            "z": 2.325577849987524
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "evict",
        "text": "evict",
        "color": "#CBCBAE",
        "additional": "evict",
        "position": {
            "x": 0.6399705076432749,
            "y": 2.072970855289432,
            "z": 2.391388434580789
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "maximumSize_decrease_min",
        "text": "maximumSize_decrease_min",
        "color": "#CBCBAE",
        "additional": "maximumSize_decrease_min",
        "position": {
            "x": 0.635498373883705,
            "y": 2.0344406434703197,
            "z": 2.358847695589219
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "weightOf_absent",
        "text": "weightOf_absent",
        "color": "#CBCBAE",
        "additional": "weightOf_absent",
        "position": {
            "x": 0.6948002339924577,
            "y": 2.0953180507555187,
            "z": 2.3657773529509782
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "maximumSize_decrease",
        "text": "maximumSize_decrease",
        "color": "#CBCBAE",
        "additional": "maximumSize_decrease",
        "position": {
            "x": 0.6856901803425104,
            "y": 2.100931599073533,
            "z": 2.3143582229279125
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "maximumSize_increase",
        "text": "maximumSize_increase",
        "color": "#CBCBAE",
        "additional": "maximumSize_increase",
        "position": {
            "x": 0.6327751324312043,
            "y": 2.0415784250878675,
            "z": 2.3169405619490178
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "weightedSize",
        "text": "weightedSize",
        "color": "#CBCBAE",
        "additional": "weightedSize",
        "position": {
            "x": 0.6370375677632785,
            "y": 2.107005014298249,
            "z": 2.3360381171987523
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "coldest_snapshot",
        "text": "coldest_snapshot",
        "color": "#CBCBAE",
        "additional": "coldest_snapshot",
        "position": {
            "x": 0.750715768492006,
            "y": 2.058123988371147,
            "z": 2.3867509695429883
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "hottest_snapshot",
        "text": "hottest_snapshot",
        "color": "#CBCBAE",
        "additional": "hottest_snapshot",
        "position": {
            "x": 0.6974879974520167,
            "y": 2.0595789838852627,
            "z": 2.4058348555472744
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "weightOf",
        "text": "weightOf",
        "color": "#CBCBAE",
        "additional": "weightOf",
        "position": {
            "x": 0.7484223775902685,
            "y": 2.087605083825723,
            "z": 2.3476504326201004
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "maximumSize_decrease_negative",
        "text": "maximumSize_decrease_negative",
        "color": "#CBCBAE",
        "additional": "maximumSize_decrease_negative",
        "position": {
            "x": 0.7032962050953873,
            "y": 2.034982802141986,
            "z": 2.3511628895870946
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect"
        ],
        "label": "checkReorder",
        "text": "checkReorder",
        "color": "#CBCBAE",
        "additional": "checkReorder",
        "position": {
            "x": -1.086878879128071,
            "y": 2.436988198649993,
            "z": 2.9007646406548884
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect"
        ],
        "label": "checkEvict",
        "text": "checkEvict",
        "color": "#CBCBAE",
        "additional": "checkEvict",
        "position": {
            "x": -1.0954383311472107,
            "y": 2.3943389776816817,
            "z": 2.8941407192187847
        }
    },
    "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)": {
        "id": "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key",
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key",
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value",
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value",
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause",
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause"
        ],
        "label": "delete",
        "text": "delete",
        "color": "#CBCBAE",
        "additional": "delete",
        "position": {
            "x": 0.7755828574576715,
            "y": 2.9063621344682224,
            "z": 1.2554144140911088
        }
    },
    "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)": {
        "id": "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key",
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key",
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value",
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value",
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause",
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause"
        ],
        "label": "onRemoval",
        "text": "onRemoval",
        "color": "#CBCBAE",
        "additional": "onRemoval",
        "position": {
            "x": 0.824784133090879,
            "y": 2.9590284939213105,
            "z": 1.2057255607202584
        }
    },
    "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args"
        ],
        "label": "requireArgument",
        "text": "requireArgument",
        "color": "#CBCBAE",
        "additional": "requireArgument",
        "position": {
            "x": 0.7902289763466599,
            "y": 2.583659300853999,
            "z": 2.1126086402750333
        }
    },
    "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args"
        ],
        "label": "requireState",
        "text": "requireState",
        "color": "#CBCBAE",
        "additional": "requireState",
        "position": {
            "x": 0.774267931010435,
            "y": 2.624181782187322,
            "z": 2.1298923367524707
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "checkInitialCapacity",
        "text": "checkInitialCapacity",
        "color": "#CBCBAE",
        "additional": "checkInitialCapacity",
        "position": {
            "x": -0.7134870403059006,
            "y": 3.124439812481602,
            "z": 3.402986634273272
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "checkExpireAfterAccess",
        "text": "checkExpireAfterAccess",
        "color": "#CBCBAE",
        "additional": "checkExpireAfterAccess",
        "position": {
            "x": -0.6720308860000141,
            "y": 3.0760224075747646,
            "z": 3.4481296369574292
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "checkExpireAfterWrite",
        "text": "checkExpireAfterWrite",
        "color": "#CBCBAE",
        "additional": "checkExpireAfterWrite",
        "position": {
            "x": -0.6456574980095482,
            "y": 3.1062977256985835,
            "z": 3.4220307076709005
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "checkMaximumWeight",
        "text": "checkMaximumWeight",
        "color": "#CBCBAE",
        "additional": "checkMaximumWeight",
        "position": {
            "x": -0.6881519139624093,
            "y": 3.0832893829500105,
            "z": 3.365614299416765
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "checkMaximumSize",
        "text": "checkMaximumSize",
        "color": "#CBCBAE",
        "additional": "checkMaximumSize",
        "position": {
            "x": -0.6977274074704167,
            "y": 3.140604263479494,
            "z": 3.346322500963153
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "checkWeakKeys",
        "text": "checkWeakKeys",
        "color": "#CBCBAE",
        "additional": "checkWeakKeys",
        "position": {
            "x": -0.6899824238417844,
            "y": 3.180221125554375,
            "z": 3.390909392579278
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "checkRefreshAfterWrite",
        "text": "checkRefreshAfterWrite",
        "color": "#CBCBAE",
        "additional": "checkRefreshAfterWrite",
        "position": {
            "x": -0.6712711185051308,
            "y": 3.042705827564195,
            "z": 3.4142617792813055
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder"
        ],
        "label": "checkValueStrength",
        "text": "checkValueStrength",
        "color": "#CBCBAE",
        "additional": "checkValueStrength",
        "position": {
            "x": -0.7116296774649535,
            "y": 3.2008965269897764,
            "z": 3.3525893093700625
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString"
        ],
        "label": "runTest",
        "text": "runTest",
        "color": "#CBCBAE",
        "additional": "runTest",
        "position": {
            "x": -0.6757114847440413,
            "y": 1.8867194772720033,
            "z": 3.283944469384439
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString"
        ],
        "label": "toSpec",
        "text": "toSpec",
        "color": "#CBCBAE",
        "additional": "toSpec",
        "position": {
            "x": -0.6872058095982607,
            "y": 1.8834936990252213,
            "z": 3.3149208010938116
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "replaceConditionally_changeWeight",
        "text": "replaceConditionally_changeWeight",
        "color": "#CBCBAE",
        "additional": "replaceConditionally_changeWeight",
        "position": {
            "x": -0.12318421514291278,
            "y": 3.620745773663181,
            "z": 2.0360748584801236
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "removeConditionally",
        "text": "removeConditionally",
        "color": "#CBCBAE",
        "additional": "removeConditionally",
        "position": {
            "x": -0.08798142081031712,
            "y": 3.553757811701534,
            "z": 2.0180277190970646
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "put_sameWeight",
        "text": "put_sameWeight",
        "color": "#CBCBAE",
        "additional": "put_sameWeight",
        "position": {
            "x": -0.09133736956482985,
            "y": 3.6285872715492413,
            "z": 1.9671066111679538
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "replace_changeWeight",
        "text": "replace_changeWeight",
        "color": "#CBCBAE",
        "additional": "replace_changeWeight",
        "position": {
            "x": -0.12762209267342373,
            "y": 3.5930617667400195,
            "z": 1.9864903853190208
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "replaceConditionally_fails",
        "text": "replaceConditionally_fails",
        "color": "#CBCBAE",
        "additional": "replaceConditionally_fails",
        "position": {
            "x": -0.15621633198939922,
            "y": 3.5678211500664343,
            "z": 2.02139997824675
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "invalidateAll",
        "text": "invalidateAll",
        "color": "#CBCBAE",
        "additional": "invalidateAll",
        "position": {
            "x": -0.07982279457285801,
            "y": 3.6583867382823514,
            "z": 2.010206515631009
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "replace_sameWeight",
        "text": "replace_sameWeight",
        "color": "#CBCBAE",
        "additional": "replace_sameWeight",
        "position": {
            "x": -0.08573793512722139,
            "y": 3.5644379096074914,
            "z": 2.0564454154094918
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "remove",
        "text": "remove",
        "color": "#CBCBAE",
        "additional": "remove",
        "position": {
            "x": -0.034045383901287085,
            "y": 3.6117803325889035,
            "z": 1.986875226165221
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "replaceConditionally_sameWeight",
        "text": "replaceConditionally_sameWeight",
        "color": "#CBCBAE",
        "additional": "replaceConditionally_sameWeight",
        "position": {
            "x": -0.053381258155795974,
            "y": 3.6699675228716626,
            "z": 1.9569946382483085
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "put_changeWeight",
        "text": "put_changeWeight",
        "color": "#CBCBAE",
        "additional": "put_changeWeight",
        "position": {
            "x": -0.13787285956547546,
            "y": 3.549307125722438,
            "z": 2.0552251578040988
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "removeConditionally_fails",
        "text": "removeConditionally_fails",
        "color": "#CBCBAE",
        "additional": "removeConditionally_fails",
        "position": {
            "x": -0.02449654647307642,
            "y": 3.6654241664727287,
            "z": 1.9916465768613785
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "put",
        "text": "put",
        "color": "#CBCBAE",
        "additional": "put",
        "position": {
            "x": -0.03661537188042052,
            "y": 3.585467575265244,
            "z": 2.0277623783210297
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "put_asyncWeight",
        "text": "put_asyncWeight",
        "color": "#CBCBAE",
        "additional": "put_asyncWeight",
        "position": {
            "x": 0.34772810002350596,
            "y": 2.6832456068260364,
            "z": 1.717499233160883
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "evict_zero_async",
        "text": "evict_zero_async",
        "color": "#CBCBAE",
        "additional": "evict_zero_async",
        "position": {
            "x": 0.32566217193746017,
            "y": 2.7154386057651294,
            "z": 1.7079616933952062
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess"
        ],
        "label": "setExpiresAfter_duration",
        "text": "setExpiresAfter_duration",
        "color": "#CBCBAE",
        "additional": "setExpiresAfter_duration",
        "position": {
            "x": 1.634759242956659,
            "y": 2.699674293142043,
            "z": 3.6374405473469746
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess"
        ],
        "label": "oldest_snapshot",
        "text": "oldest_snapshot",
        "color": "#CBCBAE",
        "additional": "oldest_snapshot",
        "position": {
            "x": 1.575032522373331,
            "y": 2.7105326774125813,
            "z": 3.5865328812649175
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess"
        ],
        "label": "setExpiresAfter",
        "text": "setExpiresAfter",
        "color": "#CBCBAE",
        "additional": "setExpiresAfter",
        "position": {
            "x": 1.5865146023399062,
            "y": 2.70796858728331,
            "z": 3.549106432759792
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess"
        ],
        "label": "youngest_snapshot",
        "text": "youngest_snapshot",
        "color": "#CBCBAE",
        "additional": "youngest_snapshot",
        "position": {
            "x": 1.6288401788480416,
            "y": 2.700577178717567,
            "z": 3.595462637577782
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "putIfAbsent_nullKey",
        "text": "putIfAbsent_nullKey",
        "color": "#CBCBAE",
        "additional": "putIfAbsent_nullKey",
        "position": {
            "x": -0.8602704612260961,
            "y": 2.5647193516367177,
            "z": 2.528265284274723
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "getExpiresAfter",
        "text": "getExpiresAfter",
        "color": "#CBCBAE",
        "additional": "getExpiresAfter",
        "position": {
            "x": -0.8898554497141811,
            "y": 2.5246710238896477,
            "z": 2.55511833758553
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "putIfAbsent_nullValue",
        "text": "putIfAbsent_nullValue",
        "color": "#CBCBAE",
        "additional": "putIfAbsent_nullValue",
        "position": {
            "x": -0.8352388240228013,
            "y": 2.523991473703034,
            "z": 2.567410208118544
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "put_replace",
        "text": "put_replace",
        "color": "#CBCBAE",
        "additional": "put_replace",
        "position": {
            "x": -0.8057775305747188,
            "y": 2.572369586547442,
            "z": 2.563057851763099
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "setExpiresAfter",
        "text": "setExpiresAfter",
        "color": "#CBCBAE",
        "additional": "setExpiresAfter",
        "position": {
            "x": -0.860318535811341,
            "y": 2.491682750202175,
            "z": 2.5080535653749614
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "getExpiresAfter_duration",
        "text": "getExpiresAfter_duration",
        "color": "#CBCBAE",
        "additional": "getExpiresAfter_duration",
        "position": {
            "x": -0.9054816916920911,
            "y": 2.576320706943966,
            "z": 2.4922049909642294
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "put_negativeDuration",
        "text": "put_negativeDuration",
        "color": "#CBCBAE",
        "additional": "put_negativeDuration",
        "position": {
            "x": -0.9561274896314254,
            "y": 2.5303263907328857,
            "z": 2.5012321871539234
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "putIfAbsent_negativeDuration",
        "text": "putIfAbsent_negativeDuration",
        "color": "#CBCBAE",
        "additional": "putIfAbsent_negativeDuration",
        "position": {
            "x": -0.9215682713060491,
            "y": 2.504923474067033,
            "z": 2.5295764311644398
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "oldest_snapshot",
        "text": "oldest_snapshot",
        "color": "#CBCBAE",
        "additional": "oldest_snapshot",
        "position": {
            "x": -0.8160617935155752,
            "y": 2.6022555787065227,
            "z": 2.506289029334235
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "putIfAbsent_nullTimeUnit",
        "text": "putIfAbsent_nullTimeUnit",
        "color": "#CBCBAE",
        "additional": "putIfAbsent_nullTimeUnit",
        "position": {
            "x": -0.8451247288726316,
            "y": 2.476708977527033,
            "z": 2.4609338294141656
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "put_nullDuration",
        "text": "put_nullDuration",
        "color": "#CBCBAE",
        "additional": "put_nullDuration",
        "position": {
            "x": -0.8857436655415398,
            "y": 2.560821010374185,
            "z": 2.454040317078924
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "putIfAbsent_insert",
        "text": "putIfAbsent_insert",
        "color": "#CBCBAE",
        "additional": "putIfAbsent_insert",
        "position": {
            "x": -0.9415695752692255,
            "y": 2.556884515893889,
            "z": 2.4484957808388224
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "putIfAbsent_present",
        "text": "putIfAbsent_present",
        "color": "#CBCBAE",
        "additional": "putIfAbsent_present",
        "position": {
            "x": -0.9321430665689105,
            "y": 2.4836496091509943,
            "z": 2.4749615103904814
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "youngest_snapshot",
        "text": "youngest_snapshot",
        "color": "#CBCBAE",
        "additional": "youngest_snapshot",
        "position": {
            "x": -0.7709752422277214,
            "y": 2.598492055201248,
            "z": 2.5150827285694217
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "put_nullValue",
        "text": "put_nullValue",
        "color": "#CBCBAE",
        "additional": "put_nullValue",
        "position": {
            "x": -0.8037722550960169,
            "y": 2.514878901025845,
            "z": 2.4732368666591382
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "put_insert",
        "text": "put_insert",
        "color": "#CBCBAE",
        "additional": "put_insert",
        "position": {
            "x": -0.8938959457932782,
            "y": 2.48887447041196,
            "z": 2.446584872535322
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "setExpiresAfter_duration",
        "text": "setExpiresAfter_duration",
        "color": "#CBCBAE",
        "additional": "setExpiresAfter_duration",
        "position": {
            "x": -0.8483870627014864,
            "y": 2.5955469072363653,
            "z": 2.476375765880407
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "put_nullTimeUnit",
        "text": "put_nullTimeUnit",
        "color": "#CBCBAE",
        "additional": "put_nullTimeUnit",
        "position": {
            "x": -0.8021841942086603,
            "y": 2.4912015577305615,
            "z": 2.512145660014786
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "putIfAbsent_nullDuration",
        "text": "putIfAbsent_nullDuration",
        "color": "#CBCBAE",
        "additional": "putIfAbsent_nullDuration",
        "position": {
            "x": -0.7670190950539231,
            "y": 2.5396027265565,
            "z": 2.5471574596661615
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "put_nullKey",
        "text": "put_nullKey",
        "color": "#CBCBAE",
        "additional": "put_nullKey",
        "position": {
            "x": -0.755015549905846,
            "y": 2.529096550343962,
            "z": 2.502785818077869
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably"
        ],
        "label": "put_insert_replaceExpired_expiryFails",
        "text": "put_insert_replaceExpired_expiryFails",
        "color": "#CBCBAE",
        "additional": "put_insert_replaceExpired_expiryFails",
        "position": {
            "x": -1.1077904600292505,
            "y": 2.1886220432765064,
            "z": 2.100594682299991
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably"
        ],
        "label": "put_update_expiryFails",
        "text": "put_update_expiryFails",
        "color": "#CBCBAE",
        "additional": "put_update_expiryFails",
        "position": {
            "x": -1.1356935583882592,
            "y": 2.221138316636932,
            "z": 2.1043991776404445
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite"
        ],
        "label": "youngest_snapshot",
        "text": "youngest_snapshot",
        "color": "#CBCBAE",
        "additional": "youngest_snapshot",
        "position": {
            "x": 1.7207549092599215,
            "y": 2.3223872585366605,
            "z": 2.763701951640894
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite"
        ],
        "label": "oldest_snapshot",
        "text": "oldest_snapshot",
        "color": "#CBCBAE",
        "additional": "oldest_snapshot",
        "position": {
            "x": 1.7791811039623608,
            "y": 2.3178653302927366,
            "z": 2.794530982067987
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite"
        ],
        "label": "setExpiresAfter_duration",
        "text": "setExpiresAfter_duration",
        "color": "#CBCBAE",
        "additional": "setExpiresAfter_duration",
        "position": {
            "x": 1.7585038868358525,
            "y": 2.345237699472087,
            "z": 2.7540962711716537
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite"
        ],
        "label": "setExpiresAfter",
        "text": "setExpiresAfter",
        "color": "#CBCBAE",
        "additional": "setExpiresAfter",
        "position": {
            "x": 1.7038181198068436,
            "y": 2.3421195130821584,
            "z": 2.723117742602462
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration"
        ],
        "label": "expireAfterUpdate",
        "text": "expireAfterUpdate",
        "color": "#CBCBAE",
        "additional": "expireAfterUpdate",
        "position": {
            "x": -1.0545122880885576,
            "y": 2.6014471395978536,
            "z": 4.445117323871488
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentTime"
        ],
        "label": "expireAfterCreate",
        "text": "expireAfterCreate",
        "color": "#CBCBAE",
        "additional": "expireAfterCreate",
        "position": {
            "x": -1.044491679015251,
            "y": 2.5375056472016797,
            "z": 4.37507783247392
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/currentTime"
        ],
        "label": "expireAfterRead",
        "text": "expireAfterRead",
        "color": "#CBCBAE",
        "additional": "expireAfterRead",
        "position": {
            "x": -1.06976257973096,
            "y": 2.5822955116974837,
            "z": 4.408101101334409
        }
    },
    "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)": {
        "id": "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className",
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className",
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal",
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal",
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features",
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features"
        ],
        "label": "makeLocalCacheSpec",
        "text": "makeLocalCacheSpec",
        "color": "#CBCBAE",
        "additional": "makeLocalCacheSpec",
        "position": {
            "x": -0.7223609966824442,
            "y": 2.1568986425989864,
            "z": 0.5681715335035546
        }
    },
    "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)": {
        "id": "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className",
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className",
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal",
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal",
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features",
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features"
        ],
        "label": "makeNodeSpec",
        "text": "makeNodeSpec",
        "color": "#CBCBAE",
        "additional": "makeNodeSpec",
        "position": {
            "x": -0.7038141418939379,
            "y": 2.0781455271230453,
            "z": 0.6204977803243674
        }
    },
    "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)": {
        "id": "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/executor",
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/executor",
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/command",
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/command",
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/delay",
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/delay"
        ],
        "label": "schedule",
        "text": "schedule",
        "color": "#CBCBAE",
        "additional": "schedule",
        "position": {
            "x": -0.0368123808182399,
            "y": 4.24373318172994,
            "z": 1.4794309042847356
        }
    },
    "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)": {
        "id": "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/executor",
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/executor",
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/command",
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/command",
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/delay",
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/delay"
        ],
        "label": "schedule",
        "text": "schedule",
        "color": "#CBCBAE",
        "additional": "schedule",
        "position": {
            "x": 0.02201730692329651,
            "y": 4.352810939159454,
            "z": 1.510251610762013
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit"
        ],
        "label": "setExpiresAfter",
        "text": "setExpiresAfter",
        "color": "#CBCBAE",
        "additional": "setExpiresAfter",
        "position": {
            "x": -0.2181210271030678,
            "y": 3.360305968846989,
            "z": 3.6504804193912306
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit"
        ],
        "label": "putIfAbsent",
        "text": "putIfAbsent",
        "color": "#CBCBAE",
        "additional": "putIfAbsent",
        "position": {
            "x": -0.23921989186441373,
            "y": 3.358121291954595,
            "z": 3.700932710899952
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit"
        ],
        "label": "put",
        "text": "put",
        "color": "#CBCBAE",
        "additional": "put",
        "position": {
            "x": -0.22715986243266162,
            "y": 3.310578220789125,
            "z": 3.6779699950995535
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/duration"
        ],
        "label": "put",
        "text": "put",
        "color": "#CBCBAE",
        "additional": "put",
        "position": {
            "x": -1.3128887120912314,
            "y": 3.3066621193857486,
            "z": 3.0913580161885648
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/duration"
        ],
        "label": "putIfAbsent",
        "text": "putIfAbsent",
        "color": "#CBCBAE",
        "additional": "putIfAbsent",
        "position": {
            "x": -1.321651603897792,
            "y": 3.3480581379881023,
            "z": 3.102594008998977
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q"
        ],
        "label": "makeAtomic",
        "text": "makeAtomic",
        "color": "#CBCBAE",
        "additional": "makeAtomic",
        "position": {
            "x": 1.0481007192469365,
            "y": 2.1136908008774498,
            "z": 0.5985110369022709
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q"
        ],
        "label": "makeQueue",
        "text": "makeQueue",
        "color": "#CBCBAE",
        "additional": "makeQueue",
        "position": {
            "x": 1.0238443914967443,
            "y": 2.1446808776656683,
            "z": 0.6174465833910482
        }
    },
    "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)": {
        "id": "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite"
        ],
        "label": "youngest_snapshot",
        "text": "youngest_snapshot",
        "color": "#CBCBAE",
        "additional": "youngest_snapshot",
        "position": {
            "x": 0.7816641075820745,
            "y": 0.6083734816839046,
            "z": 2.621133193867405
        }
    },
    "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)": {
        "id": "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite"
        ],
        "label": "oldest_snapshot",
        "text": "oldest_snapshot",
        "color": "#CBCBAE",
        "additional": "oldest_snapshot",
        "position": {
            "x": 0.7718218889532618,
            "y": 0.5413516233354436,
            "z": 2.631787208042033
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/clock",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/clock",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/duration",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/duration",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/times",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/times"
        ],
        "label": "getExpirationDelay_fuzzy",
        "text": "getExpirationDelay_fuzzy",
        "color": "#CBCBAE",
        "additional": "getExpirationDelay_fuzzy",
        "position": {
            "x": 0.018352189478241687,
            "y": 2.7616032701117468,
            "z": 2.8740849925012597
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/clock",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/clock",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/duration",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/duration",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/times",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/times"
        ],
        "label": "schedule_fuzzy",
        "text": "schedule_fuzzy",
        "color": "#CBCBAE",
        "additional": "schedule_fuzzy",
        "position": {
            "x": 0.017437496434537625,
            "y": 2.7183097423660447,
            "z": 2.861889753888742
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer"
        ],
        "label": "snapshot",
        "text": "snapshot",
        "color": "#CBCBAE",
        "additional": "snapshot",
        "position": {
            "x": -0.45538304748790237,
            "y": 3.2540727280821544,
            "z": 1.769146439193283
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer"
        ],
        "label": "snapshot",
        "text": "snapshot",
        "color": "#CBCBAE",
        "additional": "snapshot",
        "position": {
            "x": -0.42917404144750404,
            "y": 3.283602755871976,
            "z": 1.7668645126218623
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/buffer",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/buffer",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/offset",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/offset",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/e",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/e"
        ],
        "label": "soElement",
        "text": "soElement",
        "color": "#CBCBAE",
        "additional": "soElement",
        "position": {
            "x": 0.46796053731779175,
            "y": 3.5874526762244283,
            "z": 0.8081399797781041
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/buffer",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/buffer",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/offset",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/offset",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/e",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/e"
        ],
        "label": "spElement",
        "text": "spElement",
        "color": "#CBCBAE",
        "additional": "spElement",
        "position": {
            "x": 0.44585927965381433,
            "y": 3.6372150887044215,
            "z": 0.8055779056684902
        }
    },
    "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)": {
        "id": "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad"
        ],
        "label": "expiration",
        "text": "expiration",
        "color": "#CBCBAE",
        "additional": "expiration",
        "position": {
            "x": 1.9643522810798855,
            "y": 1.398716372977855,
            "z": 2.8851838780162375
        }
    },
    "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)": {
        "id": "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad"
        ],
        "label": "initialValues",
        "text": "initialValues",
        "color": "#CBCBAE",
        "additional": "initialValues",
        "position": {
            "x": 1.907798640220701,
            "y": 1.4368036719706319,
            "z": 2.869653494581192
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/lowerBound",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/lowerBound",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/upperBound",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/upperBound",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/events",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/events"
        ],
        "label": "hotspot",
        "text": "hotspot",
        "color": "#CBCBAE",
        "additional": "hotspot",
        "position": {
            "x": -0.045931211889118195,
            "y": 3.606635953087357,
            "z": 4.236393906676888
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/lowerBound",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/lowerBound",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/upperBound",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/upperBound",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/events",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/events"
        ],
        "label": "uniform",
        "text": "uniform",
        "color": "#CBCBAE",
        "additional": "uniform",
        "position": {
            "x": -0.051266650414720116,
            "y": 3.5678028882399984,
            "z": 4.212513292366912
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/items",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/items",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/constant",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/constant",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/events",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/events"
        ],
        "label": "zipfian",
        "text": "zipfian",
        "color": "#CBCBAE",
        "additional": "zipfian",
        "position": {
            "x": -0.5395660704983758,
            "y": 3.8656729340765326,
            "z": 4.071412574683141
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/items",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/items",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/constant",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/constant",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/events",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/events"
        ],
        "label": "scrambledZipfian",
        "text": "scrambledZipfian",
        "color": "#CBCBAE",
        "additional": "scrambledZipfian",
        "position": {
            "x": -0.5197823237581516,
            "y": 3.913513616044906,
            "z": 4.064798238934708
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset"
        ],
        "label": "replace",
        "text": "replace",
        "color": "#CBCBAE",
        "additional": "replace",
        "position": {
            "x": -0.14260721988470482,
            "y": 1.2053819380151831,
            "z": 1.906828746742716
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset"
        ],
        "label": "replace",
        "text": "replace",
        "color": "#CBCBAE",
        "additional": "replace",
        "position": {
            "x": -0.177170817928487,
            "y": 1.233315206622605,
            "z": 1.8958417999074098
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset"
        ],
        "label": "replace",
        "text": "replace",
        "color": "#CBCBAE",
        "additional": "replace",
        "position": {
            "x": -0.18880642628472044,
            "y": 1.1867047083214823,
            "z": 1.9201908830147294
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/delta",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta"
        ],
        "label": "replaceItems",
        "text": "replaceItems",
        "color": "#CBCBAE",
        "additional": "replaceItems",
        "position": {
            "x": 0.031849695378814324,
            "y": 1.7969788399210969,
            "z": 3.6857523561868644
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/delta",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta"
        ],
        "label": "replaceItems",
        "text": "replaceItems",
        "color": "#CBCBAE",
        "additional": "replaceItems",
        "position": {
            "x": 0.010126116581639533,
            "y": 1.7864831020075571,
            "z": 3.638701512854797
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/delta"
        ],
        "label": "replaceItems",
        "text": "replaceItems",
        "color": "#CBCBAE",
        "additional": "replaceItems",
        "position": {
            "x": -0.0037625299590910988,
            "y": 1.7521731269455023,
            "z": 3.687998292245642
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex"
        ],
        "label": "getChainAtOffset",
        "text": "getChainAtOffset",
        "color": "#CBCBAE",
        "additional": "getChainAtOffset",
        "position": {
            "x": -1.8776836094857798,
            "y": 2.608696171685144,
            "z": 1.4276796968208
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex"
        ],
        "label": "getChainStart",
        "text": "getChainStart",
        "color": "#CBCBAE",
        "additional": "getChainStart",
        "position": {
            "x": -1.9149609882840446,
            "y": 2.5770982915522906,
            "z": 1.4106402712476416
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex"
        ],
        "label": "removeItem",
        "text": "removeItem",
        "color": "#CBCBAE",
        "additional": "removeItem",
        "position": {
            "x": -1.9574579707371487,
            "y": 2.6021524338124364,
            "z": 1.438248747139905
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex"
        ],
        "label": "getChain",
        "text": "getChain",
        "color": "#CBCBAE",
        "additional": "getChain",
        "position": {
            "x": -1.9184407135597883,
            "y": 2.6101878774427676,
            "z": 1.461480724929068
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/hitCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/hitCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/missCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/missCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadSuccessCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadSuccessCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadFailureCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadFailureCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/totalLoadTime",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/totalLoadTime",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionWeight",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionWeight"
        ],
        "label": "of",
        "text": "of",
        "color": "#CBCBAE",
        "additional": "of",
        "position": {
            "x": 0.2968534489009129,
            "y": 1.6743575361737804,
            "z": 1.4295903169560173
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/hitCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/hitCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/missCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/missCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadSuccessCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadSuccessCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadFailureCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadFailureCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/totalLoadTime",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/totalLoadTime",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionWeight",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionWeight"
        ],
        "label": "checkStats",
        "text": "checkStats",
        "color": "#CBCBAE",
        "additional": "checkStats",
        "position": {
            "x": 0.2994177724133724,
            "y": 1.678115269447314,
            "z": 1.3939227434703447
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "publishCreated",
        "text": "publishCreated",
        "color": "#CBCBAE",
        "additional": "publishCreated",
        "position": {
            "x": 1.3974110138010198,
            "y": 3.0411852317560295,
            "z": 2.089333787018745
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "publishRemovedQuietly",
        "text": "publishRemovedQuietly",
        "color": "#CBCBAE",
        "additional": "publishRemovedQuietly",
        "position": {
            "x": 1.3979433731120938,
            "y": 2.982770191029626,
            "z": 2.109664807581937
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "publishExpiredQuietly",
        "text": "publishExpiredQuietly",
        "color": "#CBCBAE",
        "additional": "publishExpiredQuietly",
        "position": {
            "x": 1.4442784950699261,
            "y": 3.0523833891029133,
            "z": 2.083138479782046
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "publishExpired",
        "text": "publishExpired",
        "color": "#CBCBAE",
        "additional": "publishExpired",
        "position": {
            "x": 1.4430307105536566,
            "y": 2.99641791952114,
            "z": 2.1173655187407245
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "publishRemoved",
        "text": "publishRemoved",
        "color": "#CBCBAE",
        "additional": "publishRemoved",
        "position": {
            "x": 1.423244504223168,
            "y": 2.9849942964524803,
            "z": 2.0707762472720033
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/oldValue",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/oldValue",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/newValue",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/newValue"
        ],
        "label": "publishUpdated",
        "text": "publishUpdated",
        "color": "#CBCBAE",
        "additional": "publishUpdated",
        "position": {
            "x": -0.2684213386020007,
            "y": 3.5171614059071716,
            "z": 2.394468106864882
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/oldValue",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/oldValue",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/newValue",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/newValue"
        ],
        "label": "publish",
        "text": "publish",
        "color": "#CBCBAE",
        "additional": "publish",
        "position": {
            "x": -0.27632152021479106,
            "y": 3.481737718275982,
            "z": 2.3772412378640797
        }
    },
    "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)": {
        "id": "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher"
        ],
        "label": "addError",
        "text": "addError",
        "color": "#CBCBAE",
        "additional": "addError",
        "position": {
            "x": 1.253403589625159,
            "y": 2.999210756639802,
            "z": 1.041932240259447
        }
    },
    "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)": {
        "id": "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher"
        ],
        "label": "expectThat",
        "text": "expectThat",
        "color": "#CBCBAE",
        "additional": "expectThat",
        "position": {
            "x": 1.288011318578246,
            "y": 3.0168891250428667,
            "z": 0.9898136910270665
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.7235114693766658,
            "y": 2.2495129598686816,
            "z": 2.3632642781076916
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.6513311969950042,
            "y": 2.3021365069763333,
            "z": 2.438087877119136
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.6854596723186619,
            "y": 1.8327423519277983,
            "z": 2.470468864111613
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.6648545284665004,
            "y": 1.9277667934008547,
            "z": 2.4937777427529255
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.798678048993668,
            "y": 2.0316701966933,
            "z": 2.254740632877384
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.69344601695117,
            "y": 1.8915147808631876,
            "z": 2.2436218304243534
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.5904276912594062,
            "y": 2.2408736033889975,
            "z": 2.428197595996871
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.6114627912901915,
            "y": 1.9237270688658803,
            "z": 2.4572971994556214
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.7431574845583468,
            "y": 1.9195203109949497,
            "z": 2.2729789285496267
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.7166313442385053,
            "y": 2.279713624365786,
            "z": 2.4629944185515056
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.6565686227629337,
            "y": 1.8126681043616306,
            "z": 2.3671254307930063
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.6461853926893601,
            "y": 1.9434725199170884,
            "z": 2.226946928829891
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.6159629908105284,
            "y": 2.1942990959550417,
            "z": 2.4676972364598306
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.6288318491200342,
            "y": 1.853760122157031,
            "z": 2.462943507010333
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.7761941326055868,
            "y": 2.03731311232909,
            "z": 2.2038678852079387
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.615902118757695,
            "y": 2.28535751976674,
            "z": 2.383262447250209
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.6226042264923457,
            "y": 1.879116476226137,
            "z": 2.374455369374956
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.6515725191455051,
            "y": 2.0139388888980667,
            "z": 2.2040402508768198
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.7604266521149814,
            "y": 2.2215001904453784,
            "z": 2.4295204664105867
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.7094935558131583,
            "y": 1.8509982720351483,
            "z": 2.372909885685673
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.7373047182842898,
            "y": 1.9839171189749087,
            "z": 2.180168506934253
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.6401235711570448,
            "y": 2.2415654808332217,
            "z": 2.3572189832960317
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.7218249575770699,
            "y": 1.9351604849302675,
            "z": 2.480991692425345
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.7758608574786234,
            "y": 1.9274002743392717,
            "z": 2.219959130238305
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.7004925339460062,
            "y": 2.2099320868239376,
            "z": 2.4431845933356273
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.7522046883363078,
            "y": 1.8877359071994297,
            "z": 2.408973850716209
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.7031261745008335,
            "y": 1.927757973821737,
            "z": 2.1941346780355397
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.6513665468299301,
            "y": 2.2418869962885877,
            "z": 2.4898955466534294
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.7460286387377031,
            "y": 1.8748785780515882,
            "z": 2.460257791605029
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.7995989348221082,
            "y": 1.9606129638141068,
            "z": 2.2730381432651376
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.6963577073056766,
            "y": 2.3006955801938096,
            "z": 2.3861011662800093
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.6043249498954486,
            "y": 1.8379303510633194,
            "z": 2.408515586002066
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.7347666484398152,
            "y": 2.083835998874221,
            "z": 2.2256371662526924
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.7014336237454564,
            "y": 2.1813690369774834,
            "z": 2.4958618181014125
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.7101515624242394,
            "y": 1.802248477625683,
            "z": 2.414347393872853
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.6938078647891817,
            "y": 2.0575027062788576,
            "z": 2.186788616912991
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -1.2431279763303174,
            "y": 2.3753528742603014,
            "z": 2.9008097227608642
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -1.246673071041465,
            "y": 2.4593879520546853,
            "z": 2.9383654161529176
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys"
        ],
        "label": "keys",
        "text": "keys",
        "color": "#F6E146",
        "additional": "keys",
        "position": {
            "x": -1.2050390932668555,
            "y": 2.490364834847332,
            "z": 2.9813932774789964
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys"
        ],
        "label": "keys",
        "text": "keys",
        "color": "#F6E146",
        "additional": "keys",
        "position": {
            "x": -1.2226916445587264,
            "y": 2.393944010173601,
            "z": 2.9720262779900195
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect"
        ],
        "label": "expect",
        "text": "expect",
        "color": "#F6E146",
        "additional": "expect",
        "position": {
            "x": -1.2234623746861546,
            "y": 2.5370475650697593,
            "z": 2.9221443748263396
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect"
        ],
        "label": "expect",
        "text": "expect",
        "color": "#F6E146",
        "additional": "expect",
        "position": {
            "x": -1.2518142016134022,
            "y": 2.4665673663824155,
            "z": 2.878511135600502
        }
    },
    "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": 0.7301665997751932,
            "y": 3.027114610264157,
            "z": 1.2144532090545206
        }
    },
    "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": 0.7807719837326035,
            "y": 3.0551106131208234,
            "z": 1.269594733191421
        }
    },
    "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": 0.8667595750078285,
            "y": 2.8385917303674693,
            "z": 1.267916639651688
        }
    },
    "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": 0.8679039418311416,
            "y": 2.8472479172410257,
            "z": 1.1926744630873296
        }
    },
    "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause": {
        "id": "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause"
        ],
        "label": "cause",
        "text": "cause",
        "color": "#F6E146",
        "additional": "cause",
        "position": {
            "x": 0.7349697860908662,
            "y": 2.90955080207385,
            "z": 1.1580670219847105
        }
    },
    "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause": {
        "id": "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause"
        ],
        "label": "cause",
        "text": "cause",
        "color": "#F6E146",
        "additional": "cause",
        "position": {
            "x": 0.7715837816994884,
            "y": 2.8233708423370665,
            "z": 1.1822881316476528
        }
    },
    "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression"
        ],
        "label": "expression",
        "text": "expression",
        "color": "#F6E146",
        "additional": "expression",
        "position": {
            "x": 0.8477015690613228,
            "y": 2.703500742419684,
            "z": 2.1969237090947815
        }
    },
    "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression"
        ],
        "label": "expression",
        "text": "expression",
        "color": "#F6E146",
        "additional": "expression",
        "position": {
            "x": 0.9009143265988189,
            "y": 2.631277525583734,
            "z": 2.1719044959443012
        }
    },
    "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template"
        ],
        "label": "template",
        "text": "template",
        "color": "#F6E146",
        "additional": "template",
        "position": {
            "x": 0.9030347483281167,
            "y": 2.6002982192204467,
            "z": 2.095751587856351
        }
    },
    "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template"
        ],
        "label": "template",
        "text": "template",
        "color": "#F6E146",
        "additional": "template",
        "position": {
            "x": 0.8825011204536888,
            "y": 2.69529346844832,
            "z": 2.1219944951415233
        }
    },
    "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args"
        ],
        "label": "args",
        "text": "args",
        "color": "#F6E146",
        "additional": "args",
        "position": {
            "x": 0.8863331706551709,
            "y": 2.549235439924841,
            "z": 2.1836911076599437
        }
    },
    "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args"
        ],
        "label": "args",
        "text": "args",
        "color": "#F6E146",
        "additional": "args",
        "position": {
            "x": 0.8517488264891693,
            "y": 2.621906515837046,
            "z": 2.228767359916567
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec"
        ],
        "label": "spec",
        "text": "spec",
        "color": "#F6E146",
        "additional": "spec",
        "position": {
            "x": -0.529119007052532,
            "y": 3.1544745753916246,
            "z": 3.384672043609103
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec"
        ],
        "label": "spec",
        "text": "spec",
        "color": "#F6E146",
        "additional": "spec",
        "position": {
            "x": -0.5115117525705275,
            "y": 3.114934387654943,
            "z": 3.335698551331449
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.8123295984833911,
            "y": 3.1466095667619713,
            "z": 3.3269275102246123
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.8198098640648721,
            "y": 3.0361963585285228,
            "z": 3.4392862718637307
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "builder",
        "text": "builder",
        "color": "#F6E146",
        "additional": "builder",
        "position": {
            "x": -0.6342098446582045,
            "y": 3.2057880264683285,
            "z": 3.514558000261446
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "builder",
        "text": "builder",
        "color": "#F6E146",
        "additional": "builder",
        "position": {
            "x": -0.6730358270847827,
            "y": 3.277230751903502,
            "z": 3.518243126250584
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec"
        ],
        "label": "spec",
        "text": "spec",
        "color": "#F6E146",
        "additional": "spec",
        "position": {
            "x": -0.5549282041398718,
            "y": 3.054658574889644,
            "z": 3.319130371953951
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.8589653715555183,
            "y": 3.1326602577388196,
            "z": 3.3612271911031
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "builder",
        "text": "builder",
        "color": "#F6E146",
        "additional": "builder",
        "position": {
            "x": -0.7372229655100202,
            "y": 3.250766163056725,
            "z": 3.532025028963597
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec"
        ],
        "label": "spec",
        "text": "spec",
        "color": "#F6E146",
        "additional": "spec",
        "position": {
            "x": -0.5842417591805724,
            "y": 3.1138438749242363,
            "z": 3.308413340385443
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.8394947186388253,
            "y": 3.122549589494199,
            "z": 3.4213731288076863
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "builder",
        "text": "builder",
        "color": "#F6E146",
        "additional": "builder",
        "position": {
            "x": -0.7439170864507825,
            "y": 3.1540828142311894,
            "z": 3.5233527558877844
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec"
        ],
        "label": "spec",
        "text": "spec",
        "color": "#F6E146",
        "additional": "spec",
        "position": {
            "x": -0.5972364017870337,
            "y": 3.1599977965888555,
            "z": 3.2629118585107375
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.8647137921874297,
            "y": 3.045983526806578,
            "z": 3.3853272140807538
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "builder",
        "text": "builder",
        "color": "#F6E146",
        "additional": "builder",
        "position": {
            "x": -0.68632521027441,
            "y": 3.1698823194843078,
            "z": 3.545923849535434
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec"
        ],
        "label": "spec",
        "text": "spec",
        "color": "#F6E146",
        "additional": "spec",
        "position": {
            "x": -0.5454072007073258,
            "y": 3.2283820257584326,
            "z": 3.3581061388911704
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.8087599478709864,
            "y": 3.06670835166805,
            "z": 3.3098815693856176
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "builder",
        "text": "builder",
        "color": "#F6E146",
        "additional": "builder",
        "position": {
            "x": -0.773321015817928,
            "y": 3.2343708615487063,
            "z": 3.482767208067171
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec"
        ],
        "label": "spec",
        "text": "spec",
        "color": "#F6E146",
        "additional": "spec",
        "position": {
            "x": -0.5887520529496013,
            "y": 3.2410768008497217,
            "z": 3.3072809592406025
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.7937858924592738,
            "y": 2.9868637107602884,
            "z": 3.394280480621312
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "builder",
        "text": "builder",
        "color": "#F6E146",
        "additional": "builder",
        "position": {
            "x": -0.6500945933518214,
            "y": 3.277722047844443,
            "z": 3.460119445257538
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec"
        ],
        "label": "spec",
        "text": "spec",
        "color": "#F6E146",
        "additional": "spec",
        "position": {
            "x": -0.5323338625553256,
            "y": 3.1873507913177184,
            "z": 3.2909164451159083
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.8041331052118033,
            "y": 3.0027053843607603,
            "z": 3.3382420265478134
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder"
        ],
        "label": "builder",
        "text": "builder",
        "color": "#F6E146",
        "additional": "builder",
        "position": {
            "x": -0.7287009387933536,
            "y": 3.290560899882939,
            "z": 3.453680778510058
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch"
        ],
        "label": "epoch",
        "text": "epoch",
        "color": "#F6E146",
        "additional": "epoch",
        "position": {
            "x": -0.6111869064453919,
            "y": 2.9354681139479726,
            "z": 3.4809713403444777
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch"
        ],
        "label": "epoch",
        "text": "epoch",
        "color": "#F6E146",
        "additional": "epoch",
        "position": {
            "x": -0.5944518295441747,
            "y": 3.012051358322588,
            "z": 3.528369711989636
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch"
        ],
        "label": "epoch",
        "text": "epoch",
        "color": "#F6E146",
        "additional": "epoch",
        "position": {
            "x": -0.5507772521646808,
            "y": 2.998984887684477,
            "z": 3.464908413235324
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.6724957396262283,
            "y": 1.7148398540149752,
            "z": 3.2273405238418404
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.7380813167193363,
            "y": 1.7112558838347076,
            "z": 3.262048076247823
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch"
        ],
        "label": "epoch",
        "text": "epoch",
        "color": "#F6E146",
        "additional": "epoch",
        "position": {
            "x": -0.6548471267047151,
            "y": 1.6955843998883215,
            "z": 3.339122515210585
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch"
        ],
        "label": "epoch",
        "text": "epoch",
        "color": "#F6E146",
        "additional": "epoch",
        "position": {
            "x": -0.6200028087597158,
            "y": 1.703995999299152,
            "z": 3.275526759284061
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString"
        ],
        "label": "nanosToString",
        "text": "nanosToString",
        "color": "#F6E146",
        "additional": "nanosToString",
        "position": {
            "x": -0.7219682595920351,
            "y": 1.6940936459429103,
            "z": 3.326809110718768
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString"
        ],
        "label": "nanosToString",
        "text": "nanosToString",
        "color": "#F6E146",
        "additional": "nanosToString",
        "position": {
            "x": -0.6775169318663457,
            "y": 1.6610931948554768,
            "z": 3.2747313511334237
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.07428069124520831,
            "y": 3.753434500383451,
            "z": 2.174121247266107
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.0254674317219048,
            "y": 3.694284585181144,
            "z": 2.1909669006718344
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.019362228812014992,
            "y": 3.4035909524212413,
            "z": 1.9573016868071373
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.049355152739034125,
            "y": 3.5482245704828475,
            "z": 1.863325791983685
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": -0.24562711254713498,
            "y": 3.6690225219072,
            "z": 1.926572906203546
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": -0.2728891677077123,
            "y": 3.7195112334155884,
            "z": 1.9882307531820458
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.07177565028230504,
            "y": 3.790349780314342,
            "z": 2.11290187837962
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.10291510299334106,
            "y": 3.416513988589446,
            "z": 1.8852480882341462
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": -0.1746135809849323,
            "y": 3.799107690540437,
            "z": 1.9077855915250943
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.11876029760853468,
            "y": 3.7311553823674513,
            "z": 2.1365395264622546
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.1501335533234911,
            "y": 3.463505215732342,
            "z": 1.906277084318298
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": -0.20074495380172985,
            "y": 3.831550092616759,
            "z": 1.963657713130684
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.017990644994479776,
            "y": 3.6218075204562186,
            "z": 2.1377509529740877
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.06754844197030696,
            "y": 3.471584946306141,
            "z": 1.8508774649914586
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": -0.21551513772893616,
            "y": 3.7150567959291276,
            "z": 1.8919942048770066
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.02745732700968473,
            "y": 3.6125445446941122,
            "z": 2.1756639351955793
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.01321166341890656,
            "y": 3.5180344691036645,
            "z": 1.9074993177186486
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": -0.13333919388786186,
            "y": 3.80771618184487,
            "z": 1.9532796625566164
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.03248219247270612,
            "y": 3.6919864061746983,
            "z": 2.094918574761547
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.008062788896787021,
            "y": 3.4706802774040932,
            "z": 1.8762198920566622
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": -0.2379644463570736,
            "y": 3.6728141476396305,
            "z": 1.9856991451862076
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.02463724757414365,
            "y": 3.71198966802516,
            "z": 2.1467465373142334
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.005454718155225802,
            "y": 3.4655753347694107,
            "z": 1.958753239160175
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": -0.15945111991133265,
            "y": 3.7307313107798965,
            "z": 1.8988941873985798
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.008266056281975187,
            "y": 3.771927470894225,
            "z": 2.0831705910871756
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.1232102423032595,
            "y": 3.404112703621357,
            "z": 1.9467774814677474
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": -0.21876297328706396,
            "y": 3.750298214565596,
            "z": 2.0390506337821392
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.015337421343572855,
            "y": 3.7774816780800684,
            "z": 2.140878442563723
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.04667900504583988,
            "y": 3.399457568742411,
            "z": 1.90635028333395
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": -0.2422297993431688,
            "y": 3.7951991776456033,
            "z": 2.004354190331605
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.10619914389131946,
            "y": 3.675299106408602,
            "z": 2.1804810143918885
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.07555573807942872,
            "y": 3.4086615399791236,
            "z": 1.9832193839793357
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": -0.16991603005666311,
            "y": 3.81332744370381,
            "z": 2.0128320767449988
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.08195995651216514,
            "y": 3.616057774568453,
            "z": 2.159935239265055
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.11903185329015464,
            "y": 3.5112779957593148,
            "z": 1.8637576089534063
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": -0.2489408113613336,
            "y": 3.775812081653555,
            "z": 1.9323816483143277
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.4101763612367697,
            "y": 2.6840570888808704,
            "z": 1.6039470941547649
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.3435994114634884,
            "y": 2.7327926123554813,
            "z": 1.5838190349335237
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.3974530348383487,
            "y": 2.598674280243999,
            "z": 1.6145769842266438
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.3540507200825842,
            "y": 2.654207398189352,
            "z": 1.5679182996644183
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.2858813930352384,
            "y": 2.652243327476765,
            "z": 1.5851850076317442
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.33377024668780475,
            "y": 2.5803790703157232,
            "z": 1.6053502399542674
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 1.624096350661051,
            "y": 2.8314409382751817,
            "z": 3.530871558606231
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 1.6781797464425847,
            "y": 2.746282045393297,
            "z": 3.501189863013284
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 1.6096630507370584,
            "y": 2.5652351870229895,
            "z": 3.5184987424985867
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 1.6734401321260175,
            "y": 2.569732328814461,
            "z": 3.55856794303027
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess"
        ],
        "label": "expireAfterAccess",
        "text": "expireAfterAccess",
        "color": "#F6E146",
        "additional": "expireAfterAccess",
        "position": {
            "x": 1.5287517005181028,
            "y": 2.744073873156894,
            "z": 3.6917236964819296
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess"
        ],
        "label": "expireAfterAccess",
        "text": "expireAfterAccess",
        "color": "#F6E146",
        "additional": "expireAfterAccess",
        "position": {
            "x": 1.585798512046357,
            "y": 2.8072551649469815,
            "z": 3.686072731605297
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 1.6878241088282024,
            "y": 2.8382756655465764,
            "z": 3.5536760716818354
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 1.5679220423888318,
            "y": 2.54480262386906,
            "z": 3.5742127103597667
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess"
        ],
        "label": "expireAfterAccess",
        "text": "expireAfterAccess",
        "color": "#F6E146",
        "additional": "expireAfterAccess",
        "position": {
            "x": 1.494653338467078,
            "y": 2.778145029480072,
            "z": 3.6279469136374227
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 1.714538197534381,
            "y": 2.76341608107557,
            "z": 3.5804664329986937
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 1.635192363048894,
            "y": 2.5404948786275807,
            "z": 3.6174720122738413
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess"
        ],
        "label": "expireAfterAccess",
        "text": "expireAfterAccess",
        "color": "#F6E146",
        "additional": "expireAfterAccess",
        "position": {
            "x": 1.547873642646492,
            "y": 2.847336341797213,
            "z": 3.62758356305972
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -1.0002432528675604,
            "y": 2.672079531555352,
            "z": 2.5521053440714394
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.9774754769285063,
            "y": 2.7873444007869965,
            "z": 2.585372911562926
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.9111907256075411,
            "y": 2.2966869530779537,
            "z": 2.626579317999083
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.8096285679390463,
            "y": 2.2475496716731134,
            "z": 2.6053574215458006
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.8088724636204689,
            "y": 2.685739503646604,
            "z": 2.3130053728975852
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.8566138606890019,
            "y": 2.498251412828684,
            "z": 2.3235031053572106
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -1.0129440019796785,
            "y": 2.7192593190544376,
            "z": 2.585148316188953
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.9270459601223784,
            "y": 2.35410893951717,
            "z": 2.606050762710361
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.8055609785556379,
            "y": 2.460781066319508,
            "z": 2.32988584937796
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.8551158734326405,
            "y": 2.8032596830123704,
            "z": 2.5241531508391692
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.9218333308152968,
            "y": 2.2973218325405496,
            "z": 2.507564181617038
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.8230139119086499,
            "y": 2.527632954861273,
            "z": 2.2840081941491324
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.9279002967969852,
            "y": 2.8391821199936556,
            "z": 2.564305484107713
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.7920228127117523,
            "y": 2.2358904240754462,
            "z": 2.5475463638794547
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.7702962602314967,
            "y": 2.5878866808231913,
            "z": 2.283057326581604
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.9028000639077984,
            "y": 2.797904415167117,
            "z": 2.492245867117628
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.8864150337547174,
            "y": 2.2379480523024076,
            "z": 2.5014005468193345
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.749633122682241,
            "y": 2.669547838880773,
            "z": 2.406489082985244
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.8707167393429982,
            "y": 2.724868830839973,
            "z": 2.600079039490516
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.7742691330715818,
            "y": 2.3116725553355266,
            "z": 2.507296588023354
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.7495931333420394,
            "y": 2.6504728396023634,
            "z": 2.3132509708102083
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.9383763282393236,
            "y": 2.6630776903841964,
            "z": 2.646276352627595
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.7836669439478705,
            "y": 2.3222275683655167,
            "z": 2.628378606416754
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.7004527523117847,
            "y": 2.6259116810589975,
            "z": 2.391689907807482
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.8736363225361505,
            "y": 2.675657641926223,
            "z": 2.649454931619674
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.8180984943605487,
            "y": 2.3770421556796513,
            "z": 2.63292131846809
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.7853936272177084,
            "y": 2.5704514966223075,
            "z": 2.3583320872765636
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.9049887864753405,
            "y": 2.7384516746055034,
            "z": 2.657841838343077
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.8757608004092925,
            "y": 2.371401044475965,
            "z": 2.64190965907539
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.7543827151306333,
            "y": 2.4621951821162433,
            "z": 2.3556987023004874
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.9621894610793074,
            "y": 2.813677246742728,
            "z": 2.519241562109591
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.9494077962499674,
            "y": 2.319530395857253,
            "z": 2.557098870116178
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.8842342771804261,
            "y": 2.5696509268244365,
            "z": 2.3195502000737305
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.867859893042334,
            "y": 2.829196764003515,
            "z": 2.587976635929613
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.8143097763661531,
            "y": 2.25002906032102,
            "z": 2.4889429390687097
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.8314456486937767,
            "y": 2.6101969121285813,
            "z": 2.281275041803786
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -1.0039052925129273,
            "y": 2.740690682257099,
            "z": 2.522419637547625
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.9282206191725524,
            "y": 2.2531057228430793,
            "z": 2.5603444051749067
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.7393437698851841,
            "y": 2.6905231478791785,
            "z": 2.3598278957115317
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.9578807366320394,
            "y": 2.7506028948569194,
            "z": 2.487769238733403
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.8573235518209115,
            "y": 2.2995478149024975,
            "z": 2.476108451580952
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.8788516251220162,
            "y": 2.639648461963399,
            "z": 2.3183709565830135
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.9832373381849342,
            "y": 2.653925167443187,
            "z": 2.616089021291312
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.760421671572953,
            "y": 2.352447748027174,
            "z": 2.585221088951443
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.7093926569611992,
            "y": 2.5824752691159674,
            "z": 2.3267914233266973
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.9095896413868181,
            "y": 2.7342254049399553,
            "z": 2.548554130992929
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.8425890118862605,
            "y": 2.3228598898041932,
            "z": 2.552659976362901
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.7119238771100487,
            "y": 2.5008813962943015,
            "z": 2.365723988033894
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.827220206090723,
            "y": 2.7502539860763315,
            "z": 2.627851596667419
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.7531433041582369,
            "y": 2.2985076706020315,
            "z": 2.5617829130314056
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.7518363080258135,
            "y": 2.5090193972713193,
            "z": 2.3019377287927276
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.9171344423633945,
            "y": 2.8035814400476444,
            "z": 2.6263709792228456
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.8458636928270711,
            "y": 2.299034006049749,
            "z": 2.645154074672419
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.6949982031322506,
            "y": 2.5591294568843006,
            "z": 2.386859865685169
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.8205690660618841,
            "y": 2.7719128300313263,
            "z": 2.5676186390975633
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.8538252964181534,
            "y": 2.211824124188909,
            "z": 2.5522175468142674
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.8549712357437445,
            "y": 2.670612751548548,
            "z": 2.3591038599144536
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.9723641490075094,
            "y": 2.7365786908886123,
            "z": 2.6338193951672935
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.8827800165428792,
            "y": 2.243036428132064,
            "z": 2.602377179705707
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.8043249592696871,
            "y": 2.70059797785197,
            "z": 2.3760419112741413
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -1.1341122550690423,
            "y": 2.088219155279219,
            "z": 2.0129165571569816
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -1.1965269776027208,
            "y": 2.1567517855209277,
            "z": 2.0051112871040004
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -1.2353040138772222,
            "y": 2.1390568944981325,
            "z": 2.058769867992703
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -1.1835920295011695,
            "y": 2.062575552793702,
            "z": 2.055306724180294
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably"
        ],
        "label": "expireVariably",
        "text": "expireVariably",
        "color": "#F6E146",
        "additional": "expireVariably",
        "position": {
            "x": -1.1667513324395968,
            "y": 2.2399555272316083,
            "z": 1.9864520359228885
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably"
        ],
        "label": "expireVariably",
        "text": "expireVariably",
        "color": "#F6E146",
        "additional": "expireVariably",
        "position": {
            "x": -1.1229051474478156,
            "y": 2.158486950241318,
            "z": 1.9772817850381321
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 1.6735848158794027,
            "y": 2.4607308552383724,
            "z": 2.77227178698262
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 1.7190749247729515,
            "y": 2.5127429555878695,
            "z": 2.7980351845120546
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 1.6699421469338223,
            "y": 2.1954680508009283,
            "z": 2.7334505167208043
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 1.7333880784323523,
            "y": 2.163803522567952,
            "z": 2.7689491611555463
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite"
        ],
        "label": "expireAfterWrite",
        "text": "expireAfterWrite",
        "color": "#F6E146",
        "additional": "expireAfterWrite",
        "position": {
            "x": 1.800010630243535,
            "y": 2.3698092597276617,
            "z": 2.6545308118503654
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite"
        ],
        "label": "expireAfterWrite",
        "text": "expireAfterWrite",
        "color": "#F6E146",
        "additional": "expireAfterWrite",
        "position": {
            "x": 1.7799378058267292,
            "y": 2.2752582809585027,
            "z": 2.6510388706573607
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 1.7591917926324983,
            "y": 2.4564493408205843,
            "z": 2.8382383099318496
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 1.7115361520109267,
            "y": 2.198911888040009,
            "z": 2.833539060968875
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite"
        ],
        "label": "expireAfterWrite",
        "text": "expireAfterWrite",
        "color": "#F6E146",
        "additional": "expireAfterWrite",
        "position": {
            "x": 1.836297734275154,
            "y": 2.2565158581638842,
            "z": 2.7020478449391176
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 1.7706961933593526,
            "y": 2.490301150540739,
            "z": 2.7517572446446157
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 1.6440165675396536,
            "y": 2.2238549278257835,
            "z": 2.7995836318254033
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite"
        ],
        "label": "expireAfterWrite",
        "text": "expireAfterWrite",
        "color": "#F6E146",
        "additional": "expireAfterWrite",
        "position": {
            "x": 1.8520189899910537,
            "y": 2.3538806131766092,
            "z": 2.709897813102168
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/key",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -1.0038716702662263,
            "y": 2.4700145177347395,
            "z": 4.483188363207148
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/key",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -0.9669698168497189,
            "y": 2.4695529485849734,
            "z": 4.408349395821459
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/value",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": -0.977161952242926,
            "y": 2.686737962472,
            "z": 4.376466081476573
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/value",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": -1.0289121281882978,
            "y": 2.6489868163340233,
            "z": 4.31455766340385
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentTime": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentTime",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentTime"
        ],
        "label": "currentTime",
        "text": "currentTime",
        "color": "#F6E146",
        "additional": "currentTime",
        "position": {
            "x": -1.1343636172291864,
            "y": 2.4828387344049374,
            "z": 4.456123405284888
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/currentTime": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/currentTime",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentTime"
        ],
        "label": "currentTime",
        "text": "currentTime",
        "color": "#F6E146",
        "additional": "currentTime",
        "position": {
            "x": -1.1677878287405663,
            "y": 2.577570016853589,
            "z": 4.444865763743712
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/key",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -1.0408504892515547,
            "y": 2.4199600129110976,
            "z": 4.4204520896936925
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/value",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": -1.0522001617177443,
            "y": 2.7234455482762665,
            "z": 4.364711238924303
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentTime": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentTime",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/currentTime"
        ],
        "label": "currentTime",
        "text": "currentTime",
        "color": "#F6E146",
        "additional": "currentTime",
        "position": {
            "x": -1.1591751024775885,
            "y": 2.515001107707577,
            "z": 4.3774482255928024
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration"
        ],
        "label": "currentDuration",
        "text": "currentDuration",
        "color": "#F6E146",
        "additional": "currentDuration",
        "position": {
            "x": -1.1361799859820496,
            "y": 2.6916512208096286,
            "z": 4.408721594912656
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration"
        ],
        "label": "currentDuration",
        "text": "currentDuration",
        "color": "#F6E146",
        "additional": "currentDuration",
        "position": {
            "x": -1.0913447524388422,
            "y": 2.713817547563172,
            "z": 4.472742464395621
        }
    },
    "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className": {
        "id": "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className"
        ],
        "label": "className",
        "text": "className",
        "color": "#F6E146",
        "additional": "className",
        "position": {
            "x": -0.6587356095797667,
            "y": 2.0105298414347454,
            "z": 0.5548026533814484
        }
    },
    "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className": {
        "id": "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className"
        ],
        "label": "className",
        "text": "className",
        "color": "#F6E146",
        "additional": "className",
        "position": {
            "x": -0.6917260940521119,
            "y": 2.0703876444480547,
            "z": 0.5016109602969633
        }
    },
    "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal": {
        "id": "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal"
        ],
        "label": "isFinal",
        "text": "isFinal",
        "color": "#F6E146",
        "additional": "isFinal",
        "position": {
            "x": -0.8049357868409142,
            "y": 2.099698813808491,
            "z": 0.5641649313841173
        }
    },
    "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal": {
        "id": "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal"
        ],
        "label": "isFinal",
        "text": "isFinal",
        "color": "#F6E146",
        "additional": "isFinal",
        "position": {
            "x": -0.7718600556360924,
            "y": 2.008989596191422,
            "z": 0.5780752957622166
        }
    },
    "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features": {
        "id": "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features"
        ],
        "label": "features",
        "text": "features",
        "color": "#F6E146",
        "additional": "features",
        "position": {
            "x": -0.6377126425356123,
            "y": 2.209525621797234,
            "z": 0.5838067588991562
        }
    },
    "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features": {
        "id": "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features"
        ],
        "label": "features",
        "text": "features",
        "color": "#F6E146",
        "additional": "features",
        "position": {
            "x": -0.6093951855299418,
            "y": 2.117000570614602,
            "z": 0.5798872493398907
        }
    },
    "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/executor": {
        "id": "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/executor",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/executor"
        ],
        "label": "executor",
        "text": "executor",
        "color": "#F6E146",
        "additional": "executor",
        "position": {
            "x": -0.05943219447252379,
            "y": 4.3656717838681525,
            "z": 1.4377445569006477
        }
    },
    "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/executor": {
        "id": "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/executor",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/executor"
        ],
        "label": "executor",
        "text": "executor",
        "color": "#F6E146",
        "additional": "executor",
        "position": {
            "x": -0.08971553485291017,
            "y": 4.362055866880739,
            "z": 1.5109864600931466
        }
    },
    "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/command": {
        "id": "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/command",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/command"
        ],
        "label": "command",
        "text": "command",
        "color": "#F6E146",
        "additional": "command",
        "position": {
            "x": 0.05118952162521184,
            "y": 4.228197561970172,
            "z": 1.5413164101803716
        }
    },
    "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/command": {
        "id": "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/command",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/command"
        ],
        "label": "command",
        "text": "command",
        "color": "#F6E146",
        "additional": "command",
        "position": {
            "x": -0.009689654869678765,
            "y": 4.275492715279419,
            "z": 1.5822621382992579
        }
    },
    "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/delay": {
        "id": "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/delay",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/delay"
        ],
        "label": "delay",
        "text": "delay",
        "color": "#F6E146",
        "additional": "delay",
        "position": {
            "x": 0.08328778945252369,
            "y": 4.291233257642541,
            "z": 1.455091855458165
        }
    },
    "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/delay": {
        "id": "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/delay",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/delay"
        ],
        "label": "delay",
        "text": "delay",
        "color": "#F6E146",
        "additional": "delay",
        "position": {
            "x": 0.03619957305692356,
            "y": 4.228136475616068,
            "z": 1.4263603717632867
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -0.15793012948799756,
            "y": 3.3307078414608644,
            "z": 3.791464568592886
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -0.13638543878774834,
            "y": 3.2319072151147226,
            "z": 3.744246004760173
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration"
        ],
        "label": "duration",
        "text": "duration",
        "color": "#F6E146",
        "additional": "duration",
        "position": {
            "x": -0.09668979134424416,
            "y": 3.33251536368772,
            "z": 3.7298498694302107
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration"
        ],
        "label": "duration",
        "text": "duration",
        "color": "#F6E146",
        "additional": "duration",
        "position": {
            "x": -0.09549481719450092,
            "y": 3.32364699090586,
            "z": 3.6471134504018843
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit"
        ],
        "label": "unit",
        "text": "unit",
        "color": "#F6E146",
        "additional": "unit",
        "position": {
            "x": -0.1066144904942945,
            "y": 3.4225723478820527,
            "z": 3.705687530308842
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit"
        ],
        "label": "unit",
        "text": "unit",
        "color": "#F6E146",
        "additional": "unit",
        "position": {
            "x": -0.17243206608994321,
            "y": 3.480013868640225,
            "z": 3.7161643100745896
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -0.19091267843059034,
            "y": 3.238709393237013,
            "z": 3.7906409576108864
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration"
        ],
        "label": "duration",
        "text": "duration",
        "color": "#F6E146",
        "additional": "duration",
        "position": {
            "x": -0.10464682292616856,
            "y": 3.239954227413853,
            "z": 3.685670249266162
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit"
        ],
        "label": "unit",
        "text": "unit",
        "color": "#F6E146",
        "additional": "unit",
        "position": {
            "x": -0.14096322553067875,
            "y": 3.4531070913428974,
            "z": 3.640403442655154
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": -0.24460486100946333,
            "y": 3.217822059143322,
            "z": 3.7492689340863734
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": -0.2625343057598224,
            "y": 3.3071662276285716,
            "z": 3.7905345255542464
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/key",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -1.4615074914334478,
            "y": 3.312160948319647,
            "z": 3.0831632416952823
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/key",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -1.438177095662955,
            "y": 3.2301499790026162,
            "z": 3.0527318460468447
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/value",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": -1.4129192496279264,
            "y": 3.3744687346055606,
            "z": 2.9941206379126157
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/value",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": -1.4065975239539492,
            "y": 3.2784691439616385,
            "z": 2.9874321914480393
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/duration": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/duration",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/duration"
        ],
        "label": "duration",
        "text": "duration",
        "color": "#F6E146",
        "additional": "duration",
        "position": {
            "x": -1.4579485593175772,
            "y": 3.2878316084054733,
            "z": 3.0136818483043215
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/duration": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/duration",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/duration"
        ],
        "label": "duration",
        "text": "duration",
        "color": "#F6E146",
        "additional": "duration",
        "position": {
            "x": -1.4508980890343435,
            "y": 3.377091199971977,
            "z": 3.0409585661429612
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers"
        ],
        "label": "producers",
        "text": "producers",
        "color": "#F6E146",
        "additional": "producers",
        "position": {
            "x": 1.0677167064453932,
            "y": 1.9968400759460845,
            "z": 0.6166389015175577
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers"
        ],
        "label": "producers",
        "text": "producers",
        "color": "#F6E146",
        "additional": "producers",
        "position": {
            "x": 1.1164526738463834,
            "y": 2.061850320257065,
            "z": 0.654847973305514
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers"
        ],
        "label": "consumers",
        "text": "consumers",
        "color": "#F6E146",
        "additional": "consumers",
        "position": {
            "x": 1.0173354364891276,
            "y": 2.0771689688440205,
            "z": 0.5122468352759966
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers"
        ],
        "label": "consumers",
        "text": "consumers",
        "color": "#F6E146",
        "additional": "consumers",
        "position": {
            "x": 0.9529523320800162,
            "y": 2.0683921023942915,
            "z": 0.5573886161061131
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity"
        ],
        "label": "capacity",
        "text": "capacity",
        "color": "#F6E146",
        "additional": "capacity",
        "position": {
            "x": 0.9371814041809272,
            "y": 2.1377052718999803,
            "z": 0.6497421600359741
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity"
        ],
        "label": "capacity",
        "text": "capacity",
        "color": "#F6E146",
        "additional": "capacity",
        "position": {
            "x": 0.9702657385447724,
            "y": 2.042607120991523,
            "z": 0.6579498538984452
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering"
        ],
        "label": "ordering",
        "text": "ordering",
        "color": "#F6E146",
        "additional": "ordering",
        "position": {
            "x": 1.1346052129137156,
            "y": 2.185543609776232,
            "z": 0.6021754310166562
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering"
        ],
        "label": "ordering",
        "text": "ordering",
        "color": "#F6E146",
        "additional": "ordering",
        "position": {
            "x": 1.0866807715911193,
            "y": 2.2245490543951427,
            "z": 0.5487602038493335
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q"
        ],
        "label": "q",
        "text": "q",
        "color": "#F6E146",
        "additional": "q",
        "position": {
            "x": 1.057208186189703,
            "y": 2.1498572302558028,
            "z": 0.7089762287781484
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q"
        ],
        "label": "q",
        "text": "q",
        "color": "#F6E146",
        "additional": "q",
        "position": {
            "x": 1.0568344819303008,
            "y": 2.240603709593037,
            "z": 0.6686824674469075
        }
    },
    "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.8486223760731586,
            "y": 0.5,
            "z": 2.66646213222098
        }
    },
    "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.8779423031847502,
            "y": 0.5803667395015559,
            "z": 2.623209951331425
        }
    },
    "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.8020735029312958,
            "y": 0.606300040077671,
            "z": 2.5297719409453583
        }
    },
    "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.7679529193810573,
            "y": 0.5121386447683534,
            "z": 2.536171469153963
        }
    },
    "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite": {
        "id": "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite"
        ],
        "label": "refreshAfterWrite",
        "text": "refreshAfterWrite",
        "color": "#F6E146",
        "additional": "refreshAfterWrite",
        "position": {
            "x": 0.7691423083252396,
            "y": 0.6626458709609458,
            "z": 2.7029442201923213
        }
    },
    "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite": {
        "id": "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite"
        ],
        "label": "refreshAfterWrite",
        "text": "refreshAfterWrite",
        "color": "#F6E146",
        "additional": "refreshAfterWrite",
        "position": {
            "x": 0.7281138913676637,
            "y": 0.5755455345220971,
            "z": 2.7176917345131293
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/clock": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/clock",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/clock"
        ],
        "label": "clock",
        "text": "clock",
        "color": "#F6E146",
        "additional": "clock",
        "position": {
            "x": 0.11730921686070817,
            "y": 2.6794982114472603,
            "z": 2.9569405439074075
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/clock": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/clock",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/clock"
        ],
        "label": "clock",
        "text": "clock",
        "color": "#F6E146",
        "additional": "clock",
        "position": {
            "x": 0.0906392550896693,
            "y": 2.7674529396552012,
            "z": 2.9829814205916083
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/duration": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/duration",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/duration"
        ],
        "label": "duration",
        "text": "duration",
        "color": "#F6E146",
        "additional": "duration",
        "position": {
            "x": 0.01979857772702598,
            "y": 2.6178272335188693,
            "z": 2.9679174875197782
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/duration": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/duration",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/duration"
        ],
        "label": "duration",
        "text": "duration",
        "color": "#F6E146",
        "additional": "duration",
        "position": {
            "x": 0.01221459862455987,
            "y": 2.7048833262273457,
            "z": 3.003127522199784
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/times": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/times",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/times"
        ],
        "label": "times",
        "text": "times",
        "color": "#F6E146",
        "additional": "times",
        "position": {
            "x": 0.07213558081301397,
            "y": 2.706364380637802,
            "z": 3.0154897722789156
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/times": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/times",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/times"
        ],
        "label": "times",
        "text": "times",
        "color": "#F6E146",
        "additional": "times",
        "position": {
            "x": 0.07661370795322542,
            "y": 2.6217281559215597,
            "z": 2.9783887479335007
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending"
        ],
        "label": "ascending",
        "text": "ascending",
        "color": "#F6E146",
        "additional": "ascending",
        "position": {
            "x": -0.4637650503416453,
            "y": 3.371574378295182,
            "z": 1.6530899748250714
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending"
        ],
        "label": "ascending",
        "text": "ascending",
        "color": "#F6E146",
        "additional": "ascending",
        "position": {
            "x": -0.5138662606214308,
            "y": 3.2920561835045903,
            "z": 1.645274836942817
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit"
        ],
        "label": "limit",
        "text": "limit",
        "color": "#F6E146",
        "additional": "limit",
        "position": {
            "x": -0.5484888146327471,
            "y": 3.3308434674021425,
            "z": 1.6800556782447815
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit"
        ],
        "label": "limit",
        "text": "limit",
        "color": "#F6E146",
        "additional": "limit",
        "position": {
            "x": -0.5031744182601079,
            "y": 3.4072573581042946,
            "z": 1.6847631921516448
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer"
        ],
        "label": "transformer",
        "text": "transformer",
        "color": "#F6E146",
        "additional": "transformer",
        "position": {
            "x": -0.4692800620258233,
            "y": 3.2493497240418145,
            "z": 1.6282841454722052
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer"
        ],
        "label": "transformer",
        "text": "transformer",
        "color": "#F6E146",
        "additional": "transformer",
        "position": {
            "x": -0.4312408401881369,
            "y": 3.3314229943378684,
            "z": 1.6243481797437755
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/buffer": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/buffer",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/buffer"
        ],
        "label": "buffer",
        "text": "buffer",
        "color": "#F6E146",
        "additional": "buffer",
        "position": {
            "x": 0.3588839835562059,
            "y": 3.5848839018742367,
            "z": 0.7836068635426552
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/buffer": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/buffer",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/buffer"
        ],
        "label": "buffer",
        "text": "buffer",
        "color": "#F6E146",
        "additional": "buffer",
        "position": {
            "x": 0.4033339252262458,
            "y": 3.499538814998164,
            "z": 0.7915027829790311
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/offset": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/offset",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/offset"
        ],
        "label": "offset",
        "text": "offset",
        "color": "#F6E146",
        "additional": "offset",
        "position": {
            "x": 0.5336916015674271,
            "y": 3.673004679334755,
            "z": 0.8595107746146884
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/offset": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/offset",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/offset"
        ],
        "label": "offset",
        "text": "offset",
        "color": "#F6E146",
        "additional": "offset",
        "position": {
            "x": 0.5388169796978697,
            "y": 3.569163212819405,
            "z": 0.8579430655879228
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/e": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/e",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/e"
        ],
        "label": "e",
        "text": "e",
        "color": "#F6E146",
        "additional": "e",
        "position": {
            "x": 0.5126798590409751,
            "y": 3.6176604033343223,
            "z": 0.726415541620276
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/e": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/e",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/e"
        ],
        "label": "e",
        "text": "e",
        "color": "#F6E146",
        "additional": "e",
        "position": {
            "x": 0.467813626502422,
            "y": 3.705551359182687,
            "z": 0.737216528454632
        }
    },
    "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 1.8783786062851262,
            "y": 1.3223552475659641,
            "z": 2.9206277080346803
        }
    },
    "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 1.9324996692149354,
            "y": 1.363533206835013,
            "z": 2.9680776885634788
        }
    },
    "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source": {
        "id": "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source"
        ],
        "label": "source",
        "text": "source",
        "color": "#F6E146",
        "additional": "source",
        "position": {
            "x": 2,
            "y": 1.4860479893933323,
            "z": 2.8191545582622872
        }
    },
    "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source": {
        "id": "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source"
        ],
        "label": "source",
        "text": "source",
        "color": "#F6E146",
        "additional": "source",
        "position": {
            "x": 1.9595586967239158,
            "y": 1.4177279384026025,
            "z": 2.779448466021545
        }
    },
    "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad": {
        "id": "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad"
        ],
        "label": "lastLoad",
        "text": "lastLoad",
        "color": "#F6E146",
        "additional": "lastLoad",
        "position": {
            "x": 1.968152075717743,
            "y": 1.527253751206438,
            "z": 2.9178363681207475
        }
    },
    "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad": {
        "id": "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad"
        ],
        "label": "lastLoad",
        "text": "lastLoad",
        "color": "#F6E146",
        "additional": "lastLoad",
        "position": {
            "x": 1.902303845185164,
            "y": 1.4878181606866376,
            "z": 2.9533869422894603
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/lowerBound": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/lowerBound",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/lowerBound"
        ],
        "label": "lowerBound",
        "text": "lowerBound",
        "color": "#F6E146",
        "additional": "lowerBound",
        "position": {
            "x": 0.031017013616539302,
            "y": 3.6235570920257616,
            "z": 4.296034576484995
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/lowerBound": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/lowerBound",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/lowerBound"
        ],
        "label": "lowerBound",
        "text": "lowerBound",
        "color": "#F6E146",
        "additional": "lowerBound",
        "position": {
            "x": 0.06881359902228823,
            "y": 3.5665972022140084,
            "z": 4.24772840537697
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/upperBound": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/upperBound",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/upperBound"
        ],
        "label": "upperBound",
        "text": "upperBound",
        "color": "#F6E146",
        "additional": "upperBound",
        "position": {
            "x": 0.04417222858592229,
            "y": 3.4990715822698792,
            "z": 4.201379689610103
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/upperBound": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/upperBound",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/upperBound"
        ],
        "label": "upperBound",
        "text": "upperBound",
        "color": "#F6E146",
        "additional": "upperBound",
        "position": {
            "x": 0.0518515442812606,
            "y": 3.5972277871571565,
            "z": 4.176044888753276
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/events": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/events",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/events"
        ],
        "label": "events",
        "text": "events",
        "color": "#F6E146",
        "additional": "events",
        "position": {
            "x": -0.01589957137190856,
            "y": 3.4484960373167635,
            "z": 4.253102827223816
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/events": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/events",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/events"
        ],
        "label": "events",
        "text": "events",
        "color": "#F6E146",
        "additional": "events",
        "position": {
            "x": -0.00142895311178326,
            "y": 3.5100663275585897,
            "z": 4.310328101477779
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/items": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/items",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/items"
        ],
        "label": "items",
        "text": "items",
        "color": "#F6E146",
        "additional": "items",
        "position": {
            "x": -0.5859457712627747,
            "y": 3.9900024013910476,
            "z": 4.113683113678713
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/items": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/items",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/items"
        ],
        "label": "items",
        "text": "items",
        "color": "#F6E146",
        "additional": "items",
        "position": {
            "x": -0.6221122477513272,
            "y": 3.894541521553579,
            "z": 4.123100283905896
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/constant": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/constant",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/constant"
        ],
        "label": "constant",
        "text": "constant",
        "color": "#F6E146",
        "additional": "constant",
        "position": {
            "x": -0.5736037195357226,
            "y": 3.9489358634300737,
            "z": 3.9735558044403896
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/constant": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/constant",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/constant"
        ],
        "label": "constant",
        "text": "constant",
        "color": "#F6E146",
        "additional": "constant",
        "position": {
            "x": -0.6220021757754304,
            "y": 3.873458088143044,
            "z": 3.9997888239628456
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/events": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/events",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/events"
        ],
        "label": "events",
        "text": "events",
        "color": "#F6E146",
        "additional": "events",
        "position": {
            "x": -0.6470196348695252,
            "y": 3.9250289226937296,
            "z": 4.052027815867767
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/events": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/events",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/events"
        ],
        "label": "events",
        "text": "events",
        "color": "#F6E146",
        "additional": "events",
        "position": {
            "x": -0.6003947579059985,
            "y": 4.003819666057496,
            "z": 4.027465371093758
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux"
        ],
        "label": "fpaux",
        "text": "fpaux",
        "color": "#F6E146",
        "additional": "fpaux",
        "position": {
            "x": -0.10967849176156141,
            "y": 1.0934351269865283,
            "z": 1.8064267447506488
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux"
        ],
        "label": "fpaux",
        "text": "fpaux",
        "color": "#F6E146",
        "additional": "fpaux",
        "position": {
            "x": -0.18206013908101526,
            "y": 1.0702514497086635,
            "z": 1.7835877398450888
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim"
        ],
        "label": "victim",
        "text": "victim",
        "color": "#F6E146",
        "additional": "victim",
        "position": {
            "x": -0.28375746488239706,
            "y": 1.201659067420675,
            "z": 1.827404205803722
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim"
        ],
        "label": "victim",
        "text": "victim",
        "color": "#F6E146",
        "additional": "victim",
        "position": {
            "x": -0.2647967866440919,
            "y": 1.0998088610860304,
            "z": 1.8503383483416986
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart"
        ],
        "label": "bucketStart",
        "text": "bucketStart",
        "color": "#F6E146",
        "additional": "bucketStart",
        "position": {
            "x": -0.15946334697896214,
            "y": 1.274235674854689,
            "z": 1.785436331591395
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart"
        ],
        "label": "bucketStart",
        "text": "bucketStart",
        "color": "#F6E146",
        "additional": "bucketStart",
        "position": {
            "x": -0.14851843796088326,
            "y": 1.1916116982478282,
            "z": 1.7424719453559803
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset"
        ],
        "label": "removedOffset",
        "text": "removedOffset",
        "color": "#F6E146",
        "additional": "removedOffset",
        "position": {
            "x": -0.2644877088701376,
            "y": 1.1939962853468797,
            "z": 1.7633069365780145
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset"
        ],
        "label": "removedOffset",
        "text": "removedOffset",
        "color": "#F6E146",
        "additional": "removedOffset",
        "position": {
            "x": -0.21526697169370856,
            "y": 1.2540959856828757,
            "z": 1.7565591330651391
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux"
        ],
        "label": "fpaux",
        "text": "fpaux",
        "color": "#F6E146",
        "additional": "fpaux",
        "position": {
            "x": -0.16250932394332884,
            "y": 1.046050341564699,
            "z": 1.8488855057477027
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim"
        ],
        "label": "victim",
        "text": "victim",
        "color": "#F6E146",
        "additional": "victim",
        "position": {
            "x": -0.24688529214970267,
            "y": 1.125338377608698,
            "z": 1.785619549918043
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart"
        ],
        "label": "bucketStart",
        "text": "bucketStart",
        "color": "#F6E146",
        "additional": "bucketStart",
        "position": {
            "x": -0.09905875687686838,
            "y": 1.1964982718138026,
            "z": 1.791777558429543
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset"
        ],
        "label": "removedOffset",
        "text": "removedOffset",
        "color": "#F6E146",
        "additional": "removedOffset",
        "position": {
            "x": -0.19813905237187623,
            "y": 1.144211388604064,
            "z": 1.7460803514173604
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx"
        ],
        "label": "idx",
        "text": "idx",
        "color": "#F6E146",
        "additional": "idx",
        "position": {
            "x": 0.011777022165658568,
            "y": 1.9376652545203878,
            "z": 3.745050245412798
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/idx": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/idx",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx"
        ],
        "label": "idx",
        "text": "idx",
        "color": "#F6E146",
        "additional": "idx",
        "position": {
            "x": 0.04990548114830062,
            "y": 1.897666808495172,
            "z": 3.8018104555068772
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start"
        ],
        "label": "start",
        "text": "start",
        "color": "#F6E146",
        "additional": "start",
        "position": {
            "x": 0.11133026386302047,
            "y": 1.7538526587403331,
            "z": 3.7622324295083955
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/start": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/start",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start"
        ],
        "label": "start",
        "text": "start",
        "color": "#F6E146",
        "additional": "start",
        "position": {
            "x": 0.08299153357659961,
            "y": 1.8173452717098513,
            "z": 3.8103623513700695
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/delta",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta"
        ],
        "label": "delta",
        "text": "delta",
        "color": "#F6E146",
        "additional": "delta",
        "position": {
            "x": -0.058986658151130245,
            "y": 1.7054210084690433,
            "z": 3.7970184325005363
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/delta": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/delta",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta"
        ],
        "label": "delta",
        "text": "delta",
        "color": "#F6E146",
        "additional": "delta",
        "position": {
            "x": -0.06563592514371375,
            "y": 1.812447136248875,
            "z": 3.8066840413605574
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/idx"
        ],
        "label": "idx",
        "text": "idx",
        "color": "#F6E146",
        "additional": "idx",
        "position": {
            "x": -0.030268572978815023,
            "y": 1.8946543695647948,
            "z": 3.798596544080643
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": 0.0035525331128321014,
            "y": 1.7008982003260815,
            "z": 3.795892647734782
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": 0.009466010763424126,
            "y": 1.7976318577181845,
            "z": 3.818710089283424
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/start"
        ],
        "label": "start",
        "text": "start",
        "color": "#F6E146",
        "additional": "start",
        "position": {
            "x": 0.06275278601493639,
            "y": 1.7112844346560332,
            "z": 3.8103928246469945
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/delta"
        ],
        "label": "delta",
        "text": "delta",
        "color": "#F6E146",
        "additional": "delta",
        "position": {
            "x": -0.0960664977107033,
            "y": 1.766079765052701,
            "z": 3.7478245118815177
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/fpaux": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/fpaux",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux"
        ],
        "label": "fpaux",
        "text": "fpaux",
        "color": "#F6E146",
        "additional": "fpaux",
        "position": {
            "x": -1.958512522595065,
            "y": 2.4999259169145662,
            "z": 1.524879153092974
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux"
        ],
        "label": "fpaux",
        "text": "fpaux",
        "color": "#F6E146",
        "additional": "fpaux",
        "position": {
            "x": -1.884589221568839,
            "y": 2.493127377455299,
            "z": 1.527116690661251
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/chainIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/chainIndex",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex"
        ],
        "label": "chainIndex",
        "text": "chainIndex",
        "color": "#F6E146",
        "additional": "chainIndex",
        "position": {
            "x": -1.940429903772338,
            "y": 2.74614550233701,
            "z": 1.4827967149342225
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex"
        ],
        "label": "chainIndex",
        "text": "chainIndex",
        "color": "#F6E146",
        "additional": "chainIndex",
        "position": {
            "x": -1.919738308310365,
            "y": 2.7714252526985006,
            "z": 1.412902860265604
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/isLastIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/isLastIndex",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex"
        ],
        "label": "isLastIndex",
        "text": "isLastIndex",
        "color": "#F6E146",
        "additional": "isLastIndex",
        "position": {
            "x": -2,
            "y": 2.567389970244188,
            "z": 1.352445780008018
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex"
        ],
        "label": "isLastIndex",
        "text": "isLastIndex",
        "color": "#F6E146",
        "additional": "isLastIndex",
        "position": {
            "x": -1.9822891380381396,
            "y": 2.6662789230419253,
            "z": 1.3476528069232863
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux"
        ],
        "label": "fpaux",
        "text": "fpaux",
        "color": "#F6E146",
        "additional": "fpaux",
        "position": {
            "x": -1.879233669194544,
            "y": 2.4400397284531214,
            "z": 1.4644636837587852
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex"
        ],
        "label": "chainIndex",
        "text": "chainIndex",
        "color": "#F6E146",
        "additional": "chainIndex",
        "position": {
            "x": -1.8496524870447268,
            "y": 2.734263490385818,
            "z": 1.4146224825509641
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex"
        ],
        "label": "isLastIndex",
        "text": "isLastIndex",
        "color": "#F6E146",
        "additional": "isLastIndex",
        "position": {
            "x": -1.9154405440184954,
            "y": 2.6422824887607157,
            "z": 1.3123461357012862
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux"
        ],
        "label": "fpaux",
        "text": "fpaux",
        "color": "#F6E146",
        "additional": "fpaux",
        "position": {
            "x": -1.952395702645794,
            "y": 2.441649450590795,
            "z": 1.4624196526256492
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex"
        ],
        "label": "chainIndex",
        "text": "chainIndex",
        "color": "#F6E146",
        "additional": "chainIndex",
        "position": {
            "x": -1.8684891464621318,
            "y": 2.733933713654476,
            "z": 1.4898229345341703
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex"
        ],
        "label": "isLastIndex",
        "text": "isLastIndex",
        "color": "#F6E146",
        "additional": "isLastIndex",
        "position": {
            "x": -1.93281271879998,
            "y": 2.5437750732991287,
            "z": 1.3176146816683503
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/hitCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/hitCount",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/hitCount",
            "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/hitCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/hitCount"
        ],
        "label": "hitCount",
        "text": "hitCount",
        "color": "#F6E146",
        "additional": "hitCount",
        "position": {
            "x": 0.2951850076962712,
            "y": 1.8915937761060149,
            "z": 1.327687757797281
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/hitCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/hitCount",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/hitCount",
            "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/hitCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/hitCount"
        ],
        "label": "hitCount",
        "text": "hitCount",
        "color": "#F6E146",
        "additional": "hitCount",
        "position": {
            "x": 0.2525563984218806,
            "y": 1.8649371322771913,
            "z": 1.3703794735170378
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/missCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/missCount",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/missCount",
            "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/missCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/missCount"
        ],
        "label": "missCount",
        "text": "missCount",
        "color": "#F6E146",
        "additional": "missCount",
        "position": {
            "x": 0.21481028852285977,
            "y": 1.4991217863159587,
            "z": 1.4426426936597971
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/missCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/missCount",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/missCount",
            "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/missCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/missCount"
        ],
        "label": "missCount",
        "text": "missCount",
        "color": "#F6E146",
        "additional": "missCount",
        "position": {
            "x": 0.2458360861535973,
            "y": 1.4879821740027666,
            "z": 1.499329348491643
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadSuccessCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadSuccessCount",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadSuccessCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/loadSuccessCount"
        ],
        "label": "loadSuccessCount",
        "text": "loadSuccessCount",
        "color": "#F6E146",
        "additional": "loadSuccessCount",
        "position": {
            "x": 0.44106692431719896,
            "y": 1.6497769267959446,
            "z": 1.4241941387457548
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadSuccessCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadSuccessCount",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadSuccessCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/loadSuccessCount"
        ],
        "label": "loadSuccessCount",
        "text": "loadSuccessCount",
        "color": "#F6E146",
        "additional": "loadSuccessCount",
        "position": {
            "x": 0.41415437572965574,
            "y": 1.5661080169940318,
            "z": 1.437792139199178
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadFailureCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadFailureCount",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadFailureCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/loadFailureCount"
        ],
        "label": "loadFailureCount",
        "text": "loadFailureCount",
        "color": "#F6E146",
        "additional": "loadFailureCount",
        "position": {
            "x": 0.3625408649428197,
            "y": 1.5509997236668174,
            "z": 1.3289924125398778
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadFailureCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadFailureCount",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadFailureCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/loadFailureCount"
        ],
        "label": "loadFailureCount",
        "text": "loadFailureCount",
        "color": "#F6E146",
        "additional": "loadFailureCount",
        "position": {
            "x": 0.3549438205065747,
            "y": 1.4959318481110615,
            "z": 1.3888046708262212
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/totalLoadTime": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/totalLoadTime",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/totalLoadTime",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/totalLoadTime"
        ],
        "label": "totalLoadTime",
        "text": "totalLoadTime",
        "color": "#F6E146",
        "additional": "totalLoadTime",
        "position": {
            "x": 0.3684860047704115,
            "y": 1.7787331894385123,
            "z": 1.4702116972153134
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/totalLoadTime": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/totalLoadTime",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/totalLoadTime",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/totalLoadTime"
        ],
        "label": "totalLoadTime",
        "text": "totalLoadTime",
        "color": "#F6E146",
        "additional": "totalLoadTime",
        "position": {
            "x": 0.4268981210327971,
            "y": 1.7422029848292397,
            "z": 1.4413103969465324
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionCount",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionCount",
            "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/evictionCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/evictionCount"
        ],
        "label": "evictionCount",
        "text": "evictionCount",
        "color": "#F6E146",
        "additional": "evictionCount",
        "position": {
            "x": 0.13324398974183538,
            "y": 1.7349906362638843,
            "z": 1.3394484585614213
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionCount",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionCount",
            "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/evictionCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/evictionCount"
        ],
        "label": "evictionCount",
        "text": "evictionCount",
        "color": "#F6E146",
        "additional": "evictionCount",
        "position": {
            "x": 0.16725095896415798,
            "y": 1.809262079882388,
            "z": 1.3333026294988868
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionWeight": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionWeight",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionWeight",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/evictionWeight"
        ],
        "label": "evictionWeight",
        "text": "evictionWeight",
        "color": "#F6E146",
        "additional": "evictionWeight",
        "position": {
            "x": 0.22000501008786832,
            "y": 1.61169255048757,
            "z": 1.4500961688824223
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionWeight": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionWeight",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionWeight",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/evictionWeight"
        ],
        "label": "evictionWeight",
        "text": "evictionWeight",
        "color": "#F6E146",
        "additional": "evictionWeight",
        "position": {
            "x": 0.21567371906227484,
            "y": 1.6468377352777406,
            "z": 1.508003784891841
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/hitCount": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/hitCount",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/hitCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/hitCount"
        ],
        "label": "hitCount",
        "text": "hitCount",
        "color": "#F6E146",
        "additional": "hitCount",
        "position": {
            "x": 0.18118226702024254,
            "y": 1.9456548336968447,
            "z": 1.3367829504673734
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/missCount": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/missCount",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/missCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/missCount"
        ],
        "label": "missCount",
        "text": "missCount",
        "color": "#F6E146",
        "additional": "missCount",
        "position": {
            "x": 0.12566992150353773,
            "y": 1.534929060346303,
            "z": 1.485517938620255
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/evictionCount": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/evictionCount",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionCount"
        ],
        "label": "evictionCount",
        "text": "evictionCount",
        "color": "#F6E146",
        "additional": "evictionCount",
        "position": {
            "x": 0.06376711523909506,
            "y": 1.8473068701910715,
            "z": 1.3120084239416796
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/hitCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/hitCount",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/hitCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/hitCount"
        ],
        "label": "hitCount",
        "text": "hitCount",
        "color": "#F6E146",
        "additional": "hitCount",
        "position": {
            "x": 0.26102126222224253,
            "y": 1.831028761078794,
            "z": 1.264809387680601
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/missCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/missCount",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/missCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/missCount"
        ],
        "label": "missCount",
        "text": "missCount",
        "color": "#F6E146",
        "additional": "missCount",
        "position": {
            "x": 0.24191324915932633,
            "y": 1.4077214818119321,
            "z": 1.4078666335088514
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/loadSuccessCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/loadSuccessCount",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadSuccessCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadSuccessCount"
        ],
        "label": "loadSuccessCount",
        "text": "loadSuccessCount",
        "color": "#F6E146",
        "additional": "loadSuccessCount",
        "position": {
            "x": 0.4491138482025421,
            "y": 1.5763926896661433,
            "z": 1.3455871375539497
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/loadFailureCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/loadFailureCount",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadFailureCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadFailureCount"
        ],
        "label": "loadFailureCount",
        "text": "loadFailureCount",
        "color": "#F6E146",
        "additional": "loadFailureCount",
        "position": {
            "x": 0.3511985784180487,
            "y": 1.4423305127268826,
            "z": 1.2929051497606194
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/totalLoadTime": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/totalLoadTime",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/totalLoadTime",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/totalLoadTime"
        ],
        "label": "totalLoadTime",
        "text": "totalLoadTime",
        "color": "#F6E146",
        "additional": "totalLoadTime",
        "position": {
            "x": 0.3922134571390328,
            "y": 1.7661197825116477,
            "z": 1.369095906075956
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/evictionCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/evictionCount",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionCount"
        ],
        "label": "evictionCount",
        "text": "evictionCount",
        "color": "#F6E146",
        "additional": "evictionCount",
        "position": {
            "x": 0.14397349622704336,
            "y": 1.7333411090990332,
            "z": 1.251149288544334
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/evictionWeight": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/evictionWeight",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionWeight",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionWeight"
        ],
        "label": "evictionWeight",
        "text": "evictionWeight",
        "color": "#F6E146",
        "additional": "evictionWeight",
        "position": {
            "x": 0.15023352737417373,
            "y": 1.587505635189103,
            "z": 1.4186832929611133
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 1.550564773770347,
            "y": 2.9094302119900215,
            "z": 2.0540197619921825
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 1.4995906395068221,
            "y": 2.8486366890076535,
            "z": 2.0367701347436835
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": 1.471246360665024,
            "y": 3.0154836258985274,
            "z": 1.9429247532695095
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": 1.4083843345872205,
            "y": 3.0514283028610985,
            "z": 1.9743048338376012
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": 1.5109495221845188,
            "y": 3.0288979573967207,
            "z": 2.197810907271985
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": 1.5533187515835873,
            "y": 3.0723513695683744,
            "z": 2.1497890538113866
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 1.5577796992932176,
            "y": 2.89135491248001,
            "z": 2.1137741224660855
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": 1.4548610793915113,
            "y": 2.945593852984969,
            "z": 1.9760882913591713
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": 1.4533913450340163,
            "y": 3.1488495903405256,
            "z": 2.1623741727128714
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 1.5005784210990325,
            "y": 2.8670249609264404,
            "z": 2.1434719515374616
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": 1.5279353859661025,
            "y": 3.0247336203081407,
            "z": 1.9949824905462699
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": 1.5196317733885172,
            "y": 3.147018470169304,
            "z": 2.134437125212385
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 1.4708414298961263,
            "y": 2.8252844653250393,
            "z": 2.091145285965086
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": 1.4784337857821943,
            "y": 3.1020063205962485,
            "z": 1.991686825571341
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": 1.472977890330057,
            "y": 3.0962580487567974,
            "z": 2.211281399149804
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.38542043007245863,
            "y": 3.575350550057357,
            "z": 2.4626018332194732
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.39505398120930457,
            "y": 3.6208174355543803,
            "z": 2.397233228035744
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/key": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/key",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -0.4219818479250954,
            "y": 3.4742518642335334,
            "z": 2.359510802442281
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/key": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/key",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -0.4320752547425204,
            "y": 3.542977083652782,
            "z": 2.4098713042591697
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/oldValue": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/oldValue",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/oldValue"
        ],
        "label": "oldValue",
        "text": "oldValue",
        "color": "#F6E146",
        "additional": "oldValue",
        "position": {
            "x": -0.426803486278432,
            "y": 3.5333099440040363,
            "z": 2.4626075527272033
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/oldValue": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/oldValue",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/oldValue"
        ],
        "label": "oldValue",
        "text": "oldValue",
        "color": "#F6E146",
        "additional": "oldValue",
        "position": {
            "x": -0.4296273369568673,
            "y": 3.4605311624908777,
            "z": 2.417314826483844
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/newValue": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/newValue",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/newValue"
        ],
        "label": "newValue",
        "text": "newValue",
        "color": "#F6E146",
        "additional": "newValue",
        "position": {
            "x": -0.4442556132340483,
            "y": 3.6072127150062534,
            "z": 2.394571599158334
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/newValue": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/newValue",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/newValue"
        ],
        "label": "newValue",
        "text": "newValue",
        "color": "#F6E146",
        "additional": "newValue",
        "position": {
            "x": -0.4444438650297784,
            "y": 3.5365523305877926,
            "z": 2.346959541167455
        }
    },
    "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason": {
        "id": "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason"
        ],
        "label": "reason",
        "text": "reason",
        "color": "#F6E146",
        "additional": "reason",
        "position": {
            "x": 1.2008819807041298,
            "y": 3.099010894572872,
            "z": 0.9906020100841985
        }
    },
    "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason": {
        "id": "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason"
        ],
        "label": "reason",
        "text": "reason",
        "color": "#F6E146",
        "additional": "reason",
        "position": {
            "x": 1.2603043630874051,
            "y": 3.140823629912837,
            "z": 1.028760139179746
        }
    },
    "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual": {
        "id": "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual"
        ],
        "label": "actual",
        "text": "actual",
        "color": "#F6E146",
        "additional": "actual",
        "position": {
            "x": 1.3153517500891265,
            "y": 2.89929204617309,
            "z": 1.0555985300939281
        }
    },
    "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual": {
        "id": "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual"
        ],
        "label": "actual",
        "text": "actual",
        "color": "#F6E146",
        "additional": "actual",
        "position": {
            "x": 1.3647596175961265,
            "y": 2.9593880051321486,
            "z": 1.015055933018846
        }
    },
    "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher": {
        "id": "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher"
        ],
        "label": "matcher",
        "text": "matcher",
        "color": "#F6E146",
        "additional": "matcher",
        "position": {
            "x": 1.2045664251292072,
            "y": 2.966137060962412,
            "z": 0.9514945400461736
        }
    },
    "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher": {
        "id": "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher"
        ],
        "label": "matcher",
        "text": "matcher",
        "color": "#F6E146",
        "additional": "matcher",
        "position": {
            "x": 1.2384611750143963,
            "y": 2.888595308457644,
            "z": 0.9921473796363114
        }
    },
    "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/NUM_PRODUCERS": {
        "id": "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/NUM_PRODUCERS",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/NUM_PRODUCERS"
        ],
        "label": "NUM_PRODUCERS",
        "text": "NUM_PRODUCERS",
        "color": "#F6E146",
        "additional": "NUM_PRODUCERS",
        "position": {
            "x": 1.7754693402384194,
            "y": 3.7906742772540643,
            "z": 1.7749398001211913
        }
    },
    "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/NUM_PRODUCERS": {
        "id": "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/NUM_PRODUCERS",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/NUM_PRODUCERS"
        ],
        "label": "NUM_PRODUCERS",
        "text": "NUM_PRODUCERS",
        "color": "#F6E146",
        "additional": "NUM_PRODUCERS",
        "position": {
            "x": 1.7245713661731505,
            "y": 3.8797665289726457,
            "z": 1.8179071397486624
        }
    },
    "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/POPULATED_SIZE": {
        "id": "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/POPULATED_SIZE",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/POPULATED_SIZE"
        ],
        "label": "POPULATED_SIZE",
        "text": "POPULATED_SIZE",
        "color": "#F6E146",
        "additional": "POPULATED_SIZE",
        "position": {
            "x": 1.6451796653032722,
            "y": 3.7464329019200777,
            "z": 1.6620665652524447
        }
    },
    "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/POPULATED_SIZE": {
        "id": "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/POPULATED_SIZE",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/POPULATED_SIZE"
        ],
        "label": "POPULATED_SIZE",
        "text": "POPULATED_SIZE",
        "color": "#F6E146",
        "additional": "POPULATED_SIZE",
        "position": {
            "x": 1.592906189115026,
            "y": 3.8354228701580193,
            "z": 1.7034669722651439
        }
    },
    "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/PRODUCE": {
        "id": "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/PRODUCE",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/PRODUCE"
        ],
        "label": "PRODUCE",
        "text": "PRODUCE",
        "color": "#F6E146",
        "additional": "PRODUCE",
        "position": {
            "x": 1.6953234735289304,
            "y": 3.667022182431326,
            "z": 1.8253788647692575
        }
    },
    "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/PRODUCE": {
        "id": "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/PRODUCE",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/PRODUCE"
        ],
        "label": "PRODUCE",
        "text": "PRODUCE",
        "color": "#F6E146",
        "additional": "PRODUCE",
        "position": {
            "x": 1.6420288125012972,
            "y": 3.756247908993353,
            "z": 1.8661277002319294
        }
    },
    "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/UNSAFE": {
        "id": "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/UNSAFE",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/UNSAFE"
        ],
        "label": "UNSAFE",
        "text": "UNSAFE",
        "color": "#F6E146",
        "additional": "UNSAFE",
        "position": {
            "x": 0.9744295666698641,
            "y": 2.3388300916405287,
            "z": 4.207503553541508
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/UNSAFE": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/UNSAFE",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/UNSAFE"
        ],
        "label": "UNSAFE",
        "text": "UNSAFE",
        "color": "#F6E146",
        "additional": "UNSAFE",
        "position": {
            "x": 0.9827123580247044,
            "y": 2.230131332658135,
            "z": 4.247079556145761
        }
    },
    "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/ANDROID": {
        "id": "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/ANDROID",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/ANDROID"
        ],
        "label": "ANDROID",
        "text": "ANDROID",
        "color": "#F6E146",
        "additional": "ANDROID",
        "position": {
            "x": 0.8247156655508396,
            "y": 2.293301521888077,
            "z": 4.176535164056139
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/ANDROID": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/ANDROID",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/ANDROID"
        ],
        "label": "ANDROID",
        "text": "ANDROID",
        "color": "#F6E146",
        "additional": "ANDROID",
        "position": {
            "x": 0.8286993820598307,
            "y": 2.184458612463851,
            "z": 4.216619422839809
        }
    },
    "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/OPEN_JDK": {
        "id": "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/OPEN_JDK",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/OPEN_JDK"
        ],
        "label": "OPEN_JDK",
        "text": "OPEN_JDK",
        "color": "#F6E146",
        "additional": "OPEN_JDK",
        "position": {
            "x": 0.8690971346609784,
            "y": 2.4538184179120135,
            "z": 4.325001248550975
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/OPEN_JDK": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/OPEN_JDK",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/OPEN_JDK"
        ],
        "label": "OPEN_JDK",
        "text": "OPEN_JDK",
        "color": "#F6E146",
        "additional": "OPEN_JDK",
        "position": {
            "x": 0.8719073112390343,
            "y": 2.343019663607939,
            "z": 4.363023162616235
        }
    },
    "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/lvalue": {
        "id": "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/lvalue",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/lvalue"
        ],
        "label": "lvalue",
        "text": "lvalue",
        "color": "#F6E146",
        "additional": "lvalue",
        "position": {
            "x": -1.2679936022132825,
            "y": 1.445905176183472,
            "z": 3.423947627608897
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/lvalue": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/lvalue",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/lvalue"
        ],
        "label": "lvalue",
        "text": "lvalue",
        "color": "#F6E146",
        "additional": "lvalue",
        "position": {
            "x": -1.2582193318801078,
            "y": 1.358512797984912,
            "z": 3.3569745964034308
        }
    },
    "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/LVALUE_OFFSET": {
        "id": "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/LVALUE_OFFSET",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/LVALUE_OFFSET"
        ],
        "label": "LVALUE_OFFSET",
        "text": "LVALUE_OFFSET",
        "color": "#F6E146",
        "additional": "LVALUE_OFFSET",
        "position": {
            "x": -1.4716007385429923,
            "y": 1.400308633834415,
            "z": 3.453531085415131
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/LVALUE_OFFSET": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/LVALUE_OFFSET",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/LVALUE_OFFSET"
        ],
        "label": "LVALUE_OFFSET",
        "text": "LVALUE_OFFSET",
        "color": "#F6E146",
        "additional": "LVALUE_OFFSET",
        "position": {
            "x": -1.4575429340476402,
            "y": 1.3135176496314331,
            "z": 3.386074166088
        }
    },
    "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/IVALUE_OFFSET": {
        "id": "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/IVALUE_OFFSET",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/IVALUE_OFFSET"
        ],
        "label": "IVALUE_OFFSET",
        "text": "IVALUE_OFFSET",
        "color": "#F6E146",
        "additional": "IVALUE_OFFSET",
        "position": {
            "x": -1.3264312213786158,
            "y": 1.3388550450016652,
            "z": 3.496944815997472
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/IVALUE_OFFSET": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/IVALUE_OFFSET",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/IVALUE_OFFSET"
        ],
        "label": "IVALUE_OFFSET",
        "text": "IVALUE_OFFSET",
        "color": "#F6E146",
        "additional": "IVALUE_OFFSET",
        "position": {
            "x": -1.3144679545992832,
            "y": 1.2496148177233342,
            "z": 3.4304818009198494
        }
    },
    "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/ivalue": {
        "id": "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/ivalue",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/ivalue"
        ],
        "label": "ivalue",
        "text": "ivalue",
        "color": "#F6E146",
        "additional": "ivalue",
        "position": {
            "x": -1.4196424290038832,
            "y": 1.514487538363276,
            "z": 3.358621166831951
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/ivalue": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/ivalue",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/ivalue"
        ],
        "label": "ivalue",
        "text": "ivalue",
        "color": "#F6E146",
        "additional": "ivalue",
        "position": {
            "x": -1.409526381215287,
            "y": 1.4259269625675446,
            "z": 3.291410203211865
        }
    },
    "com.github.benmanes.caffeine.cache.Caffeine/memberField/initialCapacity": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/memberField/initialCapacity",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/initialCapacity"
        ],
        "label": "initialCapacity",
        "text": "initialCapacity",
        "color": "#F6E146",
        "additional": "initialCapacity",
        "position": {
            "x": 0.16151386168533488,
            "y": 2.4429208258410804,
            "z": 1.861095381822786
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/initialCapacity": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/initialCapacity",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/memberField/initialCapacity"
        ],
        "label": "initialCapacity",
        "text": "initialCapacity",
        "color": "#F6E146",
        "additional": "initialCapacity",
        "position": {
            "x": 0.015172370781849853,
            "y": 2.4062531287948,
            "z": 1.7942396145958144
        }
    },
    "com.github.benmanes.caffeine.cache.Caffeine/memberField/maximumSize": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/memberField/maximumSize",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/maximumSize"
        ],
        "label": "maximumSize",
        "text": "maximumSize",
        "color": "#F6E146",
        "additional": "maximumSize",
        "position": {
            "x": 0.18808120480907942,
            "y": 2.3875410281549363,
            "z": 1.8199887201196259
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/maximumSize": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/maximumSize",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/memberField/maximumSize"
        ],
        "label": "maximumSize",
        "text": "maximumSize",
        "color": "#F6E146",
        "additional": "maximumSize",
        "position": {
            "x": 0.045263729144402465,
            "y": 2.3457103210960115,
            "z": 1.7477857585106273
        }
    },
    "com.github.benmanes.caffeine.cache.Caffeine/memberField/maximumWeight": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/memberField/maximumWeight",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/maximumWeight"
        ],
        "label": "maximumWeight",
        "text": "maximumWeight",
        "color": "#F6E146",
        "additional": "maximumWeight",
        "position": {
            "x": 0.16337057845117142,
            "y": 2.3421715432318173,
            "z": 1.8769781516707071
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/maximumWeight": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/maximumWeight",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/memberField/maximumWeight"
        ],
        "label": "maximumWeight",
        "text": "maximumWeight",
        "color": "#F6E146",
        "additional": "maximumWeight",
        "position": {
            "x": 0.016561944626848568,
            "y": 2.2932239540611583,
            "z": 1.8143999649986824
        }
    },
    "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/MASK": {
        "id": "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/MASK",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/MASK"
        ],
        "label": "MASK",
        "text": "MASK",
        "color": "#F6E146",
        "additional": "MASK",
        "position": {
            "x": 1.4441811922597214,
            "y": 3.1895047567493386,
            "z": 2.912558149011648
        }
    },
    "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/MASK": {
        "id": "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/MASK",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/MASK"
        ],
        "label": "MASK",
        "text": "MASK",
        "color": "#F6E146",
        "additional": "MASK",
        "position": {
            "x": 1.4439502391762065,
            "y": 3.2943880897219495,
            "z": 2.9564089946437053
        }
    },
    "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/SIZE": {
        "id": "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/SIZE",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/SIZE"
        ],
        "label": "SIZE",
        "text": "SIZE",
        "color": "#F6E146",
        "additional": "SIZE",
        "position": {
            "x": 1.3012302097689243,
            "y": 3.238235536976218,
            "z": 2.872136097929849
        }
    },
    "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/SIZE": {
        "id": "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/SIZE",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/SIZE"
        ],
        "label": "SIZE",
        "text": "SIZE",
        "color": "#F6E146",
        "additional": "SIZE",
        "position": {
            "x": 1.3009600595109663,
            "y": 3.3469074585453455,
            "z": 2.9118855814166196
        }
    },
    "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/ITEMS": {
        "id": "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/ITEMS",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/ITEMS"
        ],
        "label": "ITEMS",
        "text": "ITEMS",
        "color": "#F6E146",
        "additional": "ITEMS",
        "position": {
            "x": 1.2981061226500312,
            "y": 3.0841765100338723,
            "z": 3.0183029052434804
        }
    },
    "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/ITEMS": {
        "id": "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/ITEMS",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/ITEMS"
        ],
        "label": "ITEMS",
        "text": "ITEMS",
        "color": "#F6E146",
        "additional": "ITEMS",
        "position": {
            "x": 1.3002885163453484,
            "y": 3.1900518819315637,
            "z": 3.05927680306173
        }
    },
    "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ITEMS": {
        "id": "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ITEMS",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ITEMS",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ITEMS"
        ],
        "label": "ITEMS",
        "text": "ITEMS",
        "color": "#F6E146",
        "additional": "ITEMS",
        "position": {
            "x": -0.5022859509654041,
            "y": 1.9744185566490737,
            "z": 3.846420447723715
        }
    },
    "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ITEMS": {
        "id": "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ITEMS",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ITEMS",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ITEMS"
        ],
        "label": "ITEMS",
        "text": "ITEMS",
        "color": "#F6E146",
        "additional": "ITEMS",
        "position": {
            "x": -0.5890593160050066,
            "y": 1.9260222179734208,
            "z": 3.8511050862896443
        }
    },
    "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ints": {
        "id": "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ints",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ints",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ints"
        ],
        "label": "ints",
        "text": "ints",
        "color": "#F6E146",
        "additional": "ints",
        "position": {
            "x": -0.6198589296702026,
            "y": 2.2191732177600114,
            "z": 4.019728795309858
        }
    },
    "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ints": {
        "id": "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ints",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ints",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ints"
        ],
        "label": "ints",
        "text": "ints",
        "color": "#F6E146",
        "additional": "ints",
        "position": {
            "x": -0.7021296990712063,
            "y": 2.1538196455512013,
            "z": 4.002783276368849
        }
    },
    "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/MASK": {
        "id": "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/MASK",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/MASK",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/MASK"
        ],
        "label": "MASK",
        "text": "MASK",
        "color": "#F6E146",
        "additional": "MASK",
        "position": {
            "x": -0.5406101764716977,
            "y": 2.344982878506058,
            "z": 3.9086957826661215
        }
    },
    "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/MASK": {
        "id": "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/MASK",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/MASK",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/MASK"
        ],
        "label": "MASK",
        "text": "MASK",
        "color": "#F6E146",
        "additional": "MASK",
        "position": {
            "x": -0.6207126415205497,
            "y": 2.2717118692786853,
            "z": 3.884676148364485
        }
    },
    "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/SIZE": {
        "id": "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/SIZE",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/SIZE",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/SIZE"
        ],
        "label": "SIZE",
        "text": "SIZE",
        "color": "#F6E146",
        "additional": "SIZE",
        "position": {
            "x": -0.6522550475260196,
            "y": 1.9298134642947886,
            "z": 3.8119987243617053
        }
    },
    "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/SIZE": {
        "id": "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/SIZE",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/SIZE",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/SIZE"
        ],
        "label": "SIZE",
        "text": "SIZE",
        "color": "#F6E146",
        "additional": "SIZE",
        "position": {
            "x": -0.7386029743725806,
            "y": 1.8743647354246387,
            "z": 3.805506910164161
        }
    },
    "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ITEMS": {
        "id": "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ITEMS",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ITEMS",
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ITEMS"
        ],
        "label": "ITEMS",
        "text": "ITEMS",
        "color": "#F6E146",
        "additional": "ITEMS",
        "position": {
            "x": -0.5889780981337871,
            "y": 2.0443466207627905,
            "z": 3.814990570701968
        }
    },
    "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ints": {
        "id": "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ints",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ints",
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ints"
        ],
        "label": "ints",
        "text": "ints",
        "color": "#F6E146",
        "additional": "ints",
        "position": {
            "x": -0.71114765397629,
            "y": 2.2713095836328683,
            "z": 3.9843702789252298
        }
    },
    "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/MASK": {
        "id": "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/MASK",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/MASK",
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/MASK"
        ],
        "label": "MASK",
        "text": "MASK",
        "color": "#F6E146",
        "additional": "MASK",
        "position": {
            "x": -0.634201168166912,
            "y": 2.3865872893604934,
            "z": 3.876669488523691
        }
    },
    "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/SIZE": {
        "id": "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/SIZE",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/SIZE",
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/SIZE"
        ],
        "label": "SIZE",
        "text": "SIZE",
        "color": "#F6E146",
        "additional": "SIZE",
        "position": {
            "x": -0.7315735868529218,
            "y": 1.9875523393647927,
            "z": 3.766869540864298
        }
    },
    "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/cacheType": {
        "id": "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/cacheType",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/cacheType"
        ],
        "label": "cacheType",
        "text": "cacheType",
        "color": "#F6E146",
        "additional": "cacheType",
        "position": {
            "x": -0.8531473165912375,
            "y": 2.09080484890125,
            "z": 3.8929259243799517
        }
    },
    "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/cacheType": {
        "id": "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/cacheType",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/cacheType"
        ],
        "label": "cacheType",
        "text": "cacheType",
        "color": "#F6E146",
        "additional": "cacheType",
        "position": {
            "x": -0.8617712896393579,
            "y": 2.2064975305229626,
            "z": 3.8637871483530897
        }
    },
    "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/cache": {
        "id": "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.8364085173836804,
            "y": 2.0628510589213254,
            "z": 3.7967147618642683
        }
    },
    "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/cache": {
        "id": "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.8431649402819357,
            "y": 2.177355408443858,
            "z": 3.767481795795848
        }
    },
    "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/timeZone": {
        "id": "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/timeZone",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/timeZone"
        ],
        "label": "timeZone",
        "text": "timeZone",
        "color": "#F6E146",
        "additional": "timeZone",
        "position": {
            "x": -0.9333350157735907,
            "y": 2.28253019918947,
            "z": 0.6887402036559999
        }
    },
    "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/timeZone": {
        "id": "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/timeZone",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/timeZone"
        ],
        "label": "timeZone",
        "text": "timeZone",
        "color": "#F6E146",
        "additional": "timeZone",
        "position": {
            "x": -0.920835489957647,
            "y": 2.1700405902209683,
            "z": 0.7287300826290652
        }
    },
    "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/directory": {
        "id": "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/directory",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/directory"
        ],
        "label": "directory",
        "text": "directory",
        "color": "#F6E146",
        "additional": "directory",
        "position": {
            "x": -0.8788072913637908,
            "y": 2.297742044731635,
            "z": 0.7883186737375001
        }
    },
    "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/directory": {
        "id": "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/directory",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/directory"
        ],
        "label": "directory",
        "text": "directory",
        "color": "#F6E146",
        "additional": "directory",
        "position": {
            "x": -0.8770232040254906,
            "y": 2.1860120782137518,
            "z": 0.8335114946615486
        }
    },
    "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/featureByIndex": {
        "id": "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/featureByIndex",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/featureByIndex"
        ],
        "label": "featureByIndex",
        "text": "featureByIndex",
        "color": "#F6E146",
        "additional": "featureByIndex",
        "position": {
            "x": -0.7371344665008608,
            "y": 2.356263195470952,
            "z": 0.7483040593231851
        }
    },
    "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/featureByIndex": {
        "id": "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/featureByIndex",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/featureByIndex"
        ],
        "label": "featureByIndex",
        "text": "featureByIndex",
        "color": "#F6E146",
        "additional": "featureByIndex",
        "position": {
            "x": -0.7351265510975333,
            "y": 2.2438854776420873,
            "z": 0.7890701162861019
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/itemsPerSet": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/itemsPerSet",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/itemsPerSet",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/itemsPerSet"
        ],
        "label": "itemsPerSet",
        "text": "itemsPerSet",
        "color": "#F6E146",
        "additional": "itemsPerSet",
        "position": {
            "x": 0.03334547096619023,
            "y": 1.4530239309387865,
            "z": 2.8251163735918006
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/itemsPerSet": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/itemsPerSet",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/itemsPerSet",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/itemsPerSet"
        ],
        "label": "itemsPerSet",
        "text": "itemsPerSet",
        "color": "#F6E146",
        "additional": "itemsPerSet",
        "position": {
            "x": -0.02306161750407787,
            "y": 1.4252483558707916,
            "z": 2.758168817586679
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/hashFunc": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/hashFunc",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/hashFunc",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/hashFunc"
        ],
        "label": "hashFunc",
        "text": "hashFunc",
        "color": "#F6E146",
        "additional": "hashFunc",
        "position": {
            "x": 0.22231081687874,
            "y": 1.5201108248220665,
            "z": 2.946632024657359
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/hashFunc": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/hashFunc",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/hashFunc",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/hashFunc"
        ],
        "label": "hashFunc",
        "text": "hashFunc",
        "color": "#F6E146",
        "additional": "hashFunc",
        "position": {
            "x": 0.17478864864786292,
            "y": 1.4687386642040323,
            "z": 2.8778661713881375
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/chainIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/chainIndex",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/chainIndex"
        ],
        "label": "chainIndex",
        "text": "chainIndex",
        "color": "#F6E146",
        "additional": "chainIndex",
        "position": {
            "x": 0.10718804362809342,
            "y": 1.862286226754055,
            "z": 2.852285367383077
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/chainIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/chainIndex",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/chainIndex"
        ],
        "label": "chainIndex",
        "text": "chainIndex",
        "color": "#F6E146",
        "additional": "chainIndex",
        "position": {
            "x": 0.06372770096694325,
            "y": 1.8093062228847472,
            "z": 2.783296074945545
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/rnd": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/rnd",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/rnd",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/rnd"
        ],
        "label": "rnd",
        "text": "rnd",
        "color": "#F6E146",
        "additional": "rnd",
        "position": {
            "x": 0.17672270712218285,
            "y": 1.651499592945014,
            "z": 3.0485328106956775
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/rnd": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/rnd",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/rnd",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/rnd"
        ],
        "label": "rnd",
        "text": "rnd",
        "color": "#F6E146",
        "additional": "rnd",
        "position": {
            "x": 0.12865633630577777,
            "y": 1.5961402736462178,
            "z": 2.98091924978037
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/lastIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/lastIndex",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/lastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/lastIndex"
        ],
        "label": "lastIndex",
        "text": "lastIndex",
        "color": "#F6E146",
        "additional": "lastIndex",
        "position": {
            "x": 0.20236462139470257,
            "y": 1.828029847664946,
            "z": 2.9730183968250734
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/lastIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/lastIndex",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/lastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/lastIndex"
        ],
        "label": "lastIndex",
        "text": "lastIndex",
        "color": "#F6E146",
        "additional": "lastIndex",
        "position": {
            "x": 0.15560700466481014,
            "y": 1.7941859213987918,
            "z": 2.9027970027971306
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/itemsPerSet": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/itemsPerSet",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/itemsPerSet",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/itemsPerSet"
        ],
        "label": "itemsPerSet",
        "text": "itemsPerSet",
        "color": "#F6E146",
        "additional": "itemsPerSet",
        "position": {
            "x": -0.05112436633186368,
            "y": 1.4169231394793629,
            "z": 2.8472738382593863
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/cache": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.07610201982313658,
            "y": 1.7143725748343537,
            "z": 2.9822803931612976
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/cache": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/cache",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.00690287791477151,
            "y": 1.6740671884159248,
            "z": 2.9978584920979774
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/hashFunc": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/hashFunc",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/hashFunc",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/hashFunc"
        ],
        "label": "hashFunc",
        "text": "hashFunc",
        "color": "#F6E146",
        "additional": "hashFunc",
        "position": {
            "x": 0.14227377434392485,
            "y": 1.453609532480602,
            "z": 2.967577407819417
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/chainIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/chainIndex",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/chainIndex"
        ],
        "label": "chainIndex",
        "text": "chainIndex",
        "color": "#F6E146",
        "additional": "chainIndex",
        "position": {
            "x": 0.022346816654749357,
            "y": 1.8066110810705391,
            "z": 2.868632455918645
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/rnd": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/rnd",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/rnd",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/rnd"
        ],
        "label": "rnd",
        "text": "rnd",
        "color": "#F6E146",
        "additional": "rnd",
        "position": {
            "x": 0.09123117757600241,
            "y": 1.5956930467819264,
            "z": 3.068067339515682
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/lastIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/lastIndex",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/lastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/lastIndex"
        ],
        "label": "lastIndex",
        "text": "lastIndex",
        "color": "#F6E146",
        "additional": "lastIndex",
        "position": {
            "x": 0.11746984517674042,
            "y": 1.7967243986368624,
            "z": 2.9951640889346156
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInFilter": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInFilter",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInFilter",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInFilter"
        ],
        "label": "isInFilter",
        "text": "isInFilter",
        "color": "#F6E146",
        "additional": "isInFilter",
        "position": {
            "x": -1.5263168153252498,
            "y": 2.6671410634318877,
            "z": 1.5626796540604455
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInFilter": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInFilter",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInFilter",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInFilter"
        ],
        "label": "isInFilter",
        "text": "isInFilter",
        "color": "#F6E146",
        "additional": "isInFilter",
        "position": {
            "x": -1.4939745488441063,
            "y": 2.5646213265777154,
            "z": 1.5438075236761752
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInMain": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInMain",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInMain",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInMain"
        ],
        "label": "isInMain",
        "text": "isInMain",
        "color": "#F6E146",
        "additional": "isInMain",
        "position": {
            "x": -1.4914454334423344,
            "y": 2.9834877357366865,
            "z": 1.3964986182886951
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInMain": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInMain",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInMain",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInMain"
        ],
        "label": "isInMain",
        "text": "isInMain",
        "color": "#F6E146",
        "additional": "isInMain",
        "position": {
            "x": -1.4757799845165935,
            "y": 2.8686563015668822,
            "z": 1.3717517026970514
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/key": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/key",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/key",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -1.5354292166079668,
            "y": 3.0938188891283525,
            "z": 1.5631444717455023
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/key": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/key",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/key",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -1.4923431795776767,
            "y": 2.9894643541766714,
            "z": 1.5652909377694664
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInFilter": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInFilter",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInFilter",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInFilter"
        ],
        "label": "isInFilter",
        "text": "isInFilter",
        "color": "#F6E146",
        "additional": "isInFilter",
        "position": {
            "x": -1.4484584373103546,
            "y": 2.6449468756553527,
            "z": 1.496046854482531
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInMain": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInMain",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInMain",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInMain"
        ],
        "label": "isInMain",
        "text": "isInMain",
        "color": "#F6E146",
        "additional": "isInMain",
        "position": {
            "x": -1.4208538096128072,
            "y": 2.9559689742604793,
            "z": 1.3347586754515879
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/key": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/key",
        "size": 0.07453194763821626,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/key",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -1.4585464585207304,
            "y": 3.066256752367191,
            "z": 1.5069586950037464
        }
    }
}